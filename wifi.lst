
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000003ea  2**0
                  ALLOC
  3 .stab         00001980  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ac8  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	f5 c0       	rjmp	.+490    	; 0x202 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e4       	ldi	r30, 0x46	; 70
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 37       	cpi	r26, 0x70	; 112
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e7       	ldi	r26, 0x70	; 112
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 37       	cpi	r26, 0x71	; 113
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	1d d0       	rcall	.+58     	; 0x90 <main>
  56:	75 c1       	rjmp	.+746    	; 0x342 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Init>:
#include "nRF24L01.h"

void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  5a:	92 b9       	out	0x02, r25	; 2
	UBRRL = (unsigned char)baud;
  5c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  5e:	88 e1       	ldi	r24, 0x18	; 24
  60:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<USBS)|(3<<UCSZ0);
  62:	8e e0       	ldi	r24, 0x0E	; 14
  64:	83 b9       	out	0x03, r24	; 3
}
  66:	08 95       	ret

00000068 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  68:	5d 9b       	sbis	0x0b, 5	; 11
  6a:	fe cf       	rjmp	.-4      	; 0x68 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
  6c:	8c b9       	out	0x0c, r24	; 12
}
  6e:	08 95       	ret

00000070 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  70:	5f 9b       	sbis	0x0b, 7	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  74:	8c b1       	in	r24, 0x0c	; 12
}
  76:	08 95       	ret

00000078 <transmit_string>:

transmit_string(char *ptr)
{
  78:	fc 01       	movw	r30, r24
	while(*ptr)
  7a:	80 81       	ld	r24, Z
  7c:	88 23       	and	r24, r24
  7e:	39 f0       	breq	.+14     	; 0x8e <transmit_string+0x16>
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <transmit_string+0x8>
	/* Put data into buffer, sends the data */
	UDR = data;
  84:	8c b9       	out	0x0c, r24	; 12
transmit_string(char *ptr)
{
	while(*ptr)
	{
		USART_Transmit(*ptr);
		ptr++;
  86:	31 96       	adiw	r30, 0x01	; 1
	return UDR;
}

transmit_string(char *ptr)
{
	while(*ptr)
  88:	80 81       	ld	r24, Z
  8a:	88 23       	and	r24, r24
  8c:	c9 f7       	brne	.-14     	; 0x80 <transmit_string+0x8>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
  8e:	08 95       	ret

00000090 <main>:

int main (void)
{
  90:	df 92       	push	r13
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	60 97       	sbiw	r28, 0x10	; 16
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
#include "nRF24L01.h"

void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  ae:	12 b8       	out	0x02, r1	; 2
	UBRRL = (unsigned char)baud;
  b0:	83 e3       	ldi	r24, 0x33	; 51
  b2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<USBS)|(3<<UCSZ0);
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	83 b9       	out	0x03, r24	; 3
}

int main (void)
{
	USART_Init(MY_UBBR);
	DDRB |= (1<<PB1); // Test passed LED
  bc:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<PB0); // Test failed LED
  be:	b8 9a       	sbi	0x17, 0	; 23
	
	char buffer [16] = {'h','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}'};
  c0:	7e 01       	movw	r14, r28
  c2:	08 94       	sec
  c4:	e1 1c       	adc	r14, r1
  c6:	f1 1c       	adc	r15, r1
  c8:	d7 01       	movw	r26, r14
  ca:	e0 e6       	ldi	r30, 0x60	; 96
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x40>
	uint8_t buffersize = 16;
	// Initialize AVR for use with mirf
	mirf_init();
  d8:	27 d1       	rcall	.+590    	; 0x328 <mirf_init>
  da:	24 ef       	ldi	r18, 0xF4	; 244
  dc:	31 e0       	ldi	r19, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	48 ec       	ldi	r20, 0xC8	; 200
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	ca 01       	movw	r24, r20
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__stack+0x5>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d1 f7       	brne	.-12     	; 0xe2 <__stack+0x3>
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
	sei();
  ee:	78 94       	sei
		transmit_string("Hallo Welt!\r\n");
	}*/
	
	//while (1)
	//{
		mirf_read_register (STATUS, buffer, 1);
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	b7 01       	movw	r22, r14
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	f6 d0       	rcall	.+492    	; 0x2e4 <mirf_read_register>
		if (buffer[0] == 0x0E)
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	8e 30       	cpi	r24, 0x0E	; 14
  fc:	a1 f0       	breq	.+40     	; 0x126 <__stack+0x47>
		{	
			PORTB |= (1<<PB1); // Test passed LED on
		}
		else
		{
			PORTB |= (1<<PB0); // Test failed LED on
  fe:	c0 9a       	sbi	0x18, 0	; 24
		}
		//_delay_ms (100);
	//}
	
	// Configure mirf
	mirf_config();
 100:	67 d0       	rcall	.+206    	; 0x1d0 <mirf_config>
	while (1)
	{
		buffer[15]++;
		if (buffer[15] < 'a' || buffer[15] > 'z')
		{
			buffer[15] = 'a';
 102:	81 e6       	ldi	r24, 0x61	; 97
 104:	d8 2e       	mov	r13, r24
 106:	00 e4       	ldi	r16, 0x40	; 64
 108:	1c e9       	ldi	r17, 0x9C	; 156
	// Configure mirf
	mirf_config();
	// Test communication
	while (1)
	{
		buffer[15]++;
 10a:	88 89       	ldd	r24, Y+16	; 0x10
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	88 8b       	std	Y+16, r24	; 0x10
		if (buffer[15] < 'a' || buffer[15] > 'z')
 110:	81 56       	subi	r24, 0x61	; 97
 112:	8a 31       	cpi	r24, 0x1A	; 26
 114:	08 f0       	brcs	.+2      	; 0x118 <__stack+0x39>
		{
			buffer[15] = 'a';
 116:	d8 8a       	std	Y+16, r13	; 0x10
		}
		
		mirf_send(buffer,buffersize);
 118:	c7 01       	movw	r24, r14
 11a:	60 e1       	ldi	r22, 0x10	; 16
 11c:	a6 d0       	rcall	.+332    	; 0x26a <mirf_send>
 11e:	c8 01       	movw	r24, r16
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <__stack+0x41>
 124:	f2 cf       	rjmp	.-28     	; 0x10a <__stack+0x2b>
	//while (1)
	//{
		mirf_read_register (STATUS, buffer, 1);
		if (buffer[0] == 0x0E)
		{	
			PORTB |= (1<<PB1); // Test passed LED on
 126:	c1 9a       	sbi	0x18, 1	; 24
 128:	eb cf       	rjmp	.-42     	; 0x100 <__stack+0x21>

0000012a <spi_init>:
#define USCK		PB7

void spi_init()
// Initialize pins for spi communication
{
    DDR_SPI &= ~(1<<DI);
 12a:	bd 98       	cbi	0x17, 5	; 23
	PORT_SPI |= (1<<DI); 
 12c:	c5 9a       	sbi	0x18, 5	; 24
	DDR_SPI |= (1<<USCK)|(1<<DO); 
 12e:	87 b3       	in	r24, 0x17	; 23
 130:	80 6c       	ori	r24, 0xC0	; 192
 132:	87 bb       	out	0x17, r24	; 23
	USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK); 
 134:	8a e1       	ldi	r24, 0x1A	; 26
 136:	8d b9       	out	0x0d, r24	; 13
	
	// For disabling SPI
	//DDRB &= ~((1<<USCK)|(1<<DI)|(1<<DO)); 
	//USICR = 0; 
}
 138:	08 95       	ret

0000013a <spi>:

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 13a:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	8e b9       	out	0x0e, r24	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 140:	8b e1       	ldi	r24, 0x1B	; 27
 142:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 144:	76 9b       	sbis	0x0e, 6	; 14
 146:	fd cf       	rjmp	.-6      	; 0x142 <spi+0x8>
	return USIDR; 
 148:	8f b1       	in	r24, 0x0f	; 15
} 
 14a:	08 95       	ret

0000014c <spi_transfer_sync>:

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
 14c:	dc 01       	movw	r26, r24
	uint8_t i;      
	for (i = 0; i < len; i++)
 14e:	44 23       	and	r20, r20
 150:	b1 f0       	breq	.+44     	; 0x17e <spi_transfer_sync+0x32>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 156:	90 e4       	ldi	r25, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 158:	5b e1       	ldi	r21, 0x1B	; 27
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 15a:	fd 01       	movw	r30, r26
 15c:	e2 0f       	add	r30, r18
 15e:	f3 1f       	adc	r31, r19
 160:	80 81       	ld	r24, Z
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 162:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 164:	9e b9       	out	0x0e, r25	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 166:	5d b9       	out	0x0d, r21	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 168:	76 9b       	sbis	0x0e, 6	; 14
 16a:	fd cf       	rjmp	.-6      	; 0x166 <spi_transfer_sync+0x1a>
	return USIDR; 
 16c:	8f b1       	in	r24, 0x0f	; 15
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 16e:	fb 01       	movw	r30, r22
 170:	e2 0f       	add	r30, r18
 172:	f3 1f       	adc	r31, r19
 174:	80 83       	st	Z, r24
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 17a:	24 17       	cp	r18, r20
 17c:	70 f3       	brcs	.-36     	; 0x15a <spi_transfer_sync+0xe>
 17e:	08 95       	ret

00000180 <spi_transmit_sync>:
	}
}

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
 180:	48 2f       	mov	r20, r24
	uint8_t i;      
	for (i = 0; i < len; i++)
 182:	66 23       	and	r22, r22
 184:	81 f0       	breq	.+32     	; 0x1a6 <spi_transmit_sync+0x26>
 186:	9c 01       	movw	r18, r24
 188:	f9 01       	movw	r30, r18
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 18a:	20 e4       	ldi	r18, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 18c:	9b e1       	ldi	r25, 0x1B	; 27
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		spi(dataout[i]);
 18e:	80 81       	ld	r24, Z
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 190:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 192:	2e b9       	out	0x0e, r18	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 194:	9d b9       	out	0x0d, r25	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 196:	76 9b       	sbis	0x0e, 6	; 14
 198:	fd cf       	rjmp	.-6      	; 0x194 <spi_transmit_sync+0x14>
	return USIDR; 
 19a:	8f b1       	in	r24, 0x0f	; 15
 19c:	31 96       	adiw	r30, 0x01	; 1

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 19e:	8e 2f       	mov	r24, r30
 1a0:	84 1b       	sub	r24, r20
 1a2:	86 17       	cp	r24, r22
 1a4:	a0 f3       	brcs	.-24     	; 0x18e <spi_transmit_sync+0xe>
 1a6:	08 95       	ret

000001a8 <spi_fast_shift>:
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 1a8:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	8e b9       	out	0x0e, r24	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1ae:	8b e1       	ldi	r24, 0x1B	; 27
 1b0:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1b2:	76 9b       	sbis	0x0e, 6	; 14
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <spi_fast_shift+0x8>
	return USIDR; 
 1b6:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	return spi(data);
}
 1b8:	08 95       	ret

000001ba <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 1ba:	1f 93       	push	r17
 1bc:	16 2f       	mov	r17, r22
    mirf_CSN_lo;
 1be:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 1c0:	8f 71       	andi	r24, 0x1F	; 31
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	f1 df       	rcall	.-30     	; 0x1a8 <spi_fast_shift>
    spi_fast_shift(value);
 1c6:	81 2f       	mov	r24, r17
 1c8:	ef df       	rcall	.-34     	; 0x1a8 <spi_fast_shift>
    mirf_CSN_hi;
 1ca:	c2 9a       	sbi	0x18, 2	; 24
}
 1cc:	1f 91       	pop	r17
 1ce:	08 95       	ret

000001d0 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	f2 df       	rcall	.-28     	; 0x1ba <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 1d6:	81 e1       	ldi	r24, 0x11	; 17
 1d8:	60 e1       	ldi	r22, 0x10	; 16
 1da:	ef df       	rcall	.-34     	; 0x1ba <mirf_config_register>

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 1dc:	10 92 70 00 	sts	0x0070, r1
    RX_POWERUP;     // Power up in receiving mode
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	6b e4       	ldi	r22, 0x4B	; 75
 1e4:	ea df       	rcall	.-44     	; 0x1ba <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 1e6:	c3 9a       	sbi	0x18, 3	; 24
}
 1e8:	08 95       	ret

000001ea <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 1ea:	80 91 70 00 	lds	r24, 0x0070
 1ee:	88 23       	and	r24, r24
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <mirf_data_ready+0xc>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 1f6:	c2 98       	cbi	0x18, 2	; 24
    status = spi_fast_shift(NOP);               // Read status register
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	d6 df       	rcall	.-84     	; 0x1a8 <spi_fast_shift>
    mirf_CSN_hi;                                // Pull up chip select
 1fc:	c2 9a       	sbi	0x18, 2	; 24
    return status & (1<<RX_DR);
 1fe:	80 74       	andi	r24, 0x40	; 64
}
 200:	08 95       	ret

00000202 <__vector_11>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 224:	80 91 70 00 	lds	r24, 0x0070
 228:	88 23       	and	r24, r24
 22a:	71 f0       	breq	.+28     	; 0x248 <__vector_11+0x46>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 22c:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	bb df       	rcall	.-138    	; 0x1a8 <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 232:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 234:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	6b e4       	ldi	r22, 0x4B	; 75
 23a:	bf df       	rcall	.-130    	; 0x1ba <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 23c:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 23e:	10 92 70 00 	sts	0x0070, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	60 e3       	ldi	r22, 0x30	; 48
 246:	b9 df       	rcall	.-142    	; 0x1ba <mirf_config_register>
    }
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
 274:	80 91 70 00 	lds	r24, 0x0070
 278:	88 23       	and	r24, r24
 27a:	e1 f7       	brne	.-8      	; 0x274 <mirf_send+0xa>

    mirf_CE_lo;
 27c:	c3 98       	cbi	0x18, 3	; 24

    PTX = 1;                        // Set to transmitter mode
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 70 00 	sts	0x0070, r24
    TX_POWERUP;                     // Power up
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	6a e4       	ldi	r22, 0x4A	; 74
 288:	98 df       	rcall	.-208    	; 0x1ba <mirf_config_register>
    
    mirf_CSN_lo;                    // Pull down chip select
 28a:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	8c df       	rcall	.-232    	; 0x1a8 <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 290:	c2 9a       	sbi	0x18, 2	; 24
    
    mirf_CSN_lo;                    // Pull down chip select
 292:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 294:	80 ea       	ldi	r24, 0xA0	; 160
 296:	88 df       	rcall	.-240    	; 0x1a8 <spi_fast_shift>
    spi_transmit_sync(value,len);   // Write payload
 298:	ce 01       	movw	r24, r28
 29a:	61 2f       	mov	r22, r17
 29c:	71 df       	rcall	.-286    	; 0x180 <spi_transmit_sync>
    mirf_CSN_hi;                    // Pull up chip select
 29e:	c2 9a       	sbi	0x18, 2	; 24
    
    mirf_CE_hi;                     // Start transmission
 2a0:	c3 9a       	sbi	0x18, 3	; 24
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	08 95       	ret

000002aa <mirf_write_register>:
    mirf_CSN_hi;
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	8b 01       	movw	r16, r22
 2b2:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
 2b4:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 2b6:	8f 71       	andi	r24, 0x1F	; 31
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	76 df       	rcall	.-276    	; 0x1a8 <spi_fast_shift>
    spi_transmit_sync(value,len);
 2bc:	c8 01       	movw	r24, r16
 2be:	6f 2d       	mov	r22, r15
 2c0:	5f df       	rcall	.-322    	; 0x180 <spi_transmit_sync>
    mirf_CSN_hi;
 2c2:	c2 9a       	sbi	0x18, 2	; 24
}
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	08 95       	ret

000002cc <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 2cc:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	45 e0       	ldi	r20, 0x05	; 5
 2d2:	eb df       	rcall	.-42     	; 0x2aa <mirf_write_register>
}
 2d4:	08 95       	ret

000002d6 <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 2d6:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 2d8:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P0,adr,5);
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	45 e0       	ldi	r20, 0x05	; 5
 2de:	e5 df       	rcall	.-54     	; 0x2aa <mirf_write_register>
    mirf_CE_hi;
 2e0:	c3 9a       	sbi	0x18, 3	; 24
}
 2e2:	08 95       	ret

000002e4 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	8b 01       	movw	r16, r22
 2ec:	f4 2e       	mov	r15, r20
    mirf_CSN_lo;
 2ee:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 2f0:	8f 71       	andi	r24, 0x1F	; 31
 2f2:	5a df       	rcall	.-332    	; 0x1a8 <spi_fast_shift>
    spi_transfer_sync(value,value,len);
 2f4:	c8 01       	movw	r24, r16
 2f6:	b8 01       	movw	r22, r16
 2f8:	4f 2d       	mov	r20, r15
 2fa:	28 df       	rcall	.-432    	; 0x14c <spi_transfer_sync>
    mirf_CSN_hi;
 2fc:	c2 9a       	sbi	0x18, 2	; 24
}
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	08 95       	ret

00000306 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	8c 01       	movw	r16, r24
    mirf_CSN_lo;                               // Pull down chip select
 30c:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 30e:	81 e6       	ldi	r24, 0x61	; 97
 310:	4b df       	rcall	.-362    	; 0x1a8 <spi_fast_shift>
    spi_transfer_sync(data,data,mirf_PAYLOAD); // Read payload
 312:	c8 01       	movw	r24, r16
 314:	b8 01       	movw	r22, r16
 316:	40 e1       	ldi	r20, 0x10	; 16
 318:	19 df       	rcall	.-462    	; 0x14c <spi_transfer_sync>
    mirf_CSN_hi;                               // Pull up chip select
 31a:	c2 9a       	sbi	0x18, 2	; 24
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 31c:	87 e0       	ldi	r24, 0x07	; 7
 31e:	60 e4       	ldi	r22, 0x40	; 64
 320:	4c df       	rcall	.-360    	; 0x1ba <mirf_config_register>
}
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 328:	87 b3       	in	r24, 0x17	; 23
 32a:	8c 60       	ori	r24, 0x0C	; 12
 32c:	87 bb       	out	0x17, r24	; 23
    mirf_CE_lo;
 32e:	c3 98       	cbi	0x18, 3	; 24
    mirf_CSN_hi;
 330:	c2 9a       	sbi	0x18, 2	; 24
    PCMSK2 = (1<<PCINT22);
    PCICR  = (1<<PCIE2);
#endif // __AVR_ATmega168__    */

// Initialize PCINT4
	GIMSK |= (1<<PCIE);
 332:	8b b7       	in	r24, 0x3b	; 59
 334:	80 62       	ori	r24, 0x20	; 32
 336:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PCINT4);
 338:	80 b5       	in	r24, 0x20	; 32
 33a:	80 61       	ori	r24, 0x10	; 16
 33c:	80 bd       	out	0x20, r24	; 32

    // Initialize spi module
    spi_init();
 33e:	f5 de       	rcall	.-534    	; 0x12a <spi_init>
}
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
