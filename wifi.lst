
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800086  00800086  00000680  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c54  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	a4 c0       	rjmp	.+328    	; 0x158 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	e7 c1       	rjmp	.+974    	; 0x3e6 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ec       	ldi	r30, 0xC6	; 198
  36:	f5 e0       	ldi	r31, 0x05	; 5
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 38       	cpi	r26, 0x86	; 134
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a6 e8       	ldi	r26, 0x86	; 134
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ab 38       	cpi	r26, 0x8B	; 139
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	d8 d0       	rcall	.+432    	; 0x206 <main>
  56:	b5 c2       	rjmp	.+1386   	; 0x5c2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <Transmit>:
volatile uint8_t buffer_index = 0;
volatile uint8_t transmit_flag = 0;
volatile uint8_t timeout_flag = 1;
volatile uint8_t doing_flag = 0;

void Transmit(uint8_t *buffer,uint8_t buffersize){
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	ec 01       	movw	r28, r24
    uint16_t counter = 0;
    while (mirf_send (buffer, BUFFER_SIZE) && counter < 1000)
  60:	04 c0       	rjmp	.+8      	; 0x6a <Transmit+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	8a e1       	ldi	r24, 0x1A	; 26
  64:	8a 95       	dec	r24
  66:	f1 f7       	brne	.-4      	; 0x64 <Transmit+0xa>
  68:	00 c0       	rjmp	.+0      	; 0x6a <Transmit+0x10>
  6a:	ce 01       	movw	r24, r28
  6c:	60 e2       	ldi	r22, 0x20	; 32
  6e:	41 d2       	rcall	.+1154   	; 0x4f2 <mirf_send>
  70:	88 23       	and	r24, r24
  72:	b9 f7       	brne	.-18     	; 0x62 <Transmit+0x8>
    }
    if (counter >= 1000)
    {
        //transmit_string("e");
    }
}
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	08 95       	ret

0000007a <Receive>:

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	8c 01       	movw	r16, r24
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  84:	c0 e0       	ldi	r28, 0x00	; 0
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	0a c0       	rjmp	.+20     	; 0x9e <Receive+0x24>
  8a:	87 ec       	ldi	r24, 0xC7	; 199
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <Receive+0x14>
  92:	00 c0       	rjmp	.+0      	; 0x94 <Receive+0x1a>
  94:	00 00       	nop
  96:	21 96       	adiw	r28, 0x01	; 1
        _delay_us (100);
        if(i > 50){
  98:	c4 33       	cpi	r28, 0x34	; 52
  9a:	d1 05       	cpc	r29, r1
  9c:	59 f0       	breq	.+22     	; 0xb4 <Receive+0x3a>
}

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  9e:	5a d1       	rcall	.+692    	; 0x354 <mirf_data_ready>
  a0:	88 23       	and	r24, r24
  a2:	99 f3       	breq	.-26     	; 0x8a <Receive+0x10>
    //transmit_string("data is ready but i want to see\n");
    //for(i = 0; i < 7;i++){
    //    USART_Transmit(test[i]);
    //}
    //_delay_ms(50);
    mirf_get_data(buffer);
  a4:	c8 01       	movw	r24, r16
  a6:	74 d1       	rcall	.+744    	; 0x390 <mirf_get_data>
//    for(i = 0; i < (buffersize); i++)
//    {
//        USART_Transmit(buffer[i]);
//    }
//    transmit_string("\r\n");
    return 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	08 95       	ret
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
        _delay_us (100);
        if(i > 50){
            return -1;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
//    {
//        USART_Transmit(buffer[i]);
//    }
//    transmit_string("\r\n");
    return 1;
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	1f 91       	pop	r17
  bc:	0f 91       	pop	r16
  be:	08 95       	ret

000000c0 <test_Transmit>:

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
  c0:	e6 2f       	mov	r30, r22
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	e8 0f       	add	r30, r24
  c8:	f9 1f       	adc	r31, r25
  ca:	20 81       	ld	r18, Z
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	20 83       	st	Z, r18
    if (buffer[len-1] < ' ' || buffer[15] > 'z')
  d0:	20 32       	cpi	r18, 0x20	; 32
  d2:	30 f0       	brcs	.+12     	; 0xe0 <__stack+0x1>
  d4:	dc 01       	movw	r26, r24
  d6:	1f 96       	adiw	r26, 0x0f	; 15
  d8:	2c 91       	ld	r18, X
  da:	1f 97       	sbiw	r26, 0x0f	; 15
  dc:	2b 37       	cpi	r18, 0x7B	; 123
  de:	10 f0       	brcs	.+4      	; 0xe4 <__stack+0x5>
    {
        buffer[len-1] = ' ';
  e0:	20 e2       	ldi	r18, 0x20	; 32
  e2:	20 83       	st	Z, r18
    }
    Transmit(buffer,len);
  e4:	ba df       	rcall	.-140    	; 0x5a <Transmit>
    
}
  e6:	08 95       	ret

000000e8 <test_protocol>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	ef e0       	ldi	r30, 0x0F	; 15
  ea:	f7 e2       	ldi	r31, 0x27	; 39
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <test_protocol+0x4>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <test_protocol+0xa>
  f2:	00 00       	nop
    _delay_ms(5);
    ////transmit_string("Rx_Powerup\r\n");
    //rx_powerup();
    //_delay_ms(1);
    //transmit_string("rxing\r\n");
    if(Receive(buffer,len)==1){
  f4:	c2 df       	rcall	.-124    	; 0x7a <Receive>
    }
    else{
        //transmit_string("rx bad\r\n");
    }
    //transmit_string ("test_protocol_done\r\n");
}
  f6:	08 95       	ret

000000f8 <USART_Flush>:
void USART_Flush( void )
{
    unsigned char dummy;
    while ( UCSRA & (1<<RXC) ) {dummy = UDR;}
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	03 c0       	rjmp	.+6      	; 0x102 <USART_Flush+0xa>
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	5f 99       	sbic	0x0b, 7	; 11
 100:	fd cf       	rjmp	.-6      	; 0xfc <USART_Flush+0x4>
 102:	08 95       	ret

00000104 <test>:
}

void test () {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
    if (1 == Receive(buffer, BUFFER_SIZE))
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	60 e2       	ldi	r22, 0x20	; 32
 10e:	b5 df       	rcall	.-150    	; 0x7a <Receive>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <test+0x30>
        {
            USART_Transmit(buffer[i]);
        }
        USART_Transmit('\n');
    }
    if(1 == buffer_in_use)
 114:	80 91 86 00 	lds	r24, 0x0086
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	19 f0       	breq	.+6      	; 0x122 <test+0x1e>
    {
        // do something with the data in buffer...
        Transmit(buffer, BUFFER_SIZE);
        buffer_in_use = 0;
    }
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret
        USART_Transmit('\n');
    }
    if(1 == buffer_in_use)
    {
        // do something with the data in buffer...
        Transmit(buffer, BUFFER_SIZE);
 122:	84 e6       	ldi	r24, 0x64	; 100
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	60 e2       	ldi	r22, 0x20	; 32
 128:	98 df       	rcall	.-208    	; 0x5a <Transmit>
        buffer_in_use = 0;
 12a:	10 92 86 00 	sts	0x0086, r1
    }
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret
}

void test () {
    if (1 == Receive(buffer, BUFFER_SIZE))
    {
        USART_Transmit('c');
 134:	83 e6       	ldi	r24, 0x63	; 99
 136:	31 d2       	rcall	.+1122   	; 0x59a <USART_Transmit>
        USART_Transmit('\n');
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	2f d2       	rcall	.+1118   	; 0x59a <USART_Transmit>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
        char i = 0;
        for(i = 0; i < BUFFER_SIZE; i++)
        {
            USART_Transmit(buffer[i]);
 140:	fe 01       	movw	r30, r28
 142:	ec 59       	subi	r30, 0x9C	; 156
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	28 d2       	rcall	.+1104   	; 0x59a <USART_Transmit>
 14a:	21 96       	adiw	r28, 0x01	; 1
    if (1 == Receive(buffer, BUFFER_SIZE))
    {
        USART_Transmit('c');
        USART_Transmit('\n');
        char i = 0;
        for(i = 0; i < BUFFER_SIZE; i++)
 14c:	c0 32       	cpi	r28, 0x20	; 32
 14e:	d1 05       	cpc	r29, r1
 150:	b9 f7       	brne	.-18     	; 0x140 <test+0x3c>
        {
            USART_Transmit(buffer[i]);
        }
        USART_Transmit('\n');
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	22 d2       	rcall	.+1092   	; 0x59a <USART_Transmit>
 156:	de cf       	rjmp	.-68     	; 0x114 <test+0x10>

00000158 <__vector_7>:
        buffer_in_use = 0;
    }
}


ISR(USART_RX_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31

    uint8_t data = USART_Receive();
 17a:	13 d2       	rcall	.+1062   	; 0x5a2 <USART_Receive>
    if ((0 == buffer_index) && (0 == buffer_in_use))
 17c:	90 91 87 00 	lds	r25, 0x0087
 180:	99 23       	and	r25, r25
 182:	21 f4       	brne	.+8      	; 0x18c <__vector_7+0x34>
 184:	90 91 86 00 	lds	r25, 0x0086
 188:	99 23       	and	r25, r25
 18a:	39 f1       	breq	.+78     	; 0x1da <__vector_7+0x82>
    {
        transmit_flag = 0;
    }
    if (0 == transmit_flag)
 18c:	90 91 88 00 	lds	r25, 0x0088
 190:	99 23       	and	r25, r25
 192:	31 f4       	brne	.+12     	; 0x1a0 <__vector_7+0x48>
    {
        buffer[buffer_index] = data;
 194:	e0 91 87 00 	lds	r30, 0x0087
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 59       	subi	r30, 0x9C	; 156
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 83       	st	Z, r24
    }

    if(buffer_index == 31){
 1a0:	80 91 87 00 	lds	r24, 0x0087
 1a4:	8f 31       	cpi	r24, 0x1F	; 31
 1a6:	e1 f0       	breq	.+56     	; 0x1e0 <__vector_7+0x88>
            buffer_in_use = 1;
            USART_Transmit('a');
            USART_Transmit('\n');
        }
    }
    buffer_index = ((buffer_index+1)%32);
 1a8:	80 91 87 00 	lds	r24, 0x0087
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	8f 71       	andi	r24, 0x1F	; 31
 1b2:	90 70       	andi	r25, 0x00	; 0
 1b4:	80 93 87 00 	sts	0x0087, r24
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti
ISR(USART_RX_vect){

    uint8_t data = USART_Receive();
    if ((0 == buffer_index) && (0 == buffer_in_use))
    {
        transmit_flag = 0;
 1da:	10 92 88 00 	sts	0x0088, r1
 1de:	d6 cf       	rjmp	.-84     	; 0x18c <__vector_7+0x34>
    {
        buffer[buffer_index] = data;
    }

    if(buffer_index == 31){
        if (1 == transmit_flag)
 1e0:	80 91 88 00 	lds	r24, 0x0088
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	51 f0       	breq	.+20     	; 0x1fc <__vector_7+0xa4>
            USART_Transmit('b');
            USART_Transmit('\n');
        }
        else
        {
            transmit_flag = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 88 00 	sts	0x0088, r24
            buffer_in_use = 1;
 1ee:	80 93 86 00 	sts	0x0086, r24
            USART_Transmit('a');
 1f2:	81 e6       	ldi	r24, 0x61	; 97
 1f4:	d2 d1       	rcall	.+932    	; 0x59a <USART_Transmit>
            USART_Transmit('\n');
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	d0 d1       	rcall	.+928    	; 0x59a <USART_Transmit>
 1fa:	d6 cf       	rjmp	.-84     	; 0x1a8 <__vector_7+0x50>
    }

    if(buffer_index == 31){
        if (1 == transmit_flag)
        {
            USART_Transmit('b');
 1fc:	82 e6       	ldi	r24, 0x62	; 98
 1fe:	cd d1       	rcall	.+922    	; 0x59a <USART_Transmit>
            USART_Transmit('\n');
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	cb d1       	rcall	.+918    	; 0x59a <USART_Transmit>
 204:	d1 cf       	rjmp	.-94     	; 0x1a8 <__vector_7+0x50>

00000206 <main>:
    }
    buffer_index = ((buffer_index+1)%32);
}

int main (void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	USART_Init(MY_UBBR);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	be d1       	rcall	.+892    	; 0x58c <USART_Init>
//    }
	
	//uint8_t buffersize = BUFFER_SIZE;
	// Initialize AVR for use with mirf

	mirf_init();
 210:	93 d0       	rcall	.+294    	; 0x338 <mirf_init>
 212:	8f e7       	ldi	r24, 0x7F	; 127
 214:	98 e3       	ldi	r25, 0x38	; 56
 216:	a1 e0       	ldi	r26, 0x01	; 1
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	a0 40       	sbci	r26, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x12>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x1c>
 222:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    sei();
 224:	78 94       	sei
	mirf_read_register (STATUS, buffer, 1);
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	64 e6       	ldi	r22, 0x64	; 100
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	1f d1       	rcall	.+574    	; 0x46e <mirf_read_register>
	// Configure mirf
	mirf_config();
 230:	11 d1       	rcall	.+546    	; 0x454 <mirf_config>
	// Test transmitting
	buffer[0] = '7';
 232:	87 e3       	ldi	r24, 0x37	; 55
 234:	80 93 64 00 	sts	0x0064, r24
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	90 e7       	ldi	r25, 0x70	; 112
 23c:	a2 e0       	ldi	r26, 0x02	; 2
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	a0 40       	sbci	r26, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x38>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x42>
 248:	00 00       	nop
    //rx_powerup();
    _delay_ms(100);
    mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	60 e3       	ldi	r22, 0x30	; 48
 24e:	8e d0       	rcall	.+284    	; 0x36c <mirf_config_register>
 250:	8f e7       	ldi	r24, 0x7F	; 127
 252:	98 e3       	ldi	r25, 0x38	; 56
 254:	a1 e0       	ldi	r26, 0x01	; 1
 256:	81 50       	subi	r24, 0x01	; 1
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	a0 40       	sbci	r26, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x50>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x5a>
 260:	00 00       	nop
    _delay_ms(50);
	
    transmit_string ("s\r\n");
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	a1 d1       	rcall	.+834    	; 0x5aa <transmit_string>
 268:	04 c0       	rjmp	.+8      	; 0x272 <main+0x6c>
            {
                USART_Transmit(buffer[i]);
            }
            USART_Transmit('\n');
        }
        if(1 == buffer_in_use)
 26a:	80 91 86 00 	lds	r24, 0x0086
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	d9 f0       	breq	.+54     	; 0x2a8 <main+0xa2>
	
    transmit_string ("s\r\n");
    while (1)
    {
        //test();
        if (1 == Receive(buffer, BUFFER_SIZE))
 272:	84 e6       	ldi	r24, 0x64	; 100
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	60 e2       	ldi	r22, 0x20	; 32
 278:	00 df       	rcall	.-512    	; 0x7a <Receive>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	b1 f7       	brne	.-20     	; 0x26a <main+0x64>
        {
            USART_Transmit('c');
 27e:	83 e6       	ldi	r24, 0x63	; 99
 280:	8c d1       	rcall	.+792    	; 0x59a <USART_Transmit>
            USART_Transmit('\n');
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	8a d1       	rcall	.+788    	; 0x59a <USART_Transmit>
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
            char i = 0;
            for(i = 0; i < BUFFER_SIZE; i++)
            {
                USART_Transmit(buffer[i]);
 28a:	fe 01       	movw	r30, r28
 28c:	ec 59       	subi	r30, 0x9C	; 156
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	80 81       	ld	r24, Z
 292:	83 d1       	rcall	.+774    	; 0x59a <USART_Transmit>
 294:	21 96       	adiw	r28, 0x01	; 1
        if (1 == Receive(buffer, BUFFER_SIZE))
        {
            USART_Transmit('c');
            USART_Transmit('\n');
            char i = 0;
            for(i = 0; i < BUFFER_SIZE; i++)
 296:	c0 32       	cpi	r28, 0x20	; 32
 298:	d1 05       	cpc	r29, r1
 29a:	b9 f7       	brne	.-18     	; 0x28a <main+0x84>
            {
                USART_Transmit(buffer[i]);
            }
            USART_Transmit('\n');
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	7d d1       	rcall	.+762    	; 0x59a <USART_Transmit>
        }
        if(1 == buffer_in_use)
 2a0:	80 91 86 00 	lds	r24, 0x0086
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	29 f7       	brne	.-54     	; 0x272 <main+0x6c>
        {
            // do something with the data in buffer...
            Transmit(buffer, BUFFER_SIZE);
 2a8:	84 e6       	ldi	r24, 0x64	; 100
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	60 e2       	ldi	r22, 0x20	; 32
 2ae:	d5 de       	rcall	.-598    	; 0x5a <Transmit>
            buffer_in_use = 0;
 2b0:	10 92 86 00 	sts	0x0086, r1
 2b4:	de cf       	rjmp	.-68     	; 0x272 <main+0x6c>

000002b6 <spi_init>:
 2b6:	bd 98       	cbi	0x17, 5	; 23
 2b8:	c5 9a       	sbi	0x18, 5	; 24
 2ba:	87 b3       	in	r24, 0x17	; 23
 2bc:	80 6c       	ori	r24, 0xC0	; 192
 2be:	87 bb       	out	0x17, r24	; 23
 2c0:	8a e1       	ldi	r24, 0x1A	; 26
 2c2:	8d b9       	out	0x0d, r24	; 13
 2c4:	08 95       	ret

000002c6 <spi>:
 2c6:	8f b9       	out	0x0f, r24	; 15
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	8e b9       	out	0x0e, r24	; 14
 2cc:	8b e1       	ldi	r24, 0x1B	; 27
 2ce:	8d b9       	out	0x0d, r24	; 13
 2d0:	76 9b       	sbis	0x0e, 6	; 14
 2d2:	fd cf       	rjmp	.-6      	; 0x2ce <spi+0x8>
 2d4:	8f b1       	in	r24, 0x0f	; 15
 2d6:	08 95       	ret

000002d8 <spi_transfer_sync>:
 2d8:	44 23       	and	r20, r20
 2da:	91 f0       	breq	.+36     	; 0x300 <spi_transfer_sync+0x28>
 2dc:	a8 2f       	mov	r26, r24
 2de:	b9 2f       	mov	r27, r25
 2e0:	e6 2f       	mov	r30, r22
 2e2:	f7 2f       	mov	r31, r23
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	30 e4       	ldi	r19, 0x40	; 64
 2e8:	8b e1       	ldi	r24, 0x1B	; 27
 2ea:	2d 91       	ld	r18, X+
 2ec:	2f b9       	out	0x0f, r18	; 15
 2ee:	3e b9       	out	0x0e, r19	; 14
 2f0:	8d b9       	out	0x0d, r24	; 13
 2f2:	76 9b       	sbis	0x0e, 6	; 14
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <spi_transfer_sync+0x18>
 2f6:	2f b1       	in	r18, 0x0f	; 15
 2f8:	21 93       	st	Z+, r18
 2fa:	9f 5f       	subi	r25, 0xFF	; 255
 2fc:	94 17       	cp	r25, r20
 2fe:	a8 f3       	brcs	.-22     	; 0x2ea <spi_transfer_sync+0x12>
 300:	08 95       	ret

00000302 <spi_transmit_sync>:
 302:	66 23       	and	r22, r22
 304:	79 f0       	breq	.+30     	; 0x324 <spi_transmit_sync+0x22>
 306:	e8 2f       	mov	r30, r24
 308:	f9 2f       	mov	r31, r25
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	30 e4       	ldi	r19, 0x40	; 64
 30e:	8b e1       	ldi	r24, 0x1B	; 27
 310:	21 91       	ld	r18, Z+
 312:	2f b9       	out	0x0f, r18	; 15
 314:	3e b9       	out	0x0e, r19	; 14
 316:	8d b9       	out	0x0d, r24	; 13
 318:	76 9b       	sbis	0x0e, 6	; 14
 31a:	fd cf       	rjmp	.-6      	; 0x316 <spi_transmit_sync+0x14>
 31c:	2f b1       	in	r18, 0x0f	; 15
 31e:	9f 5f       	subi	r25, 0xFF	; 255
 320:	96 17       	cp	r25, r22
 322:	b0 f3       	brcs	.-20     	; 0x310 <spi_transmit_sync+0xe>
 324:	08 95       	ret

00000326 <spi_fast_shift>:
 326:	8f b9       	out	0x0f, r24	; 15
 328:	80 e4       	ldi	r24, 0x40	; 64
 32a:	8e b9       	out	0x0e, r24	; 14
 32c:	8b e1       	ldi	r24, 0x1B	; 27
 32e:	8d b9       	out	0x0d, r24	; 13
 330:	76 9b       	sbis	0x0e, 6	; 14
 332:	fd cf       	rjmp	.-6      	; 0x32e <spi_fast_shift+0x8>
 334:	8f b1       	in	r24, 0x0f	; 15
 336:	08 95       	ret

00000338 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 338:	87 b3       	in	r24, 0x17	; 23
 33a:	8c 60       	ori	r24, 0x0C	; 12
 33c:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<PB4); //Enable the interrupt pin as an input set to high since the IRQ is active low
 33e:	c4 9a       	sbi	0x18, 4	; 24
    mirf_CE_lo;
 340:	c3 98       	cbi	0x18, 3	; 24
    mirf_CSN_hi;
 342:	c2 9a       	sbi	0x18, 2	; 24
    PCMSK0 |= (1<<PCINT3);
#endif // __AVR_ATmega8__

#if defined(__AVR_ATtiny2313__)
    // Initialize PCINT4
    GIMSK |= (1<<PCIE);
 344:	8b b7       	in	r24, 0x3b	; 59
 346:	80 62       	ori	r24, 0x20	; 32
 348:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PCINT4);
 34a:	80 b5       	in	r24, 0x20	; 32
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE);
	PCMSK |= (1<<PCINT4);
    */

    // Initialize spi module
    spi_init();
 350:	b2 df       	rcall	.-156    	; 0x2b6 <spi_init>
}
 352:	08 95       	ret

00000354 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 354:	80 91 8a 00 	lds	r24, 0x008A
 358:	88 23       	and	r24, r24
 35a:	11 f0       	breq	.+4      	; 0x360 <mirf_data_ready+0xc>
 35c:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = spi_fast_shift(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 35e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 360:	c2 98       	cbi	0x18, 2	; 24
    status = spi_fast_shift(NOP);               // Read status register
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	e0 df       	rcall	.-64     	; 0x326 <spi_fast_shift>
    mirf_CSN_hi;                                // Pull up chip select
 366:	c2 9a       	sbi	0x18, 2	; 24
    return status & (1<<RX_DR);
 368:	80 74       	andi	r24, 0x40	; 64
 36a:	08 95       	ret

0000036c <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	0f 92       	push	r0
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 376:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 378:	8f 71       	andi	r24, 0x1F	; 31
 37a:	80 62       	ori	r24, 0x20	; 32
 37c:	69 83       	std	Y+1, r22	; 0x01
 37e:	d3 df       	rcall	.-90     	; 0x326 <spi_fast_shift>
    spi_fast_shift(value);
 380:	69 81       	ldd	r22, Y+1	; 0x01
 382:	86 2f       	mov	r24, r22
 384:	d0 df       	rcall	.-96     	; 0x326 <spi_fast_shift>
    mirf_CSN_hi;
 386:	c2 9a       	sbi	0x18, 2	; 24
}
 388:	0f 90       	pop	r0
 38a:	cf 91       	pop	r28
 38c:	df 91       	pop	r29
 38e:	08 95       	ret

00000390 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 396:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 398:	81 e6       	ldi	r24, 0x61	; 97
 39a:	c5 df       	rcall	.-118    	; 0x326 <spi_fast_shift>
    spi_transfer_sync(data,data,mirf_PAYLOAD); // Read payload
 39c:	ce 01       	movw	r24, r28
 39e:	be 01       	movw	r22, r28
 3a0:	40 e2       	ldi	r20, 0x20	; 32
 3a2:	9a df       	rcall	.-204    	; 0x2d8 <spi_transfer_sync>
    mirf_CSN_hi;                               // Pull up chip select
 3a4:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 3a6:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_RX );     // Write cmd to flush tx fifo
 3a8:	82 ee       	ldi	r24, 0xE2	; 226
 3aa:	bd df       	rcall	.-134    	; 0x326 <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 3ac:	c2 9a       	sbi	0x18, 2	; 24
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 3ae:	87 e0       	ldi	r24, 0x07	; 7
 3b0:	60 e4       	ldi	r22, 0x40	; 64
 3b2:	dc df       	rcall	.-72     	; 0x36c <mirf_config_register>
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <tx_complete>:
//    EIFR |= (1<<PCIF);
}

void tx_complete(void){
    uint8_t status;
    if (PTX) {
 3ba:	80 91 8a 00 	lds	r24, 0x008A
 3be:	88 23       	and	r24, r24
 3c0:	71 f0       	breq	.+28     	; 0x3de <tx_complete+0x24>
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 3c2:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	af df       	rcall	.-162    	; 0x326 <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 3c8:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 3ca:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	6b e4       	ldi	r22, 0x4B	; 75
 3d0:	cd df       	rcall	.-102    	; 0x36c <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 3d2:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 3d4:	10 92 8a 00 	sts	0x008A, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 3d8:	87 e0       	ldi	r24, 0x07	; 7
 3da:	60 e3       	ldi	r22, 0x30	; 48
 3dc:	c7 df       	rcall	.-114    	; 0x36c <mirf_config_register>
    }
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
 3de:	8a b7       	in	r24, 0x3a	; 58
 3e0:	80 62       	ori	r24, 0x20	; 32
 3e2:	8a bf       	out	0x3a, r24	; 58
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
#endif // __AVR_ATmega168__  
}
 3e4:	08 95       	ret

000003e6 <__vector_11>:
#if defined(__AVR_ATtiny167__)
    ISR(PCINT0_vect)
#endif // __AVR_ATmega168__  
// Interrupt handler 
//ISR(PCINT_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
    //DDRD |= (1<<6);
    //PORTD |= (1<<6);
    //transmit_string("interupted\n");
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 408:	80 91 8a 00 	lds	r24, 0x008A
 40c:	88 23       	and	r24, r24
 40e:	71 f0       	breq	.+28     	; 0x42c <__vector_11+0x46>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 410:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	88 df       	rcall	.-240    	; 0x326 <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 416:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 418:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	6b e4       	ldi	r22, 0x4B	; 75
 41e:	a6 df       	rcall	.-180    	; 0x36c <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 420:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 422:	10 92 8a 00 	sts	0x008A, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 426:	87 e0       	ldi	r24, 0x07	; 7
 428:	60 e3       	ldi	r22, 0x30	; 48
 42a:	a0 df       	rcall	.-192    	; 0x36c <mirf_config_register>
    }
//PORTD &= (~(1<<6));
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
 42c:	8a b7       	in	r24, 0x3a	; 58
 42e:	80 62       	ori	r24, 0x20	; 32
 430:	8a bf       	out	0x3a, r24	; 58
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
#endif // __AVR_ATmega168__  
//    EIFR |= (1<<PCIF);
}
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 454:	85 e0       	ldi	r24, 0x05	; 5
 456:	6c e3       	ldi	r22, 0x3C	; 60
 458:	89 df       	rcall	.-238    	; 0x36c <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 45a:	81 e1       	ldi	r24, 0x11	; 17
 45c:	60 e2       	ldi	r22, 0x20	; 32
 45e:	86 df       	rcall	.-244    	; 0x36c <mirf_config_register>
    //mirf_set_RADDR(0xB3B4B5B621);
    //mirf_set_TADDR(0xB3B4B5B621);
    //mirf_set_TADDR(0x7878787878);

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 460:	10 92 8a 00 	sts	0x008A, r1
    RX_POWERUP;     // Power up in receiving mode
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	6b e4       	ldi	r22, 0x4B	; 75
 468:	81 df       	rcall	.-254    	; 0x36c <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 46a:	c3 9a       	sbi	0x18, 3	; 24
}
 46c:	08 95       	ret

0000046e <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	df 93       	push	r29
 474:	cf 93       	push	r28
 476:	0f 92       	push	r0
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 47e:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 480:	8f 71       	andi	r24, 0x1F	; 31
 482:	49 83       	std	Y+1, r20	; 0x01
 484:	50 df       	rcall	.-352    	; 0x326 <spi_fast_shift>
    spi_transfer_sync(value,value,len);
 486:	c8 01       	movw	r24, r16
 488:	b8 01       	movw	r22, r16
 48a:	49 81       	ldd	r20, Y+1	; 0x01
 48c:	25 df       	rcall	.-438    	; 0x2d8 <spi_transfer_sync>
    mirf_CSN_hi;
 48e:	c2 9a       	sbi	0x18, 2	; 24
}
 490:	0f 90       	pop	r0
 492:	cf 91       	pop	r28
 494:	df 91       	pop	r29
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	08 95       	ret

0000049c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	df 93       	push	r29
 4a2:	cf 93       	push	r28
 4a4:	0f 92       	push	r0
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 4ac:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 4ae:	8f 71       	andi	r24, 0x1F	; 31
 4b0:	80 62       	ori	r24, 0x20	; 32
 4b2:	49 83       	std	Y+1, r20	; 0x01
 4b4:	38 df       	rcall	.-400    	; 0x326 <spi_fast_shift>
    spi_transmit_sync(value,len);
 4b6:	c8 01       	movw	r24, r16
 4b8:	49 81       	ldd	r20, Y+1	; 0x01
 4ba:	64 2f       	mov	r22, r20
 4bc:	22 df       	rcall	.-444    	; 0x302 <spi_transmit_sync>
    mirf_CSN_hi;
 4be:	c2 9a       	sbi	0x18, 2	; 24
}
 4c0:	0f 90       	pop	r0
 4c2:	cf 91       	pop	r28
 4c4:	df 91       	pop	r29
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 4cc:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 4ce:	80 e1       	ldi	r24, 0x10	; 16
 4d0:	45 e0       	ldi	r20, 0x05	; 5
 4d2:	e4 df       	rcall	.-56     	; 0x49c <mirf_write_register>
}
 4d4:	08 95       	ret

000004d6 <mirf_set_RADDR>:
    mirf_CE_hi;
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 4d6:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 4d8:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P0,adr,5);
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	45 e0       	ldi	r20, 0x05	; 5
 4de:	de df       	rcall	.-68     	; 0x49c <mirf_write_register>
    mirf_CE_hi;
 4e0:	c3 9a       	sbi	0x18, 3	; 24
}
 4e2:	08 95       	ret

000004e4 <mirf_set_RADDR_P1>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR_P1(uint8_t * adr) 
// Sets the receiving address
{
 4e4:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 4e6:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P1,adr,5);
 4e8:	8b e0       	ldi	r24, 0x0B	; 11
 4ea:	45 e0       	ldi	r20, 0x05	; 5
 4ec:	d7 df       	rcall	.-82     	; 0x49c <mirf_write_register>
    mirf_CE_hi;
 4ee:	c3 9a       	sbi	0x18, 3	; 24
}
 4f0:	08 95       	ret

000004f2 <mirf_send>:


char mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	0f 92       	push	r0
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	8c 01       	movw	r16, r24
 506:	f6 2e       	mov	r15, r22

    // Save interrupt state and turn off interrupts
    uint8_t sreg_original = SREG;
 508:	ef b6       	in	r14, 0x3f	; 63
    cli ();
 50a:	f8 94       	cli

    uint8_t status = 0;
 50c:	19 82       	std	Y+1, r1	; 0x01
    mirf_read_register (STATUS, &status, 1);
 50e:	87 e0       	ldi	r24, 0x07	; 7
 510:	be 01       	movw	r22, r28
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	aa df       	rcall	.-172    	; 0x46e <mirf_read_register>

    
    #if defined(__AVR_ATtiny2313__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PB4)) || ((status & (1<<MASK_TX_DS)) && PTX))
 51a:	b4 99       	sbic	0x16, 4	; 22
 51c:	15 c0       	rjmp	.+42     	; 0x548 <mirf_send+0x56>
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	85 fd       	sbrc	r24, 5
 522:	0e c0       	rjmp	.+28     	; 0x540 <mirf_send+0x4e>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
 524:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
 526:	80 91 8a 00 	lds	r24, 0x008A
 52a:	88 23       	and	r24, r24
 52c:	99 f0       	breq	.+38     	; 0x554 <mirf_send+0x62>
    {
        return -1; 
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 //   USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
//    USART_Transmit('q');
    return 0;
}
 530:	0f 90       	pop	r0
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	08 95       	ret

    
    #if defined(__AVR_ATtiny2313__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PB4)) || ((status & (1<<MASK_TX_DS)) && PTX))
 540:	80 91 8a 00 	lds	r24, 0x008A
 544:	88 23       	and	r24, r24
 546:	71 f3       	breq	.-36     	; 0x524 <mirf_send+0x32>
    {
        tx_complete();
 548:	38 df       	rcall	.-400    	; 0x3ba <tx_complete>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
 54a:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
 54c:	80 91 8a 00 	lds	r24, 0x008A
 550:	88 23       	and	r24, r24
 552:	69 f7       	brne	.-38     	; 0x52e <mirf_send+0x3c>
        return -1; 
    }
//    while (PTX) {}                  // Wait until last paket is send

//    USART_Transmit('h');
    mirf_CE_lo;
 554:	c3 98       	cbi	0x18, 3	; 24

    PTX = 1;                        // Set to transmitter mode
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 8a 00 	sts	0x008A, r24
    TX_POWERUP;                     // Power up
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	6a e4       	ldi	r22, 0x4A	; 74
 560:	05 df       	rcall	.-502    	; 0x36c <mirf_config_register>
    
    //USART_Transmit('h');
    mirf_CSN_lo;                    // Pull down chip select
 562:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
 564:	81 ee       	ldi	r24, 0xE1	; 225
 566:	df de       	rcall	.-578    	; 0x326 <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 568:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 56a:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 56c:	80 ea       	ldi	r24, 0xA0	; 160
 56e:	db de       	rcall	.-586    	; 0x326 <spi_fast_shift>
    //USART_Transmit('h');
    //spi_transmit_sync(testbuffer,16);
    spi_transmit_sync(value,len);   // Write payload
 570:	c8 01       	movw	r24, r16
 572:	6f 2d       	mov	r22, r15
 574:	c6 de       	rcall	.-628    	; 0x302 <spi_transmit_sync>
    mirf_CSN_hi;                    // Pull up chip select
 576:	c2 9a       	sbi	0x18, 2	; 24
 //   USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
 578:	c3 9a       	sbi	0x18, 3	; 24
//    USART_Transmit('q');
    return 0;
 57a:	80 e0       	ldi	r24, 0x00	; 0
}
 57c:	0f 90       	pop	r0
 57e:	cf 91       	pop	r28
 580:	df 91       	pop	r29
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	08 95       	ret

0000058c <USART_Init>:
 58c:	92 b9       	out	0x02, r25	; 2
 58e:	89 b9       	out	0x09, r24	; 9
 590:	88 e9       	ldi	r24, 0x98	; 152
 592:	8a b9       	out	0x0a, r24	; 10
 594:	8e e0       	ldi	r24, 0x0E	; 14
 596:	83 b9       	out	0x03, r24	; 3
 598:	08 95       	ret

0000059a <USART_Transmit>:
 59a:	5d 9b       	sbis	0x0b, 5	; 11
 59c:	fe cf       	rjmp	.-4      	; 0x59a <USART_Transmit>
 59e:	8c b9       	out	0x0c, r24	; 12
 5a0:	08 95       	ret

000005a2 <USART_Receive>:
 5a2:	5f 9b       	sbis	0x0b, 7	; 11
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <USART_Receive>
 5a6:	8c b1       	in	r24, 0x0c	; 12
 5a8:	08 95       	ret

000005aa <transmit_string>:
 5aa:	fc 01       	movw	r30, r24
 5ac:	80 81       	ld	r24, Z
 5ae:	88 23       	and	r24, r24
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <transmit_string+0x16>
 5b2:	31 96       	adiw	r30, 0x01	; 1
 5b4:	5d 9b       	sbis	0x0b, 5	; 11
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <transmit_string+0xa>
 5b8:	8c b9       	out	0x0c, r24	; 12
 5ba:	81 91       	ld	r24, Z+
 5bc:	88 23       	and	r24, r24
 5be:	d1 f7       	brne	.-12     	; 0x5b4 <transmit_string+0xa>
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
