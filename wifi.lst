
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000006e2  00000776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  0000079c  2**0
                  ALLOC
  3 .stab         00002694  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d2e  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	cb c0       	rjmp	.+406    	; 0x1a6 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	59 c2       	rjmp	.+1202   	; 0x4ca <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 ee       	ldi	r30, 0xE2	; 226
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 38       	cpi	r26, 0x86	; 134
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a6 e8       	ldi	r26, 0x86	; 134
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ac 38       	cpi	r26, 0x8C	; 140
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0a d1       	rcall	.+532    	; 0x26a <main>
  56:	43 c3       	rjmp	.+1670   	; 0x6de <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <Transmit>:
volatile uint8_t buffer_index = 0;
volatile uint8_t transmit_flag = 0;
volatile uint8_t timeout_flag = 1;
volatile uint8_t doing_flag = 0;

void Transmit(uint8_t *buffer,uint8_t buffersize){
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	ec 01       	movw	r28, r24
    uint16_t counter = 0;
    while (mirf_send (buffer, BUFFER_SIZE) && counter < 1000)
  60:	04 c0       	rjmp	.+8      	; 0x6a <Transmit+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	8a e1       	ldi	r24, 0x1A	; 26
  64:	8a 95       	dec	r24
  66:	f1 f7       	brne	.-4      	; 0x64 <Transmit+0xa>
  68:	00 c0       	rjmp	.+0      	; 0x6a <Transmit+0x10>
  6a:	ce 01       	movw	r24, r28
  6c:	60 e2       	ldi	r22, 0x20	; 32
  6e:	cf d2       	rcall	.+1438   	; 0x60e <mirf_send>
  70:	88 23       	and	r24, r24
  72:	b9 f7       	brne	.-18     	; 0x62 <Transmit+0x8>
    }
    if (counter >= 1000)
    {
        //transmit_string("e");
    }
}
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	08 95       	ret

0000007a <Receive>:

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	8c 01       	movw	r16, r24
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  84:	c0 e0       	ldi	r28, 0x00	; 0
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	0a c0       	rjmp	.+20     	; 0x9e <Receive+0x24>
  8a:	87 ec       	ldi	r24, 0xC7	; 199
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <Receive+0x14>
  92:	00 c0       	rjmp	.+0      	; 0x94 <Receive+0x1a>
  94:	00 00       	nop
  96:	21 96       	adiw	r28, 0x01	; 1
        _delay_us (100);
        if(i > 50){
  98:	c4 33       	cpi	r28, 0x34	; 52
  9a:	d1 05       	cpc	r29, r1
  9c:	59 f0       	breq	.+22     	; 0xb4 <Receive+0x3a>
}

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  9e:	cc d1       	rcall	.+920    	; 0x438 <mirf_data_ready>
  a0:	88 23       	and	r24, r24
  a2:	99 f3       	breq	.-26     	; 0x8a <Receive+0x10>
    //transmit_string("data is ready but i want to see\n");
    //for(i = 0; i < 7;i++){
    //    USART_Transmit(test[i]);
    //}
    //_delay_ms(50);
    mirf_get_data(buffer);
  a4:	c8 01       	movw	r24, r16
  a6:	e6 d1       	rcall	.+972    	; 0x474 <mirf_get_data>
//    for(i = 0; i < (buffersize); i++)
//    {
//        USART_Transmit(buffer[i]);
//    }
//    transmit_string("\r\n");
    return 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	08 95       	ret
    uint32_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
        _delay_us (100);
        if(i > 50){
            return -1;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
//    {
//        USART_Transmit(buffer[i]);
//    }
//    transmit_string("\r\n");
    return 1;
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	1f 91       	pop	r17
  bc:	0f 91       	pop	r16
  be:	08 95       	ret

000000c0 <test_Transmit>:

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
  c0:	e6 2f       	mov	r30, r22
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	e8 0f       	add	r30, r24
  c8:	f9 1f       	adc	r31, r25
  ca:	20 81       	ld	r18, Z
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	20 83       	st	Z, r18
    if (buffer[len-1] < ' ' || buffer[15] > 'z')
  d0:	20 32       	cpi	r18, 0x20	; 32
  d2:	30 f0       	brcs	.+12     	; 0xe0 <__stack+0x1>
  d4:	dc 01       	movw	r26, r24
  d6:	1f 96       	adiw	r26, 0x0f	; 15
  d8:	2c 91       	ld	r18, X
  da:	1f 97       	sbiw	r26, 0x0f	; 15
  dc:	2b 37       	cpi	r18, 0x7B	; 123
  de:	10 f0       	brcs	.+4      	; 0xe4 <__stack+0x5>
    {
        buffer[len-1] = ' ';
  e0:	20 e2       	ldi	r18, 0x20	; 32
  e2:	20 83       	st	Z, r18
    }
    Transmit(buffer,len);
  e4:	ba df       	rcall	.-140    	; 0x5a <Transmit>
    
}
  e6:	08 95       	ret

000000e8 <test_protocol>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	ef e0       	ldi	r30, 0x0F	; 15
  ea:	f7 e2       	ldi	r31, 0x27	; 39
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <test_protocol+0x4>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <test_protocol+0xa>
  f2:	00 00       	nop
    _delay_ms(5);
    ////transmit_string("Rx_Powerup\r\n");
    //rx_powerup();
    //_delay_ms(1);
    //transmit_string("rxing\r\n");
    if(Receive(buffer,len)==1){
  f4:	c2 df       	rcall	.-124    	; 0x7a <Receive>
    }
    else{
        //transmit_string("rx bad\r\n");
    }
    //transmit_string ("test_protocol_done\r\n");
}
  f6:	08 95       	ret

000000f8 <USART_Flush>:
void USART_Flush( void )
{
    unsigned char dummy;
    while ( UCSRA & (1<<RXC) ) {dummy = UDR;}
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	03 c0       	rjmp	.+6      	; 0x102 <USART_Flush+0xa>
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	5f 99       	sbic	0x0b, 7	; 11
 100:	fd cf       	rjmp	.-6      	; 0xfc <USART_Flush+0x4>
 102:	08 95       	ret

00000104 <test>:
}

void test () {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
    if (1 == Receive(buffer, BUFFER_SIZE))
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	60 e2       	ldi	r22, 0x20	; 32
 10e:	b5 df       	rcall	.-150    	; 0x7a <Receive>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <test+0x30>
        {
            USART_Transmit(buffer[i]);
        }
        USART_Transmit('\n');
    }
    if(1 == buffer_in_use)
 114:	80 91 87 00 	lds	r24, 0x0087
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	19 f0       	breq	.+6      	; 0x122 <test+0x1e>
    {
        // do something with the data in buffer...
        Transmit(buffer, BUFFER_SIZE);
        buffer_in_use = 0;
    }
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret
        USART_Transmit('\n');
    }
    if(1 == buffer_in_use)
    {
        // do something with the data in buffer...
        Transmit(buffer, BUFFER_SIZE);
 122:	84 e6       	ldi	r24, 0x64	; 100
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	60 e2       	ldi	r22, 0x20	; 32
 128:	98 df       	rcall	.-208    	; 0x5a <Transmit>
        buffer_in_use = 0;
 12a:	10 92 87 00 	sts	0x0087, r1
    }
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret
}

void test () {
    if (1 == Receive(buffer, BUFFER_SIZE))
    {
        USART_Transmit('c');
 134:	83 e6       	ldi	r24, 0x63	; 99
 136:	bf d2       	rcall	.+1406   	; 0x6b6 <USART_Transmit>
        USART_Transmit('\n');
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	bd d2       	rcall	.+1402   	; 0x6b6 <USART_Transmit>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
        char i = 0;
        for(i = 0; i < BUFFER_SIZE; i++)
        {
            USART_Transmit(buffer[i]);
 140:	fe 01       	movw	r30, r28
 142:	ec 59       	subi	r30, 0x9C	; 156
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	b6 d2       	rcall	.+1388   	; 0x6b6 <USART_Transmit>
 14a:	21 96       	adiw	r28, 0x01	; 1
    if (1 == Receive(buffer, BUFFER_SIZE))
    {
        USART_Transmit('c');
        USART_Transmit('\n');
        char i = 0;
        for(i = 0; i < BUFFER_SIZE; i++)
 14c:	c0 32       	cpi	r28, 0x20	; 32
 14e:	d1 05       	cpc	r29, r1
 150:	b9 f7       	brne	.-18     	; 0x140 <test+0x3c>
        {
            USART_Transmit(buffer[i]);
        }
        USART_Transmit('\n');
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	b0 d2       	rcall	.+1376   	; 0x6b6 <USART_Transmit>
 156:	de cf       	rjmp	.-68     	; 0x114 <test+0x10>

00000158 <set_channel>:
        buffer_in_use = 0;
    }
}

void set_channel(uint8_t channel)
{
 158:	68 2f       	mov	r22, r24
    mirf_config_register(RF_CH,channel); // Set the channel
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	79 d1       	rcall	.+754    	; 0x450 <mirf_config_register>
}
 15e:	08 95       	ret

00000160 <set_TX_addr>:

void set_TX_addr(uint8_t *addr){
    mirf_set_TADDR(addr);
 160:	27 d2       	rcall	.+1102   	; 0x5b0 <mirf_set_TADDR>
}
 162:	08 95       	ret

00000164 <set_RX_addr>:

void set_RX_addr(uint8_t pipe,uint8_t *addr)
{
    switch(pipe){
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <set_RX_addr+0x36>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	38 f0       	brcs	.+14     	; 0x17a <set_RX_addr+0x16>
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	c1 f0       	breq	.+48     	; 0x1a0 <set_RX_addr+0x3c>
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	58 f4       	brcc	.+22     	; 0x18a <set_RX_addr+0x26>
            break;
        case 2:
            mirf_set_RADDR_P2(addr); 
            break;
        case 3:
            mirf_set_RADDR_P3(addr);
 174:	cb 01       	movw	r24, r22
 176:	2f d2       	rcall	.+1118   	; 0x5d6 <mirf_set_RADDR_P3>
            break;
 178:	08 95       	ret
    mirf_set_TADDR(addr);
}

void set_RX_addr(uint8_t pipe,uint8_t *addr)
{
    switch(pipe){
 17a:	88 23       	and	r24, r24
 17c:	19 f4       	brne	.+6      	; 0x184 <set_RX_addr+0x20>
        case 0:
            mirf_set_RADDR(addr);
 17e:	cb 01       	movw	r24, r22
 180:	3f d2       	rcall	.+1150   	; 0x600 <mirf_set_RADDR>
            break;
 182:	08 95       	ret
    mirf_set_TADDR(addr);
}

void set_RX_addr(uint8_t pipe,uint8_t *addr)
{
    switch(pipe){
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	31 f0       	breq	.+12     	; 0x194 <set_RX_addr+0x30>
 188:	08 95       	ret
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	e9 f7       	brne	.-6      	; 0x188 <set_RX_addr+0x24>
            break;
        case 4:
            mirf_set_RADDR_P4(addr); 
            break;
        case 5:
            mirf_set_RADDR_P5(addr); 
 18e:	cb 01       	movw	r24, r22
 190:	14 d2       	rcall	.+1064   	; 0x5ba <mirf_set_RADDR_P5>
 192:	08 95       	ret
    switch(pipe){
        case 0:
            mirf_set_RADDR(addr);
            break;
        case 1:
            mirf_set_RADDR_P1(addr);
 194:	cb 01       	movw	r24, r22
 196:	2d d2       	rcall	.+1114   	; 0x5f2 <mirf_set_RADDR_P1>
            break;
 198:	08 95       	ret
        case 2:
            mirf_set_RADDR_P2(addr); 
 19a:	cb 01       	movw	r24, r22
 19c:	23 d2       	rcall	.+1094   	; 0x5e4 <mirf_set_RADDR_P2>
            break;
 19e:	08 95       	ret
        case 3:
            mirf_set_RADDR_P3(addr);
            break;
        case 4:
            mirf_set_RADDR_P4(addr); 
 1a0:	cb 01       	movw	r24, r22
 1a2:	12 d2       	rcall	.+1060   	; 0x5c8 <mirf_set_RADDR_P4>
            break;
 1a4:	08 95       	ret

000001a6 <__vector_7>:
            break;
    }
}


ISR(USART_RX_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31

    uint8_t data = USART_Receive();
 1c8:	7a d2       	rcall	.+1268   	; 0x6be <USART_Receive>
    if ((0 == buffer_index) && (0 == buffer_in_use))
 1ca:	90 91 88 00 	lds	r25, 0x0088
 1ce:	99 23       	and	r25, r25
 1d0:	29 f4       	brne	.+10     	; 0x1dc <__vector_7+0x36>
 1d2:	90 91 87 00 	lds	r25, 0x0087
 1d6:	99 23       	and	r25, r25
 1d8:	09 f4       	brne	.+2      	; 0x1dc <__vector_7+0x36>
 1da:	3f c0       	rjmp	.+126    	; 0x25a <__vector_7+0xb4>
    {
        transmit_flag = 0;
    }
    if (0 == transmit_flag)
 1dc:	90 91 89 00 	lds	r25, 0x0089
 1e0:	99 23       	and	r25, r25
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <__vector_7+0x4a>
    {
        if(0 == buffer_index)
 1e4:	90 91 88 00 	lds	r25, 0x0088
 1e8:	99 23       	and	r25, r25
 1ea:	f9 f4       	brne	.+62     	; 0x22a <__vector_7+0x84>
        {
            instr = data;
 1ec:	80 93 86 00 	sts	0x0086, r24
        {
            buffer[buffer_index] = data;
        }
    }

    if(buffer_index == 32){
 1f0:	80 91 88 00 	lds	r24, 0x0088
 1f4:	80 32       	cpi	r24, 0x20	; 32
 1f6:	19 f1       	breq	.+70     	; 0x23e <__vector_7+0x98>
            buffer_in_use = 1;
            USART_Transmit('a');
            USART_Transmit('\n');
        }
    }
    buffer_index = ((buffer_index+1)%32);
 1f8:	80 91 88 00 	lds	r24, 0x0088
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	8f 71       	andi	r24, 0x1F	; 31
 202:	90 70       	andi	r25, 0x00	; 0
 204:	80 93 88 00 	sts	0x0088, r24
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti
        {
            instr = data;
        }
        else
        {
            buffer[buffer_index] = data;
 22a:	e0 91 88 00 	lds	r30, 0x0088
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ec 59       	subi	r30, 0x9C	; 156
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 83       	st	Z, r24
        }
    }

    if(buffer_index == 32){
 236:	80 91 88 00 	lds	r24, 0x0088
 23a:	80 32       	cpi	r24, 0x20	; 32
 23c:	e9 f6       	brne	.-70     	; 0x1f8 <__vector_7+0x52>
        if (1 == transmit_flag)
 23e:	80 91 89 00 	lds	r24, 0x0089
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	69 f0       	breq	.+26     	; 0x260 <__vector_7+0xba>
            USART_Transmit('b');
            USART_Transmit('\n');
        }
        else
        {
            transmit_flag = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 89 00 	sts	0x0089, r24
            buffer_in_use = 1;
 24c:	80 93 87 00 	sts	0x0087, r24
            USART_Transmit('a');
 250:	81 e6       	ldi	r24, 0x61	; 97
 252:	31 d2       	rcall	.+1122   	; 0x6b6 <USART_Transmit>
            USART_Transmit('\n');
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	2f d2       	rcall	.+1118   	; 0x6b6 <USART_Transmit>
 258:	cf cf       	rjmp	.-98     	; 0x1f8 <__vector_7+0x52>
ISR(USART_RX_vect){

    uint8_t data = USART_Receive();
    if ((0 == buffer_index) && (0 == buffer_in_use))
    {
        transmit_flag = 0;
 25a:	10 92 89 00 	sts	0x0089, r1
 25e:	be cf       	rjmp	.-132    	; 0x1dc <__vector_7+0x36>
    }

    if(buffer_index == 32){
        if (1 == transmit_flag)
        {
            USART_Transmit('b');
 260:	82 e6       	ldi	r24, 0x62	; 98
 262:	29 d2       	rcall	.+1106   	; 0x6b6 <USART_Transmit>
            USART_Transmit('\n');
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	27 d2       	rcall	.+1102   	; 0x6b6 <USART_Transmit>
 268:	c7 cf       	rjmp	.-114    	; 0x1f8 <__vector_7+0x52>

0000026a <main>:
    }
    buffer_index = ((buffer_index+1)%32);
}

int main (void)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	USART_Init(MY_UBBR);
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	1a d2       	rcall	.+1076   	; 0x6a8 <USART_Init>
//    }
	
	//uint8_t buffersize = BUFFER_SIZE;
	// Initialize AVR for use with mirf

	mirf_init();
 274:	d3 d0       	rcall	.+422    	; 0x41c <mirf_init>
 276:	8f e7       	ldi	r24, 0x7F	; 127
 278:	98 e3       	ldi	r25, 0x38	; 56
 27a:	a1 e0       	ldi	r26, 0x01	; 1
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	a0 40       	sbci	r26, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x12>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x1c>
 286:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    sei();
 288:	78 94       	sei
	mirf_read_register (STATUS, buffer, 1);
 28a:	87 e0       	ldi	r24, 0x07	; 7
 28c:	64 e6       	ldi	r22, 0x64	; 100
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	5f d1       	rcall	.+702    	; 0x552 <mirf_read_register>
	// Configure mirf
	mirf_config();
 294:	51 d1       	rcall	.+674    	; 0x538 <mirf_config>
	// Test transmitting
	buffer[0] = '7';
 296:	87 e3       	ldi	r24, 0x37	; 55
 298:	80 93 64 00 	sts	0x0064, r24
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	90 e7       	ldi	r25, 0x70	; 112
 2a0:	a2 e0       	ldi	r26, 0x02	; 2
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	a0 40       	sbci	r26, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x38>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x42>
 2ac:	00 00       	nop
    //rx_powerup();
    _delay_ms(100);
    mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	60 e3       	ldi	r22, 0x30	; 48
 2b2:	ce d0       	rcall	.+412    	; 0x450 <mirf_config_register>
 2b4:	8f e7       	ldi	r24, 0x7F	; 127
 2b6:	98 e3       	ldi	r25, 0x38	; 56
 2b8:	a1 e0       	ldi	r26, 0x01	; 1
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	a0 40       	sbci	r26, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x50>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x5a>
 2c4:	00 00       	nop
    _delay_ms(50);
    //uint64_t addr;
	
    transmit_string ("s\r\n");
 2c6:	80 e6       	ldi	r24, 0x60	; 96
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fd d1       	rcall	.+1018   	; 0x6c6 <transmit_string>
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <main+0x6c>
            {
                USART_Transmit(buffer[i]);
            }
            USART_Transmit('\n');
        }
        if(1 == buffer_in_use)
 2ce:	80 91 87 00 	lds	r24, 0x0087
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	d9 f0       	breq	.+54     	; 0x30c <main+0xa2>
	
    transmit_string ("s\r\n");
    while (1)
    {
        //test();
        if (1 == Receive(buffer, BUFFER_SIZE))
 2d6:	84 e6       	ldi	r24, 0x64	; 100
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	60 e2       	ldi	r22, 0x20	; 32
 2dc:	ce de       	rcall	.-612    	; 0x7a <Receive>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	b1 f7       	brne	.-20     	; 0x2ce <main+0x64>
        {
            USART_Transmit('c');
 2e2:	83 e6       	ldi	r24, 0x63	; 99
 2e4:	e8 d1       	rcall	.+976    	; 0x6b6 <USART_Transmit>
            USART_Transmit('\n');
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	e6 d1       	rcall	.+972    	; 0x6b6 <USART_Transmit>
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
            char i = 0;
            for(i = 0; i < BUFFER_SIZE; i++)
            {
                USART_Transmit(buffer[i]);
 2ee:	fe 01       	movw	r30, r28
 2f0:	ec 59       	subi	r30, 0x9C	; 156
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	80 81       	ld	r24, Z
 2f6:	df d1       	rcall	.+958    	; 0x6b6 <USART_Transmit>
 2f8:	21 96       	adiw	r28, 0x01	; 1
        if (1 == Receive(buffer, BUFFER_SIZE))
        {
            USART_Transmit('c');
            USART_Transmit('\n');
            char i = 0;
            for(i = 0; i < BUFFER_SIZE; i++)
 2fa:	c0 32       	cpi	r28, 0x20	; 32
 2fc:	d1 05       	cpc	r29, r1
 2fe:	b9 f7       	brne	.-18     	; 0x2ee <main+0x84>
            {
                USART_Transmit(buffer[i]);
            }
            USART_Transmit('\n');
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	d9 d1       	rcall	.+946    	; 0x6b6 <USART_Transmit>
        }
        if(1 == buffer_in_use)
 304:	80 91 87 00 	lds	r24, 0x0087
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	29 f7       	brne	.-54     	; 0x2d6 <main+0x6c>
        {
            // do something with the data in buffer...
            switch(instr){
 30c:	80 91 86 00 	lds	r24, 0x0086
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	e1 f1       	breq	.+120    	; 0x38c <main+0x122>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	38 f4       	brcc	.+14     	; 0x326 <main+0xbc>
                case 0:
                    Transmit(buffer, BUFFER_SIZE);
 318:	84 e6       	ldi	r24, 0x64	; 100
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	60 e2       	ldi	r22, 0x20	; 32
 31e:	9d de       	rcall	.-710    	; 0x5a <Transmit>
                        set_RX_addr(buffer[1],addr);
                    }
                    }
            }
            //Transmit(buffer, BUFFER_SIZE);
            buffer_in_use = 0;
 320:	10 92 87 00 	sts	0x0087, r1
 324:	d8 cf       	rjmp	.-80     	; 0x2d6 <main+0x6c>
            USART_Transmit('\n');
        }
        if(1 == buffer_in_use)
        {
            // do something with the data in buffer...
            switch(instr){
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	d9 f7       	brne	.-10     	; 0x320 <main+0xb6>
                    break;
                case 1:
                    set_channel(buffer[0]);
                case 2:
                    {
                    uint64_t addr = (buffer[2]<<0)|(buffer[3]<<8)|(buffer[4]<<24)|
 32a:	40 91 66 00 	lds	r20, 0x0066
 32e:	60 91 67 00 	lds	r22, 0x0067
 332:	e0 91 68 00 	lds	r30, 0x0068
                           (buffer[5]<<32)|(buffer[6]<<40);
 336:	20 91 69 00 	lds	r18, 0x0069
 33a:	80 91 6a 00 	lds	r24, 0x006A
                    break;
                case 1:
                    set_channel(buffer[0]);
                case 2:
                    {
                    uint64_t addr = (buffer[2]<<0)|(buffer[3]<<8)|(buffer[4]<<24)|
 33e:	77 27       	eor	r23, r23
 340:	67 fd       	sbrc	r22, 7
 342:	70 95       	com	r23
 344:	76 2f       	mov	r23, r22
 346:	66 27       	eor	r22, r22
 348:	ff 27       	eor	r31, r31
 34a:	e7 fd       	sbrc	r30, 7
 34c:	f0 95       	com	r31
 34e:	ff 27       	eor	r31, r31
 350:	ee 27       	eor	r30, r30
 352:	6e 2b       	or	r22, r30
 354:	7f 2b       	or	r23, r31
 356:	55 27       	eor	r21, r21
 358:	47 fd       	sbrc	r20, 7
 35a:	50 95       	com	r21
 35c:	64 2b       	or	r22, r20
 35e:	75 2b       	or	r23, r21
                           (buffer[5]<<32)|(buffer[6]<<40);
 360:	33 27       	eor	r19, r19
 362:	27 fd       	sbrc	r18, 7
 364:	30 95       	com	r19
 366:	33 27       	eor	r19, r19
 368:	22 27       	eor	r18, r18
                    break;
                case 1:
                    set_channel(buffer[0]);
                case 2:
                    {
                    uint64_t addr = (buffer[2]<<0)|(buffer[3]<<8)|(buffer[4]<<24)|
 36a:	62 2b       	or	r22, r18
 36c:	73 2b       	or	r23, r19
                           (buffer[5]<<32)|(buffer[6]<<40);
 36e:	99 27       	eor	r25, r25
 370:	87 fd       	sbrc	r24, 7
 372:	90 95       	com	r25
 374:	99 27       	eor	r25, r25
 376:	88 27       	eor	r24, r24
 378:	68 2b       	or	r22, r24
 37a:	79 2b       	or	r23, r25
                    if(1 == buffer[0]){
 37c:	80 91 64 00 	lds	r24, 0x0064
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	41 f0       	breq	.+16     	; 0x394 <main+0x12a>
                        set_TX_addr(addr);
                    }
                    else{
                        set_RX_addr(buffer[1],addr);
 384:	80 91 65 00 	lds	r24, 0x0065
 388:	ed de       	rcall	.-550    	; 0x164 <set_RX_addr>
 38a:	ca cf       	rjmp	.-108    	; 0x320 <main+0xb6>
            switch(instr){
                case 0:
                    Transmit(buffer, BUFFER_SIZE);
                    break;
                case 1:
                    set_channel(buffer[0]);
 38c:	80 91 64 00 	lds	r24, 0x0064
 390:	e3 de       	rcall	.-570    	; 0x158 <set_channel>
 392:	cb cf       	rjmp	.-106    	; 0x32a <main+0xc0>
{
    mirf_config_register(RF_CH,channel); // Set the channel
}

void set_TX_addr(uint8_t *addr){
    mirf_set_TADDR(addr);
 394:	cb 01       	movw	r24, r22
 396:	0c d1       	rcall	.+536    	; 0x5b0 <mirf_set_TADDR>
 398:	c3 cf       	rjmp	.-122    	; 0x320 <main+0xb6>

0000039a <spi_init>:
 39a:	bd 98       	cbi	0x17, 5	; 23
 39c:	c5 9a       	sbi	0x18, 5	; 24
 39e:	87 b3       	in	r24, 0x17	; 23
 3a0:	80 6c       	ori	r24, 0xC0	; 192
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	8a e1       	ldi	r24, 0x1A	; 26
 3a6:	8d b9       	out	0x0d, r24	; 13
 3a8:	08 95       	ret

000003aa <spi>:
 3aa:	8f b9       	out	0x0f, r24	; 15
 3ac:	80 e4       	ldi	r24, 0x40	; 64
 3ae:	8e b9       	out	0x0e, r24	; 14
 3b0:	8b e1       	ldi	r24, 0x1B	; 27
 3b2:	8d b9       	out	0x0d, r24	; 13
 3b4:	76 9b       	sbis	0x0e, 6	; 14
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <spi+0x8>
 3b8:	8f b1       	in	r24, 0x0f	; 15
 3ba:	08 95       	ret

000003bc <spi_transfer_sync>:
 3bc:	44 23       	and	r20, r20
 3be:	91 f0       	breq	.+36     	; 0x3e4 <spi_transfer_sync+0x28>
 3c0:	a8 2f       	mov	r26, r24
 3c2:	b9 2f       	mov	r27, r25
 3c4:	e6 2f       	mov	r30, r22
 3c6:	f7 2f       	mov	r31, r23
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	30 e4       	ldi	r19, 0x40	; 64
 3cc:	8b e1       	ldi	r24, 0x1B	; 27
 3ce:	2d 91       	ld	r18, X+
 3d0:	2f b9       	out	0x0f, r18	; 15
 3d2:	3e b9       	out	0x0e, r19	; 14
 3d4:	8d b9       	out	0x0d, r24	; 13
 3d6:	76 9b       	sbis	0x0e, 6	; 14
 3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <spi_transfer_sync+0x18>
 3da:	2f b1       	in	r18, 0x0f	; 15
 3dc:	21 93       	st	Z+, r18
 3de:	9f 5f       	subi	r25, 0xFF	; 255
 3e0:	94 17       	cp	r25, r20
 3e2:	a8 f3       	brcs	.-22     	; 0x3ce <spi_transfer_sync+0x12>
 3e4:	08 95       	ret

000003e6 <spi_transmit_sync>:
 3e6:	66 23       	and	r22, r22
 3e8:	79 f0       	breq	.+30     	; 0x408 <spi_transmit_sync+0x22>
 3ea:	e8 2f       	mov	r30, r24
 3ec:	f9 2f       	mov	r31, r25
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	30 e4       	ldi	r19, 0x40	; 64
 3f2:	8b e1       	ldi	r24, 0x1B	; 27
 3f4:	21 91       	ld	r18, Z+
 3f6:	2f b9       	out	0x0f, r18	; 15
 3f8:	3e b9       	out	0x0e, r19	; 14
 3fa:	8d b9       	out	0x0d, r24	; 13
 3fc:	76 9b       	sbis	0x0e, 6	; 14
 3fe:	fd cf       	rjmp	.-6      	; 0x3fa <spi_transmit_sync+0x14>
 400:	2f b1       	in	r18, 0x0f	; 15
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	96 17       	cp	r25, r22
 406:	b0 f3       	brcs	.-20     	; 0x3f4 <spi_transmit_sync+0xe>
 408:	08 95       	ret

0000040a <spi_fast_shift>:
 40a:	8f b9       	out	0x0f, r24	; 15
 40c:	80 e4       	ldi	r24, 0x40	; 64
 40e:	8e b9       	out	0x0e, r24	; 14
 410:	8b e1       	ldi	r24, 0x1B	; 27
 412:	8d b9       	out	0x0d, r24	; 13
 414:	76 9b       	sbis	0x0e, 6	; 14
 416:	fd cf       	rjmp	.-6      	; 0x412 <spi_fast_shift+0x8>
 418:	8f b1       	in	r24, 0x0f	; 15
 41a:	08 95       	ret

0000041c <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 41c:	87 b3       	in	r24, 0x17	; 23
 41e:	8c 60       	ori	r24, 0x0C	; 12
 420:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<PB4); //Enable the interrupt pin as an input set to high since the IRQ is active low
 422:	c4 9a       	sbi	0x18, 4	; 24
    mirf_CE_lo;
 424:	c3 98       	cbi	0x18, 3	; 24
    mirf_CSN_hi;
 426:	c2 9a       	sbi	0x18, 2	; 24
    PCMSK0 |= (1<<PCINT3);
#endif // __AVR_ATmega8__

#if defined(__AVR_ATtiny2313__)
    // Initialize PCINT4
    GIMSK |= (1<<PCIE);
 428:	8b b7       	in	r24, 0x3b	; 59
 42a:	80 62       	ori	r24, 0x20	; 32
 42c:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PCINT4);
 42e:	80 b5       	in	r24, 0x20	; 32
 430:	80 61       	ori	r24, 0x10	; 16
 432:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE);
	PCMSK |= (1<<PCINT4);
    */

    // Initialize spi module
    spi_init();
 434:	b2 df       	rcall	.-156    	; 0x39a <spi_init>
}
 436:	08 95       	ret

00000438 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 438:	80 91 8b 00 	lds	r24, 0x008B
 43c:	88 23       	and	r24, r24
 43e:	11 f0       	breq	.+4      	; 0x444 <mirf_data_ready+0xc>
 440:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = spi_fast_shift(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 442:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 444:	c2 98       	cbi	0x18, 2	; 24
    status = spi_fast_shift(NOP);               // Read status register
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	e0 df       	rcall	.-64     	; 0x40a <spi_fast_shift>
    mirf_CSN_hi;                                // Pull up chip select
 44a:	c2 9a       	sbi	0x18, 2	; 24
    return status & (1<<RX_DR);
 44c:	80 74       	andi	r24, 0x40	; 64
 44e:	08 95       	ret

00000450 <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	0f 92       	push	r0
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 45a:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 45c:	8f 71       	andi	r24, 0x1F	; 31
 45e:	80 62       	ori	r24, 0x20	; 32
 460:	69 83       	std	Y+1, r22	; 0x01
 462:	d3 df       	rcall	.-90     	; 0x40a <spi_fast_shift>
    spi_fast_shift(value);
 464:	69 81       	ldd	r22, Y+1	; 0x01
 466:	86 2f       	mov	r24, r22
 468:	d0 df       	rcall	.-96     	; 0x40a <spi_fast_shift>
    mirf_CSN_hi;
 46a:	c2 9a       	sbi	0x18, 2	; 24
}
 46c:	0f 90       	pop	r0
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 47a:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 47c:	81 e6       	ldi	r24, 0x61	; 97
 47e:	c5 df       	rcall	.-118    	; 0x40a <spi_fast_shift>
    spi_transfer_sync(data,data,mirf_PAYLOAD); // Read payload
 480:	ce 01       	movw	r24, r28
 482:	be 01       	movw	r22, r28
 484:	40 e2       	ldi	r20, 0x20	; 32
 486:	9a df       	rcall	.-204    	; 0x3bc <spi_transfer_sync>
    mirf_CSN_hi;                               // Pull up chip select
 488:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 48a:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_RX );     // Write cmd to flush tx fifo
 48c:	82 ee       	ldi	r24, 0xE2	; 226
 48e:	bd df       	rcall	.-134    	; 0x40a <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 490:	c2 9a       	sbi	0x18, 2	; 24
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 492:	87 e0       	ldi	r24, 0x07	; 7
 494:	60 e4       	ldi	r22, 0x40	; 64
 496:	dc df       	rcall	.-72     	; 0x450 <mirf_config_register>
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <tx_complete>:
//    EIFR |= (1<<PCIF);
}

void tx_complete(void){
    uint8_t status;
    if (PTX) {
 49e:	80 91 8b 00 	lds	r24, 0x008B
 4a2:	88 23       	and	r24, r24
 4a4:	71 f0       	breq	.+28     	; 0x4c2 <tx_complete+0x24>
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 4a6:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	af df       	rcall	.-162    	; 0x40a <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 4ac:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 4ae:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	6b e4       	ldi	r22, 0x4B	; 75
 4b4:	cd df       	rcall	.-102    	; 0x450 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 4b6:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 4b8:	10 92 8b 00 	sts	0x008B, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	60 e3       	ldi	r22, 0x30	; 48
 4c0:	c7 df       	rcall	.-114    	; 0x450 <mirf_config_register>
    }
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
 4c2:	8a b7       	in	r24, 0x3a	; 58
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	8a bf       	out	0x3a, r24	; 58
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
#endif // __AVR_ATmega168__  
}
 4c8:	08 95       	ret

000004ca <__vector_11>:
#if defined(__AVR_ATtiny167__)
    ISR(PCINT0_vect)
#endif // __AVR_ATmega168__  
// Interrupt handler 
//ISR(PCINT_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
    //DDRD |= (1<<6);
    //PORTD |= (1<<6);
    //transmit_string("interupted\n");
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 4ec:	80 91 8b 00 	lds	r24, 0x008B
 4f0:	88 23       	and	r24, r24
 4f2:	71 f0       	breq	.+28     	; 0x510 <__vector_11+0x46>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 4f4:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	88 df       	rcall	.-240    	; 0x40a <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 4fa:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 4fc:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	6b e4       	ldi	r22, 0x4B	; 75
 502:	a6 df       	rcall	.-180    	; 0x450 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 504:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 506:	10 92 8b 00 	sts	0x008B, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 50a:	87 e0       	ldi	r24, 0x07	; 7
 50c:	60 e3       	ldi	r22, 0x30	; 48
 50e:	a0 df       	rcall	.-192    	; 0x450 <mirf_config_register>
    }
//PORTD &= (~(1<<6));
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
 510:	8a b7       	in	r24, 0x3a	; 58
 512:	80 62       	ori	r24, 0x20	; 32
 514:	8a bf       	out	0x3a, r24	; 58
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
#endif // __AVR_ATmega168__  
//    EIFR |= (1<<PCIF);
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	89 df       	rcall	.-238    	; 0x450 <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 53e:	81 e1       	ldi	r24, 0x11	; 17
 540:	60 e2       	ldi	r22, 0x20	; 32
 542:	86 df       	rcall	.-244    	; 0x450 <mirf_config_register>
    //mirf_set_RADDR_P1(0xB3B4B5B6F1);
    //mirf_set_TADDR(0xB3B4B5B6F1);
    //mirf_set_TADDR(0x7878787878);

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 544:	10 92 8b 00 	sts	0x008B, r1
    RX_POWERUP;     // Power up in receiving mode
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	6b e4       	ldi	r22, 0x4B	; 75
 54c:	81 df       	rcall	.-254    	; 0x450 <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 54e:	c3 9a       	sbi	0x18, 3	; 24
}
 550:	08 95       	ret

00000552 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	0f 92       	push	r0
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 562:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 564:	8f 71       	andi	r24, 0x1F	; 31
 566:	49 83       	std	Y+1, r20	; 0x01
 568:	50 df       	rcall	.-352    	; 0x40a <spi_fast_shift>
    spi_transfer_sync(value,value,len);
 56a:	c8 01       	movw	r24, r16
 56c:	b8 01       	movw	r22, r16
 56e:	49 81       	ldd	r20, Y+1	; 0x01
 570:	25 df       	rcall	.-438    	; 0x3bc <spi_transfer_sync>
    mirf_CSN_hi;
 572:	c2 9a       	sbi	0x18, 2	; 24
}
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	df 93       	push	r29
 586:	cf 93       	push	r28
 588:	0f 92       	push	r0
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 590:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 592:	8f 71       	andi	r24, 0x1F	; 31
 594:	80 62       	ori	r24, 0x20	; 32
 596:	49 83       	std	Y+1, r20	; 0x01
 598:	38 df       	rcall	.-400    	; 0x40a <spi_fast_shift>
    spi_transmit_sync(value,len);
 59a:	c8 01       	movw	r24, r16
 59c:	49 81       	ldd	r20, Y+1	; 0x01
 59e:	64 2f       	mov	r22, r20
 5a0:	22 df       	rcall	.-444    	; 0x3e6 <spi_transmit_sync>
    mirf_CSN_hi;
 5a2:	c2 9a       	sbi	0x18, 2	; 24
}
 5a4:	0f 90       	pop	r0
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	08 95       	ret

000005b0 <mirf_set_TADDR>:
    mirf_write_register(RX_ADDR_P5,adr,5);
    mirf_CE_hi;
}
void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 5b0:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 5b2:	80 e1       	ldi	r24, 0x10	; 16
 5b4:	45 e0       	ldi	r20, 0x05	; 5
 5b6:	e4 df       	rcall	.-56     	; 0x580 <mirf_write_register>
}
 5b8:	08 95       	ret

000005ba <mirf_set_RADDR_P5>:
    mirf_write_register(RX_ADDR_P4,adr,5);
    mirf_CE_hi;
}
void mirf_set_RADDR_P5(uint8_t * adr) 
// Sets the receiving address
{
 5ba:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 5bc:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P5,adr,5);
 5be:	8f e0       	ldi	r24, 0x0F	; 15
 5c0:	45 e0       	ldi	r20, 0x05	; 5
 5c2:	de df       	rcall	.-68     	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 5c4:	c3 9a       	sbi	0x18, 3	; 24
}
 5c6:	08 95       	ret

000005c8 <mirf_set_RADDR_P4>:
    mirf_write_register(RX_ADDR_P3,adr,5);
    mirf_CE_hi;
}
void mirf_set_RADDR_P4(uint8_t * adr) 
// Sets the receiving address
{
 5c8:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 5ca:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P4,adr,5);
 5cc:	8e e0       	ldi	r24, 0x0E	; 14
 5ce:	45 e0       	ldi	r20, 0x05	; 5
 5d0:	d7 df       	rcall	.-82     	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 5d2:	c3 9a       	sbi	0x18, 3	; 24
}
 5d4:	08 95       	ret

000005d6 <mirf_set_RADDR_P3>:
    mirf_write_register(RX_ADDR_P2,adr,5);
    mirf_CE_hi;
}
void mirf_set_RADDR_P3(uint8_t * adr) 
// Sets the receiving address
{
 5d6:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 5d8:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P3,adr,5);
 5da:	8d e0       	ldi	r24, 0x0D	; 13
 5dc:	45 e0       	ldi	r20, 0x05	; 5
 5de:	d0 df       	rcall	.-96     	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 5e0:	c3 9a       	sbi	0x18, 3	; 24
}
 5e2:	08 95       	ret

000005e4 <mirf_set_RADDR_P2>:
    mirf_CE_hi;
}

void mirf_set_RADDR_P2(uint8_t * adr) 
// Sets the receiving address
{
 5e4:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 5e6:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P2,adr,5);
 5e8:	8c e0       	ldi	r24, 0x0C	; 12
 5ea:	45 e0       	ldi	r20, 0x05	; 5
 5ec:	c9 df       	rcall	.-110    	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 5ee:	c3 9a       	sbi	0x18, 3	; 24
}
 5f0:	08 95       	ret

000005f2 <mirf_set_RADDR_P1>:
    mirf_CE_hi;
}

void mirf_set_RADDR_P1(uint8_t * adr) 
// Sets the receiving address
{
 5f2:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 5f4:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P1,adr,5);
 5f6:	8b e0       	ldi	r24, 0x0B	; 11
 5f8:	45 e0       	ldi	r20, 0x05	; 5
 5fa:	c2 df       	rcall	.-124    	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 5fc:	c3 9a       	sbi	0x18, 3	; 24
}
 5fe:	08 95       	ret

00000600 <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 600:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 602:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P0,adr,5);
 604:	8a e0       	ldi	r24, 0x0A	; 10
 606:	45 e0       	ldi	r20, 0x05	; 5
 608:	bb df       	rcall	.-138    	; 0x580 <mirf_write_register>
    mirf_CE_hi;
 60a:	c3 9a       	sbi	0x18, 3	; 24
}
 60c:	08 95       	ret

0000060e <mirf_send>:


char mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	0f 92       	push	r0
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
 620:	8c 01       	movw	r16, r24
 622:	f6 2e       	mov	r15, r22

    // Save interrupt state and turn off interrupts
    uint8_t sreg_original = SREG;
 624:	ef b6       	in	r14, 0x3f	; 63
    cli ();
 626:	f8 94       	cli

    uint8_t status = 0;
 628:	19 82       	std	Y+1, r1	; 0x01
    mirf_read_register (STATUS, &status, 1);
 62a:	87 e0       	ldi	r24, 0x07	; 7
 62c:	be 01       	movw	r22, r28
 62e:	6f 5f       	subi	r22, 0xFF	; 255
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	41 e0       	ldi	r20, 0x01	; 1
 634:	8e df       	rcall	.-228    	; 0x552 <mirf_read_register>

    
    #if defined(__AVR_ATtiny2313__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PB4)) || ((status & (1<<MASK_TX_DS)) && PTX))
 636:	b4 99       	sbic	0x16, 4	; 22
 638:	15 c0       	rjmp	.+42     	; 0x664 <mirf_send+0x56>
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	85 fd       	sbrc	r24, 5
 63e:	0e c0       	rjmp	.+28     	; 0x65c <mirf_send+0x4e>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
 640:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
 642:	80 91 8b 00 	lds	r24, 0x008B
 646:	88 23       	and	r24, r24
 648:	99 f0       	breq	.+38     	; 0x670 <mirf_send+0x62>
    {
        return -1; 
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 //   USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
//    USART_Transmit('q');
    return 0;
}
 64c:	0f 90       	pop	r0
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	08 95       	ret

    
    #if defined(__AVR_ATtiny2313__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PB4)) || ((status & (1<<MASK_TX_DS)) && PTX))
 65c:	80 91 8b 00 	lds	r24, 0x008B
 660:	88 23       	and	r24, r24
 662:	71 f3       	breq	.-36     	; 0x640 <mirf_send+0x32>
    {
        tx_complete();
 664:	1c df       	rcall	.-456    	; 0x49e <tx_complete>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
 666:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
 668:	80 91 8b 00 	lds	r24, 0x008B
 66c:	88 23       	and	r24, r24
 66e:	69 f7       	brne	.-38     	; 0x64a <mirf_send+0x3c>
        return -1; 
    }
//    while (PTX) {}                  // Wait until last paket is send

//    USART_Transmit('h');
    mirf_CE_lo;
 670:	c3 98       	cbi	0x18, 3	; 24

    PTX = 1;                        // Set to transmitter mode
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	80 93 8b 00 	sts	0x008B, r24
    TX_POWERUP;                     // Power up
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	6a e4       	ldi	r22, 0x4A	; 74
 67c:	e9 de       	rcall	.-558    	; 0x450 <mirf_config_register>
    
    //USART_Transmit('h');
    mirf_CSN_lo;                    // Pull down chip select
 67e:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
 680:	81 ee       	ldi	r24, 0xE1	; 225
 682:	c3 de       	rcall	.-634    	; 0x40a <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 684:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 686:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 688:	80 ea       	ldi	r24, 0xA0	; 160
 68a:	bf de       	rcall	.-642    	; 0x40a <spi_fast_shift>
    //USART_Transmit('h');
    //spi_transmit_sync(testbuffer,16);
    spi_transmit_sync(value,len);   // Write payload
 68c:	c8 01       	movw	r24, r16
 68e:	6f 2d       	mov	r22, r15
 690:	aa de       	rcall	.-684    	; 0x3e6 <spi_transmit_sync>
    mirf_CSN_hi;                    // Pull up chip select
 692:	c2 9a       	sbi	0x18, 2	; 24
 //   USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
 694:	c3 9a       	sbi	0x18, 3	; 24
//    USART_Transmit('q');
    return 0;
 696:	80 e0       	ldi	r24, 0x00	; 0
}
 698:	0f 90       	pop	r0
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	ff 90       	pop	r15
 6a4:	ef 90       	pop	r14
 6a6:	08 95       	ret

000006a8 <USART_Init>:
 6a8:	92 b9       	out	0x02, r25	; 2
 6aa:	89 b9       	out	0x09, r24	; 9
 6ac:	88 e9       	ldi	r24, 0x98	; 152
 6ae:	8a b9       	out	0x0a, r24	; 10
 6b0:	8e e0       	ldi	r24, 0x0E	; 14
 6b2:	83 b9       	out	0x03, r24	; 3
 6b4:	08 95       	ret

000006b6 <USART_Transmit>:
 6b6:	5d 9b       	sbis	0x0b, 5	; 11
 6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <USART_Transmit>
 6ba:	8c b9       	out	0x0c, r24	; 12
 6bc:	08 95       	ret

000006be <USART_Receive>:
 6be:	5f 9b       	sbis	0x0b, 7	; 11
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <USART_Receive>
 6c2:	8c b1       	in	r24, 0x0c	; 12
 6c4:	08 95       	ret

000006c6 <transmit_string>:
 6c6:	fc 01       	movw	r30, r24
 6c8:	80 81       	ld	r24, Z
 6ca:	88 23       	and	r24, r24
 6cc:	39 f0       	breq	.+14     	; 0x6dc <transmit_string+0x16>
 6ce:	31 96       	adiw	r30, 0x01	; 1
 6d0:	5d 9b       	sbis	0x0b, 5	; 11
 6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <transmit_string+0xa>
 6d4:	8c b9       	out	0x0c, r24	; 12
 6d6:	81 91       	ld	r24, Z+
 6d8:	88 23       	and	r24, r24
 6da:	d1 f7       	brne	.-12     	; 0x6d0 <transmit_string+0xa>
 6dc:	08 95       	ret

000006de <_exit>:
 6de:	f8 94       	cli

000006e0 <__stop_program>:
 6e0:	ff cf       	rjmp	.-2      	; 0x6e0 <__stop_program>
