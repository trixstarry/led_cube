Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_mulhi3.o)
                              ledcube.o (__mulhi3)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o (exit)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                              ledcube.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                              ledcube.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

PTX                 0x1               mirf.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00010000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
LOAD ledcube.o
LOAD spi.o
LOAD mirf.o
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x1d8a
 *(.vectors)
 .vectors       0x00000000       0x50 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000050      0x6f6 ledcube.o
                0x00000050                R
                0x0000014a                G
                0x00000244                B
                0x0000033e                power_duration
                0x0000034a                off
                0x00000386                on
                0x000003c2                pattern1
                0x000004ee                pattern2
                0x0000061a                pattern3
                0x00000746                . = ALIGN (0x2)
                0x00000746                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000746        0x0 linker stubs
 *(.trampolines*)
                0x00000746                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000746                __ctors_start = .
 *(.ctors)
                0x00000746                __ctors_end = .
                0x00000746                __dtors_start = .
 *(.dtors)
                0x00000746                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000746        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000746                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000746        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000752       0x16 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                0x00000752                __do_copy_data
 .init4         0x00000768       0x10 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00000768                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000778        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init9)
 *(.text)
 .text          0x00000780        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000780                __vector_1
                0x00000780                __vector_12
                0x00000780                __bad_interrupt
                0x00000780                __vector_6
                0x00000780                __vector_11
                0x00000780                __vector_13
                0x00000780                __vector_17
                0x00000780                __vector_19
                0x00000780                __vector_7
                0x00000780                __vector_5
                0x00000780                __vector_4
                0x00000780                __vector_9
                0x00000780                __vector_2
                0x00000780                __vector_15
                0x00000780                __vector_8
                0x00000780                __vector_14
                0x00000780                __vector_10
                0x00000780                __vector_16
                0x00000780                __vector_18
 .text          0x00000784     0x12d8 ledcube.o
                0x00000784                level
                0x000007dc                transmit2
                0x00000862                red_led
                0x000008ee                blue_led
                0x0000097a                green_led
                0x00000a06                leds
                0x00000a52                test_frame
                0x00000a5e                pattern
                0x00001192                translate
                0x000014a4                test_cube
                0x00001842                Transmit
                0x00001864                Receive
                0x0000188e                test_Transmit
                0x000018b0                init
                0x000018c8                init2
                0x000018ce                sensors
                0x000018d6                main
 .text          0x00001a5c       0x88 spi.o
                0x00001a5c                spi_init
                0x00001a70                SPI_Transmit
                0x00001a7c                SPI_Transmit_All
                0x00001a9a                SPI_Receive
                0x00001aa8                SPI_Receive_All
                0x00001ac0                SPI_Transceive
 .text          0x00001ae4      0x27e mirf.o
                0x00001ae4                mirf_init
                0x00001b08                mirf_data_ready
                0x00001b20                mirf_config_register
                0x00001b48                mirf_get_data
                0x00001b70                tx_complete
                0x00001b9e                __vector_3
                0x00001c0a                mirf_read_register
                0x00001c3c                mirf_write_register
                0x00001c70                mirf_set_TADDR
                0x00001c7c                mirf_set_RADDR
                0x00001c8c                mirf_config
                0x00001cbc                mirf_send
 .text          0x00001d62        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_mulhi3.o)
 .text          0x00001d62        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text          0x00001d62        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text          0x00001d62        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00001d62                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00001d62       0x24 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_mulhi3.o)
                0x00001d62                __mulhi3
 .text.libgcc   0x00001d86        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text.libgcc   0x00001d86        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text.libgcc   0x00001d86        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00001d86                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00001d86        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                0x00001d86                exit
                0x00001d86                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00001d86        0x4 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 *(.fini0)
                0x00001d8a                _etext = .

.data           0x00800100       0x60 load address 0x00001d8a
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .data          0x00800100       0x60 ledcube.o
 .data          0x00800160        0x0 spi.o
 .data          0x00800160        0x0 mirf.o
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_mulhi3.o)
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800160                . = ALIGN (0x2)
                0x00800160                _edata = .
                0x00800160                PROVIDE (__data_end, .)

.bss            0x00800160       0x35
                0x00800160                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .bss           0x00800160       0x34 ledcube.o
                0x00800160                frame
                0x00800192                item
                0x00800193                frame_num
 .bss           0x00800194        0x0 spi.o
 .bss           0x00800194        0x0 mirf.o
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_mulhi3.o)
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800194        0x1 mirf.o
                0x00800194                PTX
                0x00800195                PROVIDE (__bss_end, .)
                0x00001d8a                __data_load_start = LOADADDR (.data)
                0x00001dea                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800195        0x0
                0x00800195                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800195                PROVIDE (__noinit_end, .)
                0x00800195                _end = .
                0x00800195                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x3360
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .stab          0x000006cc     0x1ea8 ledcube.o
                               0x1eb4 (size before relaxing)
 .stab          0x00002574      0x498 spi.o
                                0x660 (size before relaxing)
 .stab          0x00002a0c      0x954 mirf.o
                                0xb1c (size before relaxing)

.stabstr        0x00000000      0xf4f
 *(.stabstr)
 .stabstr       0x00000000      0xf4f /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ledcube.elf elf32-avr)
LOAD linker stubs
