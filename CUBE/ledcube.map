Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o (exit)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                              ledcube.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                              ledcube.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

PTX                 0x1               mirf.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00010000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
LOAD ledcube.o
LOAD spi.o
LOAD mirf.o
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x2092
 *(.vectors)
 .vectors       0x00000000       0x50 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000050      0xee2 ledcube.o
                0x00000050                R
                0x0000014a                G
                0x00000244                B
                0x0000033e                off
                0x0000037a                patterns
                0x00000f32                . = ALIGN (0x2)
                0x00000f32                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000f32        0x0 linker stubs
 *(.trampolines*)
                0x00000f32                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000f32                __ctors_start = .
 *(.ctors)
                0x00000f32                __ctors_end = .
                0x00000f32                __dtors_start = .
 *(.dtors)
                0x00000f32                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000f32        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000f32                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000f32        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000f3e       0x16 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                0x00000f3e                __do_copy_data
 .init4         0x00000f54       0x10 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00000f54                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000f64        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init9)
 *(.text)
 .text          0x00000f6c        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000f6c                __vector_1
                0x00000f6c                __vector_12
                0x00000f6c                __bad_interrupt
                0x00000f6c                __vector_6
                0x00000f6c                __vector_11
                0x00000f6c                __vector_13
                0x00000f6c                __vector_17
                0x00000f6c                __vector_19
                0x00000f6c                __vector_7
                0x00000f6c                __vector_5
                0x00000f6c                __vector_4
                0x00000f6c                __vector_9
                0x00000f6c                __vector_2
                0x00000f6c                __vector_15
                0x00000f6c                __vector_8
                0x00000f6c                __vector_14
                0x00000f6c                __vector_10
                0x00000f6c                __vector_16
                0x00000f6c                __vector_18
 .text          0x00000f70      0xe28 ledcube.o
                0x00000f70                level
                0x00000fc8                transmit2
                0x0000104e                red_led
                0x000010da                blue_led
                0x00001166                green_led
                0x000011f2                leds
                0x0000123e                test_frame
                0x0000124a                pattern
                0x000014c2                translate
                0x000017d4                test_cube
                0x00001b72                Transmit
                0x00001c10                Receive
                0x00001c3a                test_Transmit
                0x00001c5c                init
                0x00001c74                init2
                0x00001c7a                sensors
                0x00001c82                main
 .text          0x00001d98       0x88 spi.o
                0x00001d98                spi_init
                0x00001dac                SPI_Transmit
                0x00001db8                SPI_Transmit_All
                0x00001dd6                SPI_Receive
                0x00001de4                SPI_Receive_All
                0x00001dfc                SPI_Transceive
 .text          0x00001e20      0x26e mirf.o
                0x00001e20                mirf_init
                0x00001e44                mirf_data_ready
                0x00001e5c                mirf_config_register
                0x00001e84                mirf_get_data
                0x00001eac                tx_complete
                0x00001eda                __vector_3
                0x00001f46                mirf_config
                0x00001f66                mirf_read_register
                0x00001f98                mirf_write_register
                0x00001fcc                mirf_set_TADDR
                0x00001fd8                mirf_set_RADDR
                0x00001fe8                mirf_send
 .text          0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text          0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text          0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x0000208e                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text.libgcc   0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x0000208e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000208e        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                0x0000208e                exit
                0x0000208e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000208e        0x4 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 *(.fini0)
                0x00002092                _etext = .

.data           0x00800100       0x60 load address 0x00002092
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .data          0x00800100       0x60 ledcube.o
 .data          0x00800160        0x0 spi.o
 .data          0x00800160        0x0 mirf.o
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .data          0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800160                . = ALIGN (0x2)
                0x00800160                _edata = .
                0x00800160                PROVIDE (__data_end, .)

.bss            0x00800160       0x35
                0x00800160                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800160        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .bss           0x00800160       0x34 ledcube.o
                0x00800160                frame
                0x00800192                item
                0x00800193                frame_num
 .bss           0x00800194        0x0 spi.o
 .bss           0x00800194        0x0 mirf.o
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .bss           0x00800194        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800194        0x1 mirf.o
                0x00800194                PTX
                0x00800195                PROVIDE (__bss_end, .)
                0x00002092                __data_load_start = LOADADDR (.data)
                0x000020f2                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800195        0x0
                0x00800195                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800195                PROVIDE (__noinit_end, .)
                0x00800195                _end = .
                0x00800195                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x2a84
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .stab          0x000006cc     0x15e4 ledcube.o
                               0x15f0 (size before relaxing)
 .stab          0x00001cb0      0x498 spi.o
                                0x660 (size before relaxing)
 .stab          0x00002148      0x93c mirf.o
                                0xb04 (size before relaxing)

.stabstr        0x00000000      0xf2d
 *(.stabstr)
 .stabstr       0x00000000      0xf2d /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ledcube.elf elf32-avr)
LOAD linker stubs
