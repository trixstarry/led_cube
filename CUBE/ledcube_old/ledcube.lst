
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002318  000023ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800128  00800128  000023d4  2**0
                  ALLOC
  3 .stab         00004494  00000000  00000000  000023d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001001  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__ctors_end>
       4:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       c:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_3>
      10:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      14:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      18:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      1c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      20:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      24:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_9>
      28:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      2c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      30:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      34:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      38:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      3c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      40:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      44:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      4c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      50:	39 06       	cpc	r3, r25
      52:	22 06       	cpc	r2, r18
      54:	0b 06       	cpc	r0, r27
      56:	f4 05       	cpc	r31, r4
      58:	dd 05       	cpc	r29, r13
      5a:	c6 05       	cpc	r28, r6
      5c:	af 05       	cpc	r26, r15
      5e:	98 05       	cpc	r25, r8
      60:	81 05       	cpc	r24, r1
      62:	6a 05       	cpc	r22, r10
      64:	53 05       	cpc	r21, r3
      66:	50 05       	cpc	r21, r0
      68:	39 05       	cpc	r19, r9
      6a:	22 05       	cpc	r18, r2
      6c:	0b 05       	cpc	r16, r11
      6e:	08 05       	cpc	r16, r8
      70:	05 05       	cpc	r16, r5
      72:	ee 04       	cpc	r14, r14
      74:	d7 04       	cpc	r13, r7
      76:	c0 04       	cpc	r12, r0
      78:	bd 04       	cpc	r11, r13
      7a:	a6 04       	cpc	r10, r6
      7c:	8f 04       	cpc	r8, r15
      7e:	78 04       	cpc	r7, r8
      80:	50 06       	cpc	r5, r16
      82:	4b 08       	sbc	r4, r11
      84:	34 08       	sbc	r3, r4
      86:	1d 08       	sbc	r1, r13
      88:	06 08       	sbc	r0, r6
      8a:	ef 07       	cpc	r30, r31
      8c:	d8 07       	cpc	r29, r24
      8e:	c1 07       	cpc	r28, r17
      90:	aa 07       	cpc	r26, r26
      92:	93 07       	cpc	r25, r19
      94:	7c 07       	cpc	r23, r28
      96:	65 07       	cpc	r22, r21
      98:	62 07       	cpc	r22, r18
      9a:	4b 07       	cpc	r20, r27
      9c:	34 07       	cpc	r19, r20
      9e:	1d 07       	cpc	r17, r29
      a0:	1a 07       	cpc	r17, r26
      a2:	17 07       	cpc	r17, r23
      a4:	00 07       	cpc	r16, r16
      a6:	e9 06       	cpc	r14, r25
      a8:	d2 06       	cpc	r13, r18
      aa:	cf 06       	cpc	r12, r31
      ac:	b8 06       	cpc	r11, r24
      ae:	a1 06       	cpc	r10, r17
      b0:	8a 06       	cpc	r8, r26
      b2:	62 08       	sbc	r6, r2
      b4:	5d 0a       	sbc	r5, r29
      b6:	46 0a       	sbc	r4, r22
      b8:	2f 0a       	sbc	r2, r31
      ba:	18 0a       	sbc	r1, r24
      bc:	01 0a       	sbc	r0, r17
      be:	ea 09       	sbc	r30, r10
      c0:	d3 09       	sbc	r29, r3
      c2:	bc 09       	sbc	r27, r12
      c4:	a5 09       	sbc	r26, r5
      c6:	8e 09       	sbc	r24, r14
      c8:	77 09       	sbc	r23, r7
      ca:	74 09       	sbc	r23, r4
      cc:	5d 09       	sbc	r21, r13
      ce:	46 09       	sbc	r20, r6
      d0:	2f 09       	sbc	r18, r15
      d2:	2c 09       	sbc	r18, r12
      d4:	29 09       	sbc	r18, r9
      d6:	12 09       	sbc	r17, r2
      d8:	fb 08       	sbc	r15, r11
      da:	e4 08       	sbc	r14, r4
      dc:	e1 08       	sbc	r14, r1
      de:	ca 08       	sbc	r12, r10
      e0:	b3 08       	sbc	r11, r3
      e2:	9c 08       	sbc	r9, r12
      e4:	74 0a       	sbc	r7, r20

000000e6 <R>:
      e6:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      fe:	00 01 00 00 00 00 00 00 00 00 08 00 00 00 00 00     ................
     10e:	00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00     ................
     11e:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     12e:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     146:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
     162:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
     172:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
     182:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     1a2:	40 00 00 00 00 00 00 00 00 00 02 00 08 00 00 00     @...............
     1b2:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     1ca:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     1da:	00 00 00 00 00 40                                   .....@

000001e0 <G>:
     1e0:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     1f8:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     208:	00 00 00 00 02 00 00 00 00 00 00 00 08 00 00 00     ................
     218:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     228:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     240:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     25c:	00 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     26c:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     27c:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     29c:	20 00 00 00 00 00 00 00 00 00 04 00 04 00 00 00      ...............
     2ac:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     2c4:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     2d4:	00 00 00 00 00 80                                   ......

000002da <B>:
     2da:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     2f2:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     302:	00 00 00 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
     312:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     322:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     33a:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     356:	00 00 04 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     366:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     376:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     386:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     396:	10 00 00 00 00 00 00 00 00 00 08 00 02 00 00 00     ................
     3a6:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     3be:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     3ce:	00 00 00 00 01 00                                   ......

000003d4 <__ctors_end>:
     3d4:	11 24       	eor	r1, r1
     3d6:	1f be       	out	0x3f, r1	; 63
     3d8:	ce ef       	ldi	r28, 0xFE	; 254
     3da:	d2 e0       	ldi	r29, 0x02	; 2
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	cd bf       	out	0x3d, r28	; 61

000003e0 <__do_copy_data>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	e8 e1       	ldi	r30, 0x18	; 24
     3e8:	f3 e2       	ldi	r31, 0x23	; 35
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__do_copy_data+0x10>
     3ec:	05 90       	lpm	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	a8 32       	cpi	r26, 0x28	; 40
     3f2:	b1 07       	cpc	r27, r17
     3f4:	d9 f7       	brne	.-10     	; 0x3ec <__do_copy_data+0xc>

000003f6 <__do_clear_bss>:
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	a8 e2       	ldi	r26, 0x28	; 40
     3fa:	b1 e0       	ldi	r27, 0x01	; 1
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <.do_clear_bss_start>

000003fe <.do_clear_bss_loop>:
     3fe:	1d 92       	st	X+, r1

00000400 <.do_clear_bss_start>:
     400:	aa 36       	cpi	r26, 0x6A	; 106
     402:	b1 07       	cpc	r27, r17
     404:	e1 f7       	brne	.-8      	; 0x3fe <.do_clear_bss_loop>
     406:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <main>
     40a:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <_exit>

0000040e <__bad_interrupt>:
     40e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000412 <initialize_interrupts>:
uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers
uint8_t buffer[32] = {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',};
uint8_t next = 0;

void initialize_interrupts(void){
    TIMSK1 = (1<<TOIE1);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 6f 00 	sts	0x006F, r24
    }
     418:	08 95       	ret

0000041a <init>:

void init(){
    //DDRA |= (1<<PB0)|(1<<PB1);
    //PORTB |= (1<<PB0)|(1<<PB1);
	// Initialize AVR for use with mirf
	mirf_init();
     41a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41e:	8f e7       	ldi	r24, 0x7F	; 127
     420:	98 e3       	ldi	r25, 0x38	; 56
     422:	a1 e0       	ldi	r26, 0x01	; 1
     424:	81 50       	subi	r24, 0x01	; 1
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	a0 40       	sbci	r26, 0x00	; 0
     42a:	e1 f7       	brne	.-8      	; 0x424 <init+0xa>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <init+0x14>
     42e:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    //PORTB |= (1<<PB0)|(1<<PB1);
}
     430:	08 95       	ret

00000432 <init2>:
void init2(){
	mirf_read_register (STATUS, buffer, 1);
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	0e 94 9f 10 	call	0x213e	; 0x213e <mirf_read_register>
	
	// Configure mirf
	mirf_config();
     43e:	0e 94 8f 10 	call	0x211e	; 0x211e <mirf_config>
	// Test transmitting
    //PORTA |= (0<<PA0)|(1<<PA1);
}
     442:	08 95       	ret

00000444 <Transmit>:


void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     444:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <mirf_send>
		//_delay_ms(10);
}
     448:	08 95       	ret

0000044a <Receive>:


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	ec 01       	movw	r28, r24
        //uint64_t i = 0;
		while (!mirf_data_ready()){
     450:	0e 94 09 10 	call	0x2012	; 0x2012 <mirf_data_ready>
     454:	88 23       	and	r24, r24
     456:	e1 f3       	breq	.-8      	; 0x450 <Receive+0x6>
            //    return -1;
           // }
            //led1_on();
            //i++;
        }
		mirf_get_data(buffer);
     458:	ce 01       	movw	r24, r28
     45a:	0e 94 29 10 	call	0x2052	; 0x2052 <mirf_get_data>
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <level>:

void level(uint8_t layer){
    switch(layer){
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	f1 f0       	breq	.+60     	; 0x4a6 <level+0x40>
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	40 f0       	brcs	.+16     	; 0x47e <level+0x18>
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	f9 f0       	breq	.+62     	; 0x4b0 <level+0x4a>
     472:	84 30       	cpi	r24, 0x04	; 4
     474:	99 f0       	breq	.+38     	; 0x49c <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     476:	85 b1       	in	r24, 0x05	; 5
     478:	80 67       	ori	r24, 0x70	; 112
     47a:	85 b9       	out	0x05, r24	; 5
     47c:	08 95       	ret
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}

void level(uint8_t layer){
    switch(layer){
     47e:	88 23       	and	r24, r24
     480:	39 f0       	breq	.+14     	; 0x490 <level+0x2a>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	c1 f7       	brne	.-16     	; 0x476 <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     486:	85 b1       	in	r24, 0x05	; 5
     488:	8f 78       	andi	r24, 0x8F	; 143
     48a:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     48c:	2c 9a       	sbi	0x05, 4	; 5
            return;
     48e:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     490:	85 b1       	in	r24, 0x05	; 5
     492:	8f 78       	andi	r24, 0x8F	; 143
     494:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     496:	85 b1       	in	r24, 0x05	; 5
     498:	85 b9       	out	0x05, r24	; 5
            return;
     49a:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     49c:	85 b1       	in	r24, 0x05	; 5
     49e:	8f 78       	andi	r24, 0x8F	; 143
     4a0:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     4a2:	2e 9a       	sbi	0x05, 6	; 5
            return;
     4a4:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     4a6:	85 b1       	in	r24, 0x05	; 5
     4a8:	8f 78       	andi	r24, 0x8F	; 143
     4aa:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     4ac:	2d 9a       	sbi	0x05, 5	; 5
            return;
     4ae:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     4b0:	85 b1       	in	r24, 0x05	; 5
     4b2:	8f 78       	andi	r24, 0x8F	; 143
     4b4:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     4b6:	85 b1       	in	r24, 0x05	; 5
     4b8:	80 63       	ori	r24, 0x30	; 48
     4ba:	85 b9       	out	0x05, r24	; 5
            return;
     4bc:	08 95       	ret

000004be <transmit1>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
     4c2:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4c4:	0d b4       	in	r0, 0x2d	; 45
     4c6:	07 fe       	sbrs	r0, 7
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
     4ca:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4cc:	0d b4       	in	r0, 0x2d	; 45
     4ce:	07 fe       	sbrs	r0, 7
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
     4d2:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4d4:	0d b4       	in	r0, 0x2d	; 45
     4d6:	07 fe       	sbrs	r0, 7
     4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
     4da:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
     4e2:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4e4:	0d b4       	in	r0, 0x2d	; 45
     4e6:	07 fe       	sbrs	r0, 7
     4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
     4ea:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
     4f2:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4f4:	0d b4       	in	r0, 0x2d	; 45
     4f6:	07 fe       	sbrs	r0, 7
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
     4fa:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4fc:	0d b4       	in	r0, 0x2d	; 45
     4fe:	07 fe       	sbrs	r0, 7
     500:	fd cf       	rjmp	.-6      	; 0x4fc <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
     502:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     504:	0d b4       	in	r0, 0x2d	; 45
     506:	07 fe       	sbrs	r0, 7
     508:	fd cf       	rjmp	.-6      	; 0x504 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
     50a:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     50c:	0d b4       	in	r0, 0x2d	; 45
     50e:	07 fe       	sbrs	r0, 7
     510:	fd cf       	rjmp	.-6      	; 0x50c <transmit1+0x4e>

	//Toggle latch
	TOGGLE_LATCH
     512:	16 9a       	sbi	0x02, 6	; 2
     514:	16 98       	cbi	0x02, 6	; 2
}
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <transmit2>:

void transmit2(uint8_t layer){
     51c:	1f 93       	push	r17
     51e:	18 2f       	mov	r17, r24
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
     520:	0e 94 33 02 	call	0x466	; 0x466 <level>
     524:	81 2f       	mov	r24, r17
     526:	90 e0       	ldi	r25, 0x00	; 0
    for(i=5;i-- > 0; ){
     528:	44 e0       	ldi	r20, 0x04	; 4
     52a:	9c 01       	movw	r18, r24
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
        temp = (frame[layer][i]);
     534:	28 0f       	add	r18, r24
     536:	39 1f       	adc	r19, r25
     538:	e4 2f       	mov	r30, r20
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	d9 01       	movw	r26, r18
     53e:	ae 0f       	add	r26, r30
     540:	bf 1f       	adc	r27, r31
     542:	aa 0f       	add	r26, r26
     544:	bb 1f       	adc	r27, r27
     546:	a8 5d       	subi	r26, 0xD8	; 216
     548:	be 4f       	sbci	r27, 0xFE	; 254
     54a:	8c 91       	ld	r24, X
        //load first byte
        SPDR = temp;
     54c:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     54e:	0d b4       	in	r0, 0x2d	; 45
     550:	07 fe       	sbrs	r0, 7
     552:	fd cf       	rjmp	.-6      	; 0x54e <transmit2+0x32>

        temp = (frame[layer][i]>>8);
     554:	d9 01       	movw	r26, r18
     556:	ae 0f       	add	r26, r30
     558:	bf 1f       	adc	r27, r31
     55a:	aa 0f       	add	r26, r26
     55c:	bb 1f       	adc	r27, r27
     55e:	a8 5d       	subi	r26, 0xD8	; 216
     560:	be 4f       	sbci	r27, 0xFE	; 254
     562:	11 96       	adiw	r26, 0x01	; 1
     564:	8c 91       	ld	r24, X
     566:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
     568:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <transmit2+0x4e>
        frame[layer][i] = 0;
     570:	e2 0f       	add	r30, r18
     572:	f3 1f       	adc	r31, r19
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	e8 5d       	subi	r30, 0xD8	; 216
     57a:	fe 4f       	sbci	r31, 0xFE	; 254
     57c:	11 82       	std	Z+1, r1	; 0x01
     57e:	10 82       	st	Z, r1

void transmit2(uint8_t layer){
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
    for(i=5;i-- > 0; ){
     580:	44 23       	and	r20, r20
     582:	11 f0       	breq	.+4      	; 0x588 <transmit2+0x6c>
     584:	41 50       	subi	r20, 0x01	; 1
     586:	d8 cf       	rjmp	.-80     	; 0x538 <transmit2+0x1c>
        while(bit_is_clear(SPSR,SPIF)){};
        frame[layer][i] = 0;
    }

	//Toggle latch
	TOGGLE_LATCH
     588:	16 9a       	sbi	0x02, 6	; 2
     58a:	16 98       	cbi	0x02, 6	; 2
     58c:	8f ec       	ldi	r24, 0xCF	; 207
     58e:	97 e0       	ldi	r25, 0x07	; 7
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <transmit2+0x74>
     594:	00 c0       	rjmp	.+0      	; 0x596 <transmit2+0x7a>
     596:	00 00       	nop
    _delay_ms(1);
    //_delay_us(300);
}
     598:	1f 91       	pop	r17
     59a:	08 95       	ret

0000059c <level_test>:


void level_test(void){
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	ff 24       	eor	r15, r15
     5a4:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     5a6:	8f 2d       	mov	r24, r15
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	e1 f0       	breq	.+56     	; 0x5e6 <level_test+0x4a>
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	e0 f4       	brcc	.+56     	; 0x5ea <level_test+0x4e>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <level_test+0x1c>
     5b6:	41 c0       	rjmp	.+130    	; 0x63a <level_test+0x9e>
            case 0:
                level(i);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 33 02 	call	0x466	; 0x466 <level>
                transmit1(on,on,on,on,on);
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	9f ef       	ldi	r25, 0xFF	; 255
     5c2:	6f ef       	ldi	r22, 0xFF	; 255
     5c4:	7f ef       	ldi	r23, 0xFF	; 255
     5c6:	4f ef       	ldi	r20, 0xFF	; 255
     5c8:	5f ef       	ldi	r21, 0xFF	; 255
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	3f ef       	ldi	r19, 0xFF	; 255
     5ce:	0f ef       	ldi	r16, 0xFF	; 255
     5d0:	1f ef       	ldi	r17, 0xFF	; 255
     5d2:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>

void level_test(void){
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
     5d6:	8f 2d       	mov	r24, r15
     5d8:	85 30       	cpi	r24, 0x05	; 5
     5da:	d0 f4       	brcc	.+52     	; 0x610 <level_test+0x74>
    _delay_ms(1);
    //_delay_us(300);
}


void level_test(void){
     5dc:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     5de:	8f 2d       	mov	r24, r15
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	21 f7       	brne	.-56     	; 0x5ae <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	18 c0       	rjmp	.+48     	; 0x61a <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     5ea:	83 30       	cpi	r24, 0x03	; 3
     5ec:	a9 f0       	breq	.+42     	; 0x618 <level_test+0x7c>
     5ee:	84 30       	cpi	r24, 0x04	; 4
     5f0:	19 f7       	brne	.-58     	; 0x5b8 <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	0e 94 33 02 	call	0x466	; 0x466 <level>
                transmit1(on,on,on,on,on);
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	6f ef       	ldi	r22, 0xFF	; 255
     5fe:	7f ef       	ldi	r23, 0xFF	; 255
     600:	4f ef       	ldi	r20, 0xFF	; 255
     602:	5f ef       	ldi	r21, 0xFF	; 255
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	3f ef       	ldi	r19, 0xFF	; 255
     608:	0f ef       	ldi	r16, 0xFF	; 255
     60a:	1f ef       	ldi	r17, 0xFF	; 255
     60c:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>
                break;
        }
    }
}
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	0e 94 33 02 	call	0x466	; 0x466 <level>
                transmit1(on,on,on,on,on);
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	6f ef       	ldi	r22, 0xFF	; 255
     624:	7f ef       	ldi	r23, 0xFF	; 255
     626:	4f ef       	ldi	r20, 0xFF	; 255
     628:	5f ef       	ldi	r21, 0xFF	; 255
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	3f ef       	ldi	r19, 0xFF	; 255
     62e:	0f ef       	ldi	r16, 0xFF	; 255
     630:	1f ef       	ldi	r17, 0xFF	; 255
     632:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>
    _delay_ms(1);
    //_delay_us(300);
}


void level_test(void){
     636:	f3 94       	inc	r15
     638:	d2 cf       	rjmp	.-92     	; 0x5de <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	ee cf       	rjmp	.-36     	; 0x61a <level_test+0x7e>

0000063e <shift_LED>:
        }
    }
}


void shift_LED(void){
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
     644:	f0 90 60 01 	lds	r15, 0x0160
     648:	8f 2d       	mov	r24, r15
     64a:	0e 94 33 02 	call	0x466	; 0x466 <level>
    //level(0);


    if(LED1 == 0)
     64e:	00 91 25 01 	lds	r16, 0x0125
     652:	10 91 26 01 	lds	r17, 0x0126
     656:	01 15       	cp	r16, r1
     658:	11 05       	cpc	r17, r1
     65a:	e1 f4       	brne	.+56     	; 0x694 <shift_LED+0x56>
    {
        if(first2){
     65c:	80 91 23 01 	lds	r24, 0x0123
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <shift_LED+0x28>
     664:	4b c0       	rjmp	.+150    	; 0x6fc <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
     666:	10 92 23 01 	sts	0x0123, r1
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	30 93 68 01 	sts	0x0168, r19
     676:	20 93 67 01 	sts	0x0167, r18
     67a:	e0 91 61 01 	lds	r30, 0x0161
     67e:	f0 91 62 01 	lds	r31, 0x0162
     682:	60 91 63 01 	lds	r22, 0x0163
     686:	70 91 64 01 	lds	r23, 0x0164
     68a:	40 91 65 01 	lds	r20, 0x0165
     68e:	50 91 66 01 	lds	r21, 0x0166
     692:	1b c0       	rjmp	.+54     	; 0x6ca <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
     694:	80 91 24 01 	lds	r24, 0x0124
     698:	88 23       	and	r24, r24
     69a:	09 f0       	breq	.+2      	; 0x69e <shift_LED+0x60>
     69c:	7c c0       	rjmp	.+248    	; 0x796 <shift_LED+0x158>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
     69e:	00 0f       	add	r16, r16
     6a0:	11 1f       	adc	r17, r17
     6a2:	10 93 26 01 	sts	0x0126, r17
     6a6:	00 93 25 01 	sts	0x0125, r16
     6aa:	e0 91 61 01 	lds	r30, 0x0161
     6ae:	f0 91 62 01 	lds	r31, 0x0162
     6b2:	60 91 63 01 	lds	r22, 0x0163
     6b6:	70 91 64 01 	lds	r23, 0x0164
     6ba:	40 91 65 01 	lds	r20, 0x0165
     6be:	50 91 66 01 	lds	r21, 0x0166
     6c2:	20 91 67 01 	lds	r18, 0x0167
     6c6:	30 91 68 01 	lds	r19, 0x0168
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
     6ca:	cf 01       	movw	r24, r30
     6cc:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>
     6d0:	8f e7       	ldi	r24, 0x7F	; 127
     6d2:	98 e3       	ldi	r25, 0x38	; 56
     6d4:	a1 e0       	ldi	r26, 0x01	; 1
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	a0 40       	sbci	r26, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <shift_LED+0x98>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <shift_LED+0xa2>
     6e0:	00 00       	nop
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	94 e3       	ldi	r25, 0x34	; 52
     6e6:	ac e0       	ldi	r26, 0x0C	; 12
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	a0 40       	sbci	r26, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <shift_LED+0xaa>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <shift_LED+0xb4>
     6f2:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
     6fc:	20 91 67 01 	lds	r18, 0x0167
     700:	30 91 68 01 	lds	r19, 0x0168
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
     704:	21 15       	cp	r18, r1
     706:	31 05       	cpc	r19, r1
     708:	09 f0       	breq	.+2      	; 0x70c <shift_LED+0xce>
     70a:	b1 cf       	rjmp	.-158    	; 0x66e <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
     70c:	80 91 22 01 	lds	r24, 0x0122
     710:	88 23       	and	r24, r24
     712:	09 f0       	breq	.+2      	; 0x716 <shift_LED+0xd8>
     714:	53 c0       	rjmp	.+166    	; 0x7bc <shift_LED+0x17e>
     716:	40 91 65 01 	lds	r20, 0x0165
     71a:	50 91 66 01 	lds	r21, 0x0166
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
     71e:	41 15       	cp	r20, r1
     720:	51 05       	cpc	r21, r1
     722:	09 f0       	breq	.+2      	; 0x726 <shift_LED+0xe8>
     724:	4f c0       	rjmp	.+158    	; 0x7c4 <shift_LED+0x186>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
     726:	80 91 21 01 	lds	r24, 0x0121
     72a:	88 23       	and	r24, r24
     72c:	09 f0       	breq	.+2      	; 0x730 <shift_LED+0xf2>
     72e:	5b c0       	rjmp	.+182    	; 0x7e6 <shift_LED+0x1a8>
     730:	00 91 63 01 	lds	r16, 0x0163
     734:	10 91 64 01 	lds	r17, 0x0164
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
     738:	01 15       	cp	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	09 f0       	breq	.+2      	; 0x740 <shift_LED+0x102>
     73e:	57 c0       	rjmp	.+174    	; 0x7ee <shift_LED+0x1b0>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
     740:	80 91 20 01 	lds	r24, 0x0120
     744:	88 23       	and	r24, r24
     746:	09 f0       	breq	.+2      	; 0x74a <shift_LED+0x10c>
     748:	62 c0       	rjmp	.+196    	; 0x80e <shift_LED+0x1d0>
     74a:	e0 91 61 01 	lds	r30, 0x0161
     74e:	f0 91 62 01 	lds	r31, 0x0162
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
     752:	30 97       	sbiw	r30, 0x00	; 0
     754:	09 f0       	breq	.+2      	; 0x758 <shift_LED+0x11a>
     756:	5f c0       	rjmp	.+190    	; 0x816 <shift_LED+0x1d8>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	30 93 26 01 	sts	0x0126, r19
     760:	20 93 25 01 	sts	0x0125, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 20 01 	sts	0x0120, r24
     76a:	80 93 21 01 	sts	0x0121, r24
     76e:	80 93 22 01 	sts	0x0122, r24
     772:	80 93 23 01 	sts	0x0123, r24
     776:	80 93 24 01 	sts	0x0124, r24
                        layer++;
     77a:	8f 2d       	mov	r24, r15
     77c:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
     77e:	65 e0       	ldi	r22, 0x05	; 5
     780:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__udivmodqi4>
     784:	90 93 60 01 	sts	0x0160, r25
     788:	9f 01       	movw	r18, r30
     78a:	af 01       	movw	r20, r30
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	01 e0       	ldi	r16, 0x01	; 1
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	9a cf       	rjmp	.-204    	; 0x6ca <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
     796:	10 92 24 01 	sts	0x0124, r1
     79a:	e0 91 61 01 	lds	r30, 0x0161
     79e:	f0 91 62 01 	lds	r31, 0x0162
     7a2:	60 91 63 01 	lds	r22, 0x0163
     7a6:	70 91 64 01 	lds	r23, 0x0164
     7aa:	40 91 65 01 	lds	r20, 0x0165
     7ae:	50 91 66 01 	lds	r21, 0x0166
     7b2:	20 91 67 01 	lds	r18, 0x0167
     7b6:	30 91 68 01 	lds	r19, 0x0168
     7ba:	87 cf       	rjmp	.-242    	; 0x6ca <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
     7bc:	10 92 22 01 	sts	0x0122, r1
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
     7c4:	44 0f       	add	r20, r20
     7c6:	55 1f       	adc	r21, r21
     7c8:	50 93 66 01 	sts	0x0166, r21
     7cc:	40 93 65 01 	sts	0x0165, r20
     7d0:	e0 91 61 01 	lds	r30, 0x0161
     7d4:	f0 91 62 01 	lds	r31, 0x0162
     7d8:	60 91 63 01 	lds	r22, 0x0163
     7dc:	70 91 64 01 	lds	r23, 0x0164
     7e0:	00 e0       	ldi	r16, 0x00	; 0
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	72 cf       	rjmp	.-284    	; 0x6ca <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
     7e6:	10 92 21 01 	sts	0x0121, r1
     7ea:	01 e0       	ldi	r16, 0x01	; 1
     7ec:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
     7ee:	b8 01       	movw	r22, r16
     7f0:	66 0f       	add	r22, r22
     7f2:	77 1f       	adc	r23, r23
     7f4:	70 93 64 01 	sts	0x0164, r23
     7f8:	60 93 63 01 	sts	0x0163, r22
     7fc:	e0 91 61 01 	lds	r30, 0x0161
     800:	f0 91 62 01 	lds	r31, 0x0162
     804:	00 e0       	ldi	r16, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	5e cf       	rjmp	.-324    	; 0x6ca <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
     80e:	10 92 20 01 	sts	0x0120, r1
     812:	e1 e0       	ldi	r30, 0x01	; 1
     814:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	f0 93 62 01 	sts	0x0162, r31
     81e:	e0 93 61 01 	sts	0x0161, r30
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	4d cf       	rjmp	.-358    	; 0x6ca <shift_LED+0x8c>

00000830 <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     834:	83 b1       	in	r24, 0x03	; 3
     836:	80 95       	com	r24
     838:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	d1 f0       	breq	.+52     	; 0x872 <hall_test+0x42>
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	40 f5       	brcc	.+80     	; 0x892 <hall_test+0x62>
     842:	88 23       	and	r24, r24
     844:	81 f1       	breq	.+96     	; 0x8a6 <hall_test+0x76>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	61 f1       	breq	.+88     	; 0x8a2 <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 33 02 	call	0x466	; 0x466 <level>
                transmit1(C1P2,0,0,0,0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	00 e0       	ldi	r16, 0x00	; 0
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     868:	83 b1       	in	r24, 0x03	; 3
     86a:	80 95       	com	r24
     86c:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	31 f7       	brne	.-52     	; 0x83e <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
     872:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     874:	0e 94 33 02 	call	0x466	; 0x466 <level>
                transmit1(0,0,C1P3,C1P2,0);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	51 e0       	ldi	r21, 0x01	; 1
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	32 e0       	ldi	r19, 0x02	; 2
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>
                break;
     890:	d1 cf       	rjmp	.-94     	; 0x834 <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     892:	84 30       	cpi	r24, 0x04	; 4
     894:	21 f0       	breq	.+8      	; 0x89e <hall_test+0x6e>
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	c1 f6       	brne	.-80     	; 0x84a <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	eb cf       	rjmp	.-42     	; 0x874 <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
     89e:	83 e0       	ldi	r24, 0x03	; 3
     8a0:	e9 cf       	rjmp	.-46     	; 0x874 <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	e7 cf       	rjmp	.-50     	; 0x874 <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	e5 cf       	rjmp	.-54     	; 0x874 <hall_test+0x44>

000008aa <red>:

}
}

void red(uint8_t position){
    switch(position){
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	89 31       	cpi	r24, 0x19	; 25
     8b0:	91 05       	cpc	r25, r1
     8b2:	a8 f0       	brcs	.+42     	; 0x8de <red+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P9;
            break;
        default:
            frame[0][0] = 0x0000;
     8b4:	10 92 29 01 	sts	0x0129, r1
     8b8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     8bc:	10 92 2b 01 	sts	0x012B, r1
     8c0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     8c4:	10 92 2d 01 	sts	0x012D, r1
     8c8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     8cc:	10 92 2f 01 	sts	0x012F, r1
     8d0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     8d4:	10 92 31 01 	sts	0x0131, r1
     8d8:	10 92 30 01 	sts	0x0130, r1
     8dc:	08 95       	ret

}
}

void red(uint8_t position){
    switch(position){
     8de:	88 5d       	subi	r24, 0xD8	; 216
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	fc 01       	movw	r30, r24
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	05 90       	lpm	r0, Z+
     8ea:	f4 91       	lpm	r31, Z+
     8ec:	e0 2d       	mov	r30, r0
     8ee:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P3;
            break;
        case 24:
            frame[0][0] = 0x0000;
     8f0:	10 92 29 01 	sts	0x0129, r1
     8f4:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     8f8:	10 92 2b 01 	sts	0x012B, r1
     8fc:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     900:	10 92 2d 01 	sts	0x012D, r1
     904:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     908:	10 92 2f 01 	sts	0x012F, r1
     90c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P4;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e2       	ldi	r25, 0x20	; 32
     914:	90 93 31 01 	sts	0x0131, r25
     918:	80 93 30 01 	sts	0x0130, r24
            break;
     91c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     91e:	10 92 29 01 	sts	0x0129, r1
     922:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     926:	10 92 2b 01 	sts	0x012B, r1
     92a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     92e:	10 92 2d 01 	sts	0x012D, r1
     932:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     936:	10 92 2f 01 	sts	0x012F, r1
     93a:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P3;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	90 93 31 01 	sts	0x0131, r25
     946:	80 93 30 01 	sts	0x0130, r24
            break;
     94a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P16;
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 29 01 	sts	0x0129, r25
     954:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
     958:	10 92 2b 01 	sts	0x012B, r1
     95c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     960:	10 92 2d 01 	sts	0x012D, r1
     964:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     968:	10 92 2f 01 	sts	0x012F, r1
     96c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     970:	10 92 31 01 	sts	0x0131, r1
     974:	10 92 30 01 	sts	0x0130, r1
            break;
     978:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P12;
            break;
        case 21:
            frame[0][0] = C1P10;
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	e8 cf       	rjmp	.-48     	; 0x950 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P13;
            break;
        case 20:
            frame[0][0] = 0x0000;
     980:	10 92 29 01 	sts	0x0129, r1
     984:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     988:	10 92 2b 01 	sts	0x012B, r1
     98c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     990:	10 92 2d 01 	sts	0x012D, r1
     994:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     998:	10 92 2f 01 	sts	0x012F, r1
     99c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P12;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 31 01 	sts	0x0131, r25
     9a8:	80 93 30 01 	sts	0x0130, r24
            break;
     9ac:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P14;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     9ae:	10 92 29 01 	sts	0x0129, r1
     9b2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     9b6:	10 92 2b 01 	sts	0x012B, r1
     9ba:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     9be:	10 92 2d 01 	sts	0x012D, r1
     9c2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     9c6:	10 92 2f 01 	sts	0x012F, r1
     9ca:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P13;
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 31 01 	sts	0x0131, r25
     9d6:	80 93 30 01 	sts	0x0130, r24
            break;
     9da:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     9dc:	10 92 29 01 	sts	0x0129, r1
     9e0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     9e4:	10 92 2b 01 	sts	0x012B, r1
     9e8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     9ec:	10 92 2d 01 	sts	0x012D, r1
     9f0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P14;
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 2f 01 	sts	0x012F, r25
     9fc:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a00:	10 92 31 01 	sts	0x0131, r1
     a04:	10 92 30 01 	sts	0x0130, r1
            break;
     a08:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P3;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	a0 cf       	rjmp	.-192    	; 0x950 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P3;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P7;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9d cf       	rjmp	.-198    	; 0x950 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P6;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     a16:	10 92 29 01 	sts	0x0129, r1
     a1a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a1e:	10 92 2b 01 	sts	0x012B, r1
     a22:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a26:	10 92 2d 01 	sts	0x012D, r1
     a2a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P3;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	90 93 2f 01 	sts	0x012F, r25
     a36:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a3a:	10 92 31 01 	sts	0x0131, r1
     a3e:	10 92 30 01 	sts	0x0130, r1
            break;
     a42:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P11;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     a44:	10 92 29 01 	sts	0x0129, r1
     a48:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a4c:	10 92 2b 01 	sts	0x012B, r1
     a50:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a54:	10 92 2d 01 	sts	0x012D, r1
     a58:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P6;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	98 e0       	ldi	r25, 0x08	; 8
     a60:	90 93 2f 01 	sts	0x012F, r25
     a64:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a68:	10 92 31 01 	sts	0x0131, r1
     a6c:	10 92 30 01 	sts	0x0130, r1
            break;
     a70:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     a72:	10 92 29 01 	sts	0x0129, r1
     a76:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a7a:	10 92 2b 01 	sts	0x012B, r1
     a7e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a82:	10 92 2d 01 	sts	0x012D, r1
     a86:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P11;
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 2f 01 	sts	0x012F, r25
     a92:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a96:	10 92 31 01 	sts	0x0131, r1
     a9a:	10 92 30 01 	sts	0x0130, r1
            break;
     a9e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P6;
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	98 e0       	ldi	r25, 0x08	; 8
     aa4:	55 cf       	rjmp	.-342    	; 0x950 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P7;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     aa6:	10 92 29 01 	sts	0x0129, r1
     aaa:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P14;
     aae:	80 e8       	ldi	r24, 0x80	; 128
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 2b 01 	sts	0x012B, r25
     ab6:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     aba:	10 92 2d 01 	sts	0x012D, r1
     abe:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     ac2:	10 92 2f 01 	sts	0x012F, r1
     ac6:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     aca:	10 92 31 01 	sts	0x0131, r1
     ace:	10 92 30 01 	sts	0x0130, r1
            break;
     ad2:	08 95       	ret
            frame[0][2] = C3P8;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     ad4:	10 92 29 01 	sts	0x0129, r1
     ad8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     adc:	10 92 2b 01 	sts	0x012B, r1
     ae0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     ae4:	10 92 2d 01 	sts	0x012D, r1
     ae8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P7;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	90 93 2f 01 	sts	0x012F, r25
     af4:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     af8:	10 92 31 01 	sts	0x0131, r1
     afc:	10 92 30 01 	sts	0x0130, r1
            break;
     b00:	08 95       	ret
            frame[0][2] = C3P3;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     b02:	10 92 29 01 	sts	0x0129, r1
     b06:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     b0a:	10 92 2b 01 	sts	0x012B, r1
     b0e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P8;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e2       	ldi	r25, 0x20	; 32
     b16:	90 93 2d 01 	sts	0x012D, r25
     b1a:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     b1e:	10 92 2f 01 	sts	0x012F, r1
     b22:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b26:	10 92 31 01 	sts	0x0131, r1
     b2a:	10 92 30 01 	sts	0x0130, r1
            break;
     b2e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     b30:	10 92 29 01 	sts	0x0129, r1
     b34:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     b38:	10 92 2b 01 	sts	0x012B, r1
     b3c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P3;
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e1       	ldi	r25, 0x10	; 16
     b44:	90 93 2d 01 	sts	0x012D, r25
     b48:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     b4c:	10 92 2f 01 	sts	0x012F, r1
     b50:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b54:	10 92 31 01 	sts	0x0131, r1
     b58:	10 92 30 01 	sts	0x0130, r1
            break;
     b5c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     b5e:	10 92 29 01 	sts	0x0129, r1
     b62:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P3;
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	90 93 2b 01 	sts	0x012B, r25
     b6e:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     b72:	10 92 2d 01 	sts	0x012D, r1
     b76:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     b7a:	10 92 2f 01 	sts	0x012F, r1
     b7e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b82:	10 92 31 01 	sts	0x0131, r1
     b86:	10 92 30 01 	sts	0x0130, r1
            break;
     b8a:	08 95       	ret
            frame[0][2] = C3P9;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
     b8c:	10 92 29 01 	sts	0x0129, r1
     b90:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P11;
     b94:	80 e1       	ldi	r24, 0x10	; 16
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 2b 01 	sts	0x012B, r25
     b9c:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     ba0:	10 92 2d 01 	sts	0x012D, r1
     ba4:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     ba8:	10 92 2f 01 	sts	0x012F, r1
     bac:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     bb0:	10 92 31 01 	sts	0x0131, r1
     bb4:	10 92 30 01 	sts	0x0130, r1
            break;
     bb8:	08 95       	ret
            frame[0][2] = C3P14;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     bba:	10 92 29 01 	sts	0x0129, r1
     bbe:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     bc2:	10 92 2b 01 	sts	0x012B, r1
     bc6:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P9;
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 2d 01 	sts	0x012D, r25
     bd2:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     bd6:	10 92 2f 01 	sts	0x012F, r1
     bda:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     bde:	10 92 31 01 	sts	0x0131, r1
     be2:	10 92 30 01 	sts	0x0130, r1
            break;
     be6:	08 95       	ret
            frame[0][2] = C3P15;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
     be8:	10 92 29 01 	sts	0x0129, r1
     bec:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     bf0:	10 92 2b 01 	sts	0x012B, r1
     bf4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P14;
     bf8:	88 e0       	ldi	r24, 0x08	; 8
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 2d 01 	sts	0x012D, r25
     c00:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     c04:	10 92 2f 01 	sts	0x012F, r1
     c08:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c0c:	10 92 31 01 	sts	0x0131, r1
     c10:	10 92 30 01 	sts	0x0130, r1
            break;
     c14:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
     c16:	10 92 29 01 	sts	0x0129, r1
     c1a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     c1e:	10 92 2b 01 	sts	0x012B, r1
     c22:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P15;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	90 93 2d 01 	sts	0x012D, r25
     c2e:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     c32:	10 92 2f 01 	sts	0x012F, r1
     c36:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c3a:	10 92 31 01 	sts	0x0131, r1
     c3e:	10 92 30 01 	sts	0x0130, r1
            break;
     c42:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
     c44:	10 92 29 01 	sts	0x0129, r1
     c48:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P7;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e1       	ldi	r25, 0x10	; 16
     c50:	90 93 2b 01 	sts	0x012B, r25
     c54:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     c58:	10 92 2d 01 	sts	0x012D, r1
     c5c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     c60:	10 92 2f 01 	sts	0x012F, r1
     c64:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c68:	10 92 31 01 	sts	0x0131, r1
     c6c:	10 92 30 01 	sts	0x0130, r1
            break;
     c70:	08 95       	ret
}

void red(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
     c72:	10 92 29 01 	sts	0x0129, r1
     c76:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P8;
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 2b 01 	sts	0x012B, r25
     c82:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     c86:	10 92 2d 01 	sts	0x012D, r1
     c8a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     c8e:	10 92 2f 01 	sts	0x012F, r1
     c92:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c96:	10 92 31 01 	sts	0x0131, r1
     c9a:	10 92 30 01 	sts	0x0130, r1
            break;
     c9e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P4;
            break;
        case 25:
            frame[0][0] = 0x0000;
     ca0:	10 92 29 01 	sts	0x0129, r1
     ca4:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     ca8:	10 92 2b 01 	sts	0x012B, r1
     cac:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     cb0:	10 92 2d 01 	sts	0x012D, r1
     cb4:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     cb8:	10 92 2f 01 	sts	0x012F, r1
     cbc:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P9;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e4       	ldi	r25, 0x40	; 64
     cc4:	90 93 31 01 	sts	0x0131, r25
     cc8:	80 93 30 01 	sts	0x0130, r24
            break;
     ccc:	08 95       	ret

00000cce <green>:


}

void green(uint8_t position){
    switch(position){
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	89 31       	cpi	r24, 0x19	; 25
     cd4:	91 05       	cpc	r25, r1
     cd6:	a8 f0       	brcs	.+42     	; 0xd02 <green+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P8;
            break;
        default:
            frame[0][0] = 0x0000;
     cd8:	10 92 29 01 	sts	0x0129, r1
     cdc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     ce0:	10 92 2b 01 	sts	0x012B, r1
     ce4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     ce8:	10 92 2d 01 	sts	0x012D, r1
     cec:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     cf0:	10 92 2f 01 	sts	0x012F, r1
     cf4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     cf8:	10 92 31 01 	sts	0x0131, r1
     cfc:	10 92 30 01 	sts	0x0130, r1
     d00:	08 95       	ret


}

void green(uint8_t position){
    switch(position){
     d02:	8f 5b       	subi	r24, 0xBF	; 191
     d04:	9f 4f       	sbci	r25, 0xFF	; 255
     d06:	fc 01       	movw	r30, r24
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	05 90       	lpm	r0, Z+
     d0e:	f4 91       	lpm	r31, Z+
     d10:	e0 2d       	mov	r30, r0
     d12:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P2;
            break;
        case 24:
            frame[0][0] = 0x0000;
     d14:	10 92 29 01 	sts	0x0129, r1
     d18:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     d1c:	10 92 2b 01 	sts	0x012B, r1
     d20:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d24:	10 92 2d 01 	sts	0x012D, r1
     d28:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d2c:	10 92 2f 01 	sts	0x012F, r1
     d30:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P5;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e1       	ldi	r25, 0x10	; 16
     d38:	90 93 31 01 	sts	0x0131, r25
     d3c:	80 93 30 01 	sts	0x0130, r24
            break;
     d40:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     d42:	10 92 29 01 	sts	0x0129, r1
     d46:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     d4a:	10 92 2b 01 	sts	0x012B, r1
     d4e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d52:	10 92 2d 01 	sts	0x012D, r1
     d56:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d5a:	10 92 2f 01 	sts	0x012F, r1
     d5e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P2;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	90 93 31 01 	sts	0x0131, r25
     d6a:	80 93 30 01 	sts	0x0130, r24
            break;
     d6e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P15;
     d70:	80 e4       	ldi	r24, 0x40	; 64
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	90 93 29 01 	sts	0x0129, r25
     d78:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
     d7c:	10 92 2b 01 	sts	0x012B, r1
     d80:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d84:	10 92 2d 01 	sts	0x012D, r1
     d88:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d8c:	10 92 2f 01 	sts	0x012F, r1
     d90:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     d94:	10 92 31 01 	sts	0x0131, r1
     d98:	10 92 30 01 	sts	0x0130, r1
            break;
     d9c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P11;
            break;
        case 21:
            frame[0][0] = C1P11;
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	e8 cf       	rjmp	.-48     	; 0xd74 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P14;
            break;
        case 20:
            frame[0][0] = 0x0000;
     da4:	10 92 29 01 	sts	0x0129, r1
     da8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     dac:	10 92 2b 01 	sts	0x012B, r1
     db0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     db4:	10 92 2d 01 	sts	0x012D, r1
     db8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     dbc:	10 92 2f 01 	sts	0x012F, r1
     dc0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P11;
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 31 01 	sts	0x0131, r25
     dcc:	80 93 30 01 	sts	0x0130, r24
            break;
     dd0:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P15;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     dd2:	10 92 29 01 	sts	0x0129, r1
     dd6:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     dda:	10 92 2b 01 	sts	0x012B, r1
     dde:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     de2:	10 92 2d 01 	sts	0x012D, r1
     de6:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     dea:	10 92 2f 01 	sts	0x012F, r1
     dee:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P14;
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 31 01 	sts	0x0131, r25
     dfa:	80 93 30 01 	sts	0x0130, r24
            break;
     dfe:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     e00:	10 92 29 01 	sts	0x0129, r1
     e04:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e08:	10 92 2b 01 	sts	0x012B, r1
     e0c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e10:	10 92 2d 01 	sts	0x012D, r1
     e14:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P15;
     e18:	80 e4       	ldi	r24, 0x40	; 64
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	90 93 2f 01 	sts	0x012F, r25
     e20:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e24:	10 92 31 01 	sts	0x0131, r1
     e28:	10 92 30 01 	sts	0x0130, r1
            break;
     e2c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P2;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	a0 cf       	rjmp	.-192    	; 0xd74 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P2;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P8;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e8       	ldi	r25, 0x80	; 128
     e38:	9d cf       	rjmp	.-198    	; 0xd74 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P5;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     e3a:	10 92 29 01 	sts	0x0129, r1
     e3e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e42:	10 92 2b 01 	sts	0x012B, r1
     e46:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e4a:	10 92 2d 01 	sts	0x012D, r1
     e4e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P2;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	90 93 2f 01 	sts	0x012F, r25
     e5a:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e5e:	10 92 31 01 	sts	0x0131, r1
     e62:	10 92 30 01 	sts	0x0130, r1
            break;
     e66:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P12;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     e68:	10 92 29 01 	sts	0x0129, r1
     e6c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e70:	10 92 2b 01 	sts	0x012B, r1
     e74:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e78:	10 92 2d 01 	sts	0x012D, r1
     e7c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P5;
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e1       	ldi	r25, 0x10	; 16
     e84:	90 93 2f 01 	sts	0x012F, r25
     e88:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e8c:	10 92 31 01 	sts	0x0131, r1
     e90:	10 92 30 01 	sts	0x0130, r1
            break;
     e94:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     e96:	10 92 29 01 	sts	0x0129, r1
     e9a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e9e:	10 92 2b 01 	sts	0x012B, r1
     ea2:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     ea6:	10 92 2d 01 	sts	0x012D, r1
     eaa:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P12;
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	90 93 2f 01 	sts	0x012F, r25
     eb6:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     eba:	10 92 31 01 	sts	0x0131, r1
     ebe:	10 92 30 01 	sts	0x0130, r1
            break;
     ec2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P5;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e1       	ldi	r25, 0x10	; 16
     ec8:	55 cf       	rjmp	.-342    	; 0xd74 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P8;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     eca:	10 92 29 01 	sts	0x0129, r1
     ece:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P15;
     ed2:	80 e4       	ldi	r24, 0x40	; 64
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 2b 01 	sts	0x012B, r25
     eda:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     ede:	10 92 2d 01 	sts	0x012D, r1
     ee2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     ee6:	10 92 2f 01 	sts	0x012F, r1
     eea:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     eee:	10 92 31 01 	sts	0x0131, r1
     ef2:	10 92 30 01 	sts	0x0130, r1
            break;
     ef6:	08 95       	ret
            frame[0][2] = C3P7;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     ef8:	10 92 29 01 	sts	0x0129, r1
     efc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     f00:	10 92 2b 01 	sts	0x012B, r1
     f04:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     f08:	10 92 2d 01 	sts	0x012D, r1
     f0c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P8;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e8       	ldi	r25, 0x80	; 128
     f14:	90 93 2f 01 	sts	0x012F, r25
     f18:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     f1c:	10 92 31 01 	sts	0x0131, r1
     f20:	10 92 30 01 	sts	0x0130, r1
            break;
     f24:	08 95       	ret
            frame[0][2] = C3P4;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     f26:	10 92 29 01 	sts	0x0129, r1
     f2a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     f2e:	10 92 2b 01 	sts	0x012B, r1
     f32:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P7;
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e4       	ldi	r25, 0x40	; 64
     f3a:	90 93 2d 01 	sts	0x012D, r25
     f3e:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     f42:	10 92 2f 01 	sts	0x012F, r1
     f46:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     f4a:	10 92 31 01 	sts	0x0131, r1
     f4e:	10 92 30 01 	sts	0x0130, r1
            break;
     f52:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     f54:	10 92 29 01 	sts	0x0129, r1
     f58:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     f5c:	10 92 2b 01 	sts	0x012B, r1
     f60:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P4;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	98 e0       	ldi	r25, 0x08	; 8
     f68:	90 93 2d 01 	sts	0x012D, r25
     f6c:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     f70:	10 92 2f 01 	sts	0x012F, r1
     f74:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     f78:	10 92 31 01 	sts	0x0131, r1
     f7c:	10 92 30 01 	sts	0x0130, r1
            break;
     f80:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     f82:	10 92 29 01 	sts	0x0129, r1
     f86:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P2;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	90 93 2b 01 	sts	0x012B, r25
     f92:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     f96:	10 92 2d 01 	sts	0x012D, r1
     f9a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     f9e:	10 92 2f 01 	sts	0x012F, r1
     fa2:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     fa6:	10 92 31 01 	sts	0x0131, r1
     faa:	10 92 30 01 	sts	0x0130, r1
            break;
     fae:	08 95       	ret
            frame[0][2] = C3P10;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
     fb0:	10 92 29 01 	sts	0x0129, r1
     fb4:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P12;
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 2b 01 	sts	0x012B, r25
     fc0:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     fc4:	10 92 2d 01 	sts	0x012D, r1
     fc8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     fcc:	10 92 2f 01 	sts	0x012F, r1
     fd0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     fd4:	10 92 31 01 	sts	0x0131, r1
     fd8:	10 92 30 01 	sts	0x0130, r1
            break;
     fdc:	08 95       	ret
            frame[0][2] = C3P13;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     fde:	10 92 29 01 	sts	0x0129, r1
     fe2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     fe6:	10 92 2b 01 	sts	0x012B, r1
     fea:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P10;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 2d 01 	sts	0x012D, r25
     ff6:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     ffa:	10 92 2f 01 	sts	0x012F, r1
     ffe:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1002:	10 92 31 01 	sts	0x0131, r1
    1006:	10 92 30 01 	sts	0x0130, r1
            break;
    100a:	08 95       	ret
            frame[0][2] = C3P16;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
    100c:	10 92 29 01 	sts	0x0129, r1
    1010:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1014:	10 92 2b 01 	sts	0x012B, r1
    1018:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P13;
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 2d 01 	sts	0x012D, r25
    1024:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1028:	10 92 2f 01 	sts	0x012F, r1
    102c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1030:	10 92 31 01 	sts	0x0131, r1
    1034:	10 92 30 01 	sts	0x0130, r1
            break;
    1038:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
    103a:	10 92 29 01 	sts	0x0129, r1
    103e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1042:	10 92 2b 01 	sts	0x012B, r1
    1046:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P16;
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	90 93 2d 01 	sts	0x012D, r25
    1052:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1056:	10 92 2f 01 	sts	0x012F, r1
    105a:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    105e:	10 92 31 01 	sts	0x0131, r1
    1062:	10 92 30 01 	sts	0x0130, r1
            break;
    1066:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
    1068:	10 92 29 01 	sts	0x0129, r1
    106c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P6;
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e2       	ldi	r25, 0x20	; 32
    1074:	90 93 2b 01 	sts	0x012B, r25
    1078:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    107c:	10 92 2d 01 	sts	0x012D, r1
    1080:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1084:	10 92 2f 01 	sts	0x012F, r1
    1088:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    108c:	10 92 31 01 	sts	0x0131, r1
    1090:	10 92 30 01 	sts	0x0130, r1
            break;
    1094:	08 95       	ret
}

void green(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    1096:	10 92 29 01 	sts	0x0129, r1
    109a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P9;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	90 93 2b 01 	sts	0x012B, r25
    10a6:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    10aa:	10 92 2d 01 	sts	0x012D, r1
    10ae:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    10b2:	10 92 2f 01 	sts	0x012F, r1
    10b6:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    10ba:	10 92 31 01 	sts	0x0131, r1
    10be:	10 92 30 01 	sts	0x0130, r1
            break;
    10c2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P5;
            break;
        case 25:
            frame[0][0] = 0x0000;
    10c4:	10 92 29 01 	sts	0x0129, r1
    10c8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    10cc:	10 92 2b 01 	sts	0x012B, r1
    10d0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    10d4:	10 92 2d 01 	sts	0x012D, r1
    10d8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    10dc:	10 92 2f 01 	sts	0x012F, r1
    10e0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P8;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e8       	ldi	r25, 0x80	; 128
    10e8:	90 93 31 01 	sts	0x0131, r25
    10ec:	80 93 30 01 	sts	0x0130, r24
            break;
    10f0:	08 95       	ret

000010f2 <blue>:
    }

}

void blue(uint8_t position){
    switch(position){
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	89 31       	cpi	r24, 0x19	; 25
    10f8:	91 05       	cpc	r25, r1
    10fa:	a8 f0       	brcs	.+42     	; 0x1126 <blue+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P7;
            break;
        default:
            frame[0][0] = 0x0000;
    10fc:	10 92 29 01 	sts	0x0129, r1
    1100:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1104:	10 92 2b 01 	sts	0x012B, r1
    1108:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    110c:	10 92 2d 01 	sts	0x012D, r1
    1110:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1114:	10 92 2f 01 	sts	0x012F, r1
    1118:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    111c:	10 92 31 01 	sts	0x0131, r1
    1120:	10 92 30 01 	sts	0x0130, r1
    1124:	08 95       	ret
    }

}

void blue(uint8_t position){
    switch(position){
    1126:	86 5a       	subi	r24, 0xA6	; 166
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	fc 01       	movw	r30, r24
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	05 90       	lpm	r0, Z+
    1132:	f4 91       	lpm	r31, Z+
    1134:	e0 2d       	mov	r30, r0
    1136:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P1;
            break;
        case 24:
            frame[0][0] = 0x0000;
    1138:	10 92 29 01 	sts	0x0129, r1
    113c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1140:	10 92 2b 01 	sts	0x012B, r1
    1144:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1148:	10 92 2d 01 	sts	0x012D, r1
    114c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1150:	10 92 2f 01 	sts	0x012F, r1
    1154:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P6;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	98 e0       	ldi	r25, 0x08	; 8
    115c:	90 93 31 01 	sts	0x0131, r25
    1160:	80 93 30 01 	sts	0x0130, r24
            break;
    1164:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
    1166:	10 92 29 01 	sts	0x0129, r1
    116a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    116e:	10 92 2b 01 	sts	0x012B, r1
    1172:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1176:	10 92 2d 01 	sts	0x012D, r1
    117a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    117e:	10 92 2f 01 	sts	0x012F, r1
    1182:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P1;
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	90 93 31 01 	sts	0x0131, r25
    118e:	80 93 30 01 	sts	0x0130, r24
            break;
    1192:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P14;
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 29 01 	sts	0x0129, r25
    119c:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
    11a0:	10 92 2b 01 	sts	0x012B, r1
    11a4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    11a8:	10 92 2d 01 	sts	0x012D, r1
    11ac:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    11b0:	10 92 2f 01 	sts	0x012F, r1
    11b4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    11b8:	10 92 31 01 	sts	0x0131, r1
    11bc:	10 92 30 01 	sts	0x0130, r1
            break;
    11c0:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P10;
            break;
        case 21:
            frame[0][0] = C1P12;
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	e8 cf       	rjmp	.-48     	; 0x1198 <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P15;
            break;
        case 20:
            frame[0][0] = 0x0000;
    11c8:	10 92 29 01 	sts	0x0129, r1
    11cc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    11d0:	10 92 2b 01 	sts	0x012B, r1
    11d4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    11d8:	10 92 2d 01 	sts	0x012D, r1
    11dc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    11e0:	10 92 2f 01 	sts	0x012F, r1
    11e4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P10;
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 31 01 	sts	0x0131, r25
    11f0:	80 93 30 01 	sts	0x0130, r24
            break;
    11f4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P16;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
    11f6:	10 92 29 01 	sts	0x0129, r1
    11fa:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    11fe:	10 92 2b 01 	sts	0x012B, r1
    1202:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1206:	10 92 2d 01 	sts	0x012D, r1
    120a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    120e:	10 92 2f 01 	sts	0x012F, r1
    1212:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P15;
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 93 31 01 	sts	0x0131, r25
    121e:	80 93 30 01 	sts	0x0130, r24
            break;
    1222:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
    1224:	10 92 29 01 	sts	0x0129, r1
    1228:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    122c:	10 92 2b 01 	sts	0x012B, r1
    1230:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1234:	10 92 2d 01 	sts	0x012D, r1
    1238:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P16;
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	90 93 2f 01 	sts	0x012F, r25
    1244:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    1248:	10 92 31 01 	sts	0x0131, r1
    124c:	10 92 30 01 	sts	0x0130, r1
            break;
    1250:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P1;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	a0 cf       	rjmp	.-192    	; 0x1198 <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P1;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P9;
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e4       	ldi	r25, 0x40	; 64
    125c:	9d cf       	rjmp	.-198    	; 0x1198 <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P4;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
    125e:	10 92 29 01 	sts	0x0129, r1
    1262:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1266:	10 92 2b 01 	sts	0x012B, r1
    126a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    126e:	10 92 2d 01 	sts	0x012D, r1
    1272:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P1;
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	90 93 2f 01 	sts	0x012F, r25
    127e:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    1282:	10 92 31 01 	sts	0x0131, r1
    1286:	10 92 30 01 	sts	0x0130, r1
            break;
    128a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P13;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
    128c:	10 92 29 01 	sts	0x0129, r1
    1290:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1294:	10 92 2b 01 	sts	0x012B, r1
    1298:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    129c:	10 92 2d 01 	sts	0x012D, r1
    12a0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P4;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e2       	ldi	r25, 0x20	; 32
    12a8:	90 93 2f 01 	sts	0x012F, r25
    12ac:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    12b0:	10 92 31 01 	sts	0x0131, r1
    12b4:	10 92 30 01 	sts	0x0130, r1
            break;
    12b8:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
    12ba:	10 92 29 01 	sts	0x0129, r1
    12be:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    12c2:	10 92 2b 01 	sts	0x012B, r1
    12c6:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    12ca:	10 92 2d 01 	sts	0x012D, r1
    12ce:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P13;
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	90 93 2f 01 	sts	0x012F, r25
    12da:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    12de:	10 92 31 01 	sts	0x0131, r1
    12e2:	10 92 30 01 	sts	0x0130, r1
            break;
    12e6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P4;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e2       	ldi	r25, 0x20	; 32
    12ec:	55 cf       	rjmp	.-342    	; 0x1198 <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P9;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
    12ee:	10 92 29 01 	sts	0x0129, r1
    12f2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P16;
    12f6:	80 e2       	ldi	r24, 0x20	; 32
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	90 93 2b 01 	sts	0x012B, r25
    12fe:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    1302:	10 92 2d 01 	sts	0x012D, r1
    1306:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    130a:	10 92 2f 01 	sts	0x012F, r1
    130e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1312:	10 92 31 01 	sts	0x0131, r1
    1316:	10 92 30 01 	sts	0x0130, r1
            break;
    131a:	08 95       	ret
            frame[0][2] = C3P6;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
    131c:	10 92 29 01 	sts	0x0129, r1
    1320:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1324:	10 92 2b 01 	sts	0x012B, r1
    1328:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    132c:	10 92 2d 01 	sts	0x012D, r1
    1330:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P9;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e4       	ldi	r25, 0x40	; 64
    1338:	90 93 2f 01 	sts	0x012F, r25
    133c:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    1340:	10 92 31 01 	sts	0x0131, r1
    1344:	10 92 30 01 	sts	0x0130, r1
            break;
    1348:	08 95       	ret
            frame[0][2] = C3P5;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
    134a:	10 92 29 01 	sts	0x0129, r1
    134e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1352:	10 92 2b 01 	sts	0x012B, r1
    1356:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P6;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e8       	ldi	r25, 0x80	; 128
    135e:	90 93 2d 01 	sts	0x012D, r25
    1362:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1366:	10 92 2f 01 	sts	0x012F, r1
    136a:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    136e:	10 92 31 01 	sts	0x0131, r1
    1372:	10 92 30 01 	sts	0x0130, r1
            break;
    1376:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
    1378:	10 92 29 01 	sts	0x0129, r1
    137c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1380:	10 92 2b 01 	sts	0x012B, r1
    1384:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P5;
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	90 93 2d 01 	sts	0x012D, r25
    1390:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1394:	10 92 2f 01 	sts	0x012F, r1
    1398:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    139c:	10 92 31 01 	sts	0x0131, r1
    13a0:	10 92 30 01 	sts	0x0130, r1
            break;
    13a4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
    13a6:	10 92 29 01 	sts	0x0129, r1
    13aa:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P1;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	90 93 2b 01 	sts	0x012B, r25
    13b6:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    13ba:	10 92 2d 01 	sts	0x012D, r1
    13be:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    13c2:	10 92 2f 01 	sts	0x012F, r1
    13c6:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    13ca:	10 92 31 01 	sts	0x0131, r1
    13ce:	10 92 30 01 	sts	0x0130, r1
            break;
    13d2:	08 95       	ret
            frame[0][2] = C3P11;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
    13d4:	10 92 29 01 	sts	0x0129, r1
    13d8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P13;
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	90 93 2b 01 	sts	0x012B, r25
    13e4:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    13e8:	10 92 2d 01 	sts	0x012D, r1
    13ec:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    13f0:	10 92 2f 01 	sts	0x012F, r1
    13f4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    13f8:	10 92 31 01 	sts	0x0131, r1
    13fc:	10 92 30 01 	sts	0x0130, r1
            break;
    1400:	08 95       	ret
            frame[0][2] = C3P12;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
    1402:	10 92 29 01 	sts	0x0129, r1
    1406:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    140a:	10 92 2b 01 	sts	0x012B, r1
    140e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P11;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	90 93 2d 01 	sts	0x012D, r25
    141a:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    141e:	10 92 2f 01 	sts	0x012F, r1
    1422:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1426:	10 92 31 01 	sts	0x0131, r1
    142a:	10 92 30 01 	sts	0x0130, r1
            break;
    142e:	08 95       	ret
            frame[0][2] = C3P1;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
    1430:	10 92 29 01 	sts	0x0129, r1
    1434:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1438:	10 92 2b 01 	sts	0x012B, r1
    143c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P12;
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	90 93 2d 01 	sts	0x012D, r25
    1448:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    144c:	10 92 2f 01 	sts	0x012F, r1
    1450:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1454:	10 92 31 01 	sts	0x0131, r1
    1458:	10 92 30 01 	sts	0x0130, r1
            break;
    145c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
    145e:	10 92 29 01 	sts	0x0129, r1
    1462:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1466:	10 92 2b 01 	sts	0x012B, r1
    146a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P1;
    146e:	80 e4       	ldi	r24, 0x40	; 64
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	90 93 2d 01 	sts	0x012D, r25
    1476:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    147a:	10 92 2f 01 	sts	0x012F, r1
    147e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1482:	10 92 31 01 	sts	0x0131, r1
    1486:	10 92 30 01 	sts	0x0130, r1
            break;
    148a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
    148c:	10 92 29 01 	sts	0x0129, r1
    1490:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P5;
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e4       	ldi	r25, 0x40	; 64
    1498:	90 93 2b 01 	sts	0x012B, r25
    149c:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    14a0:	10 92 2d 01 	sts	0x012D, r1
    14a4:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    14a8:	10 92 2f 01 	sts	0x012F, r1
    14ac:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    14b0:	10 92 31 01 	sts	0x0131, r1
    14b4:	10 92 30 01 	sts	0x0130, r1
            break;
    14b8:	08 95       	ret
}

void blue(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    14ba:	10 92 29 01 	sts	0x0129, r1
    14be:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P10;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e8       	ldi	r25, 0x80	; 128
    14c6:	90 93 2b 01 	sts	0x012B, r25
    14ca:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    14ce:	10 92 2d 01 	sts	0x012D, r1
    14d2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    14d6:	10 92 2f 01 	sts	0x012F, r1
    14da:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    14de:	10 92 31 01 	sts	0x0131, r1
    14e2:	10 92 30 01 	sts	0x0130, r1
            break;
    14e6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P6;
            break;
        case 25:
            frame[0][0] = 0x0000;
    14e8:	10 92 29 01 	sts	0x0129, r1
    14ec:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    14f0:	10 92 2b 01 	sts	0x012B, r1
    14f4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    14f8:	10 92 2d 01 	sts	0x012D, r1
    14fc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1500:	10 92 2f 01 	sts	0x012F, r1
    1504:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P7;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 31 01 	sts	0x0131, r25
    1510:	80 93 30 01 	sts	0x0130, r24
            break;
    1514:	08 95       	ret

00001516 <LED_test>:
//      0  Red
//      1  Green
//      2  Blue
// Layers can be 0 - 4
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	08 2f       	mov	r16, r24
    1526:	84 2f       	mov	r24, r20
        level(layer);
    1528:	69 83       	std	Y+1, r22	; 0x01
    152a:	0e 94 33 02 	call	0x466	; 0x466 <level>
        switch(color){
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	01 30       	cpi	r16, 0x01	; 1
    1532:	39 f1       	breq	.+78     	; 0x1582 <LED_test+0x6c>
    1534:	01 30       	cpi	r16, 0x01	; 1
    1536:	08 f1       	brcs	.+66     	; 0x157a <LED_test+0x64>
    1538:	02 30       	cpi	r16, 0x02	; 2
    153a:	19 f4       	brne	.+6      	; 0x1542 <LED_test+0x2c>
                break;
            case 1:
                green(position);
                break;
            case 2:
                blue(position);
    153c:	86 2f       	mov	r24, r22
    153e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <blue>
                break;
            default:
                break;
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);
    1542:	60 91 2e 01 	lds	r22, 0x012E
    1546:	70 91 2f 01 	lds	r23, 0x012F
    154a:	40 91 2c 01 	lds	r20, 0x012C
    154e:	50 91 2d 01 	lds	r21, 0x012D
    1552:	20 91 2a 01 	lds	r18, 0x012A
    1556:	30 91 2b 01 	lds	r19, 0x012B
    155a:	00 91 28 01 	lds	r16, 0x0128
    155e:	10 91 29 01 	lds	r17, 0x0129
    1562:	80 91 30 01 	lds	r24, 0x0130
    1566:	90 91 31 01 	lds	r25, 0x0131
    156a:	0e 94 5f 02 	call	0x4be	; 0x4be <transmit1>

}
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
        level(layer);
        switch(color){
            case 0:
                red(position);
    157a:	86 2f       	mov	r24, r22
    157c:	0e 94 55 04 	call	0x8aa	; 0x8aa <red>
                break;
    1580:	e0 cf       	rjmp	.-64     	; 0x1542 <LED_test+0x2c>
            case 1:
                green(position);
    1582:	86 2f       	mov	r24, r22
    1584:	0e 94 67 06 	call	0xcce	; 0xcce <green>
                break;
    1588:	dc cf       	rjmp	.-72     	; 0x1542 <LED_test+0x2c>

0000158a <test_led>:
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);

}

void test_led(){
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    159c:	10 92 5f 01 	sts	0x015F, r1
        LED_test(i,j,layer);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	60 91 5e 01 	lds	r22, 0x015E
    15a6:	40 91 5d 01 	lds	r20, 0x015D
    15aa:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LED_test>
        if(i == 2){
            j++;
            if(j == 26){
                j = 1;
    15ae:	01 e0       	ldi	r16, 0x01	; 1
                layer++;
                layer = layer % 5;
    15b0:	15 e0       	ldi	r17, 0x05	; 5
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	94 e3       	ldi	r25, 0x34	; 52
    15b6:	ac e0       	ldi	r26, 0x0C	; 12
    15b8:	81 50       	subi	r24, 0x01	; 1
    15ba:	90 40       	sbci	r25, 0x00	; 0
    15bc:	a0 40       	sbci	r26, 0x00	; 0
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <test_led+0x2e>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <test_led+0x38>
    15c2:	00 00       	nop

void test_led(){
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    15c4:	90 91 5f 01 	lds	r25, 0x015F
    15c8:	9f 5f       	subi	r25, 0xFF	; 255
    15ca:	90 93 5f 01 	sts	0x015F, r25
    15ce:	93 30       	cpi	r25, 0x03	; 3
    15d0:	e8 f4       	brcc	.+58     	; 0x160c <test_led+0x82>
        LED_test(i,j,layer);
    15d2:	f0 90 5e 01 	lds	r15, 0x015E
    15d6:	e0 90 5d 01 	lds	r14, 0x015D
    15da:	89 2f       	mov	r24, r25
    15dc:	6f 2d       	mov	r22, r15
    15de:	4e 2d       	mov	r20, r14
    15e0:	99 83       	std	Y+1, r25	; 0x01
    15e2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LED_test>
        if(i == 2){
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	92 30       	cpi	r25, 0x02	; 2
    15ea:	19 f7       	brne	.-58     	; 0x15b2 <test_led+0x28>
            j++;
    15ec:	8f 2d       	mov	r24, r15
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	80 93 5e 01 	sts	0x015E, r24
            if(j == 26){
    15f4:	8a 31       	cpi	r24, 0x1A	; 26
    15f6:	e9 f6       	brne	.-70     	; 0x15b2 <test_led+0x28>
                j = 1;
    15f8:	00 93 5e 01 	sts	0x015E, r16
                layer++;
    15fc:	8e 2d       	mov	r24, r14
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
                layer = layer % 5;
    1600:	61 2f       	mov	r22, r17
    1602:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__udivmodqi4>
    1606:	90 93 5d 01 	sts	0x015D, r25
    160a:	d3 cf       	rjmp	.-90     	; 0x15b2 <test_led+0x28>
            }
        }
        _delay_ms(500);
    }
}
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	08 95       	ret

0000161c <red_led>:

void red_led(uint8_t layer,uint32_t red){
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	7a 01       	movw	r14, r20
    162c:	8b 01       	movw	r16, r22
    162e:	46 ee       	ldi	r20, 0xE6	; 230
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	ec 01       	movw	r28, r24
    163a:	cc 0f       	add	r28, r28
    163c:	dd 1f       	adc	r29, r29
    163e:	cc 0f       	add	r28, r28
    1640:	dd 1f       	adc	r29, r29
    1642:	c8 0f       	add	r28, r24
    1644:	d9 1f       	adc	r29, r25
    1646:	cc 0f       	add	r28, r28
    1648:	dd 1f       	adc	r29, r29
    164a:	c8 5d       	subi	r28, 0xD8	; 216
    164c:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
    164e:	d8 01       	movw	r26, r16
    1650:	c7 01       	movw	r24, r14
    1652:	02 2e       	mov	r0, r18
    1654:	04 c0       	rjmp	.+8      	; 0x165e <red_led+0x42>
    1656:	b6 95       	lsr	r27
    1658:	a7 95       	ror	r26
    165a:	97 95       	ror	r25
    165c:	87 95       	ror	r24
    165e:	0a 94       	dec	r0
    1660:	d2 f7       	brpl	.-12     	; 0x1656 <red_led+0x3a>
        if(state){
    1662:	80 ff       	sbrs	r24, 0
    1664:	12 c0       	rjmp	.+36     	; 0x168a <red_led+0x6e>
        }
        _delay_ms(500);
    }
}

void red_led(uint8_t layer,uint32_t red){
    1666:	de 01       	movw	r26, r28
    1668:	ca 01       	movw	r24, r20
    166a:	65 e0       	ldi	r22, 0x05	; 5
    166c:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
    166e:	fc 01       	movw	r30, r24
    1670:	65 91       	lpm	r22, Z+
    1672:	74 91       	lpm	r23, Z+
    1674:	ed 91       	ld	r30, X+
    1676:	fc 91       	ld	r31, X
    1678:	11 97       	sbiw	r26, 0x01	; 1
    167a:	e6 2b       	or	r30, r22
    167c:	f7 2b       	or	r31, r23
    167e:	ed 93       	st	X+, r30
    1680:	fd 93       	st	X+, r31
    1682:	da 94       	dec	r13
    1684:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
    1686:	dd 20       	and	r13, r13
    1688:	91 f7       	brne	.-28     	; 0x166e <red_led+0x52>
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	46 5f       	subi	r20, 0xF6	; 246
    1690:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    1692:	29 31       	cpi	r18, 0x19	; 25
    1694:	31 05       	cpc	r19, r1
    1696:	d9 f6       	brne	.-74     	; 0x164e <red_led+0x32>
            }
        }
    }
    
//
}
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	08 95       	ret

000016a8 <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	7a 01       	movw	r14, r20
    16b8:	8b 01       	movw	r16, r22
    16ba:	4a ed       	ldi	r20, 0xDA	; 218
    16bc:	52 e0       	ldi	r21, 0x02	; 2
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	ec 01       	movw	r28, r24
    16c6:	cc 0f       	add	r28, r28
    16c8:	dd 1f       	adc	r29, r29
    16ca:	cc 0f       	add	r28, r28
    16cc:	dd 1f       	adc	r29, r29
    16ce:	c8 0f       	add	r28, r24
    16d0:	d9 1f       	adc	r29, r25
    16d2:	cc 0f       	add	r28, r28
    16d4:	dd 1f       	adc	r29, r29
    16d6:	c8 5d       	subi	r28, 0xD8	; 216
    16d8:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
    16da:	d8 01       	movw	r26, r16
    16dc:	c7 01       	movw	r24, r14
    16de:	02 2e       	mov	r0, r18
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <blue_led+0x42>
    16e2:	b6 95       	lsr	r27
    16e4:	a7 95       	ror	r26
    16e6:	97 95       	ror	r25
    16e8:	87 95       	ror	r24
    16ea:	0a 94       	dec	r0
    16ec:	d2 f7       	brpl	.-12     	; 0x16e2 <blue_led+0x3a>
        if(state){
    16ee:	80 ff       	sbrs	r24, 0
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
    16f2:	de 01       	movw	r26, r28
    16f4:	ca 01       	movw	r24, r20
    16f6:	f5 e0       	ldi	r31, 0x05	; 5
    16f8:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
    16fa:	fc 01       	movw	r30, r24
    16fc:	65 91       	lpm	r22, Z+
    16fe:	74 91       	lpm	r23, Z+
    1700:	ed 91       	ld	r30, X+
    1702:	fc 91       	ld	r31, X
    1704:	11 97       	sbiw	r26, 0x01	; 1
    1706:	e6 2b       	or	r30, r22
    1708:	f7 2b       	or	r31, r23
    170a:	ed 93       	st	X+, r30
    170c:	fd 93       	st	X+, r31
    170e:	da 94       	dec	r13
    1710:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    1712:	dd 20       	and	r13, r13
    1714:	91 f7       	brne	.-28     	; 0x16fa <blue_led+0x52>
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	46 5f       	subi	r20, 0xF6	; 246
    171c:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    171e:	29 31       	cpi	r18, 0x19	; 25
    1720:	31 05       	cpc	r19, r1
    1722:	d9 f6       	brne	.-74     	; 0x16da <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	08 95       	ret

00001734 <green_led>:

void green_led(uint8_t layer,uint32_t green){
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	7a 01       	movw	r14, r20
    1744:	8b 01       	movw	r16, r22
    1746:	40 ee       	ldi	r20, 0xE0	; 224
    1748:	51 e0       	ldi	r21, 0x01	; 1
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	ec 01       	movw	r28, r24
    1752:	cc 0f       	add	r28, r28
    1754:	dd 1f       	adc	r29, r29
    1756:	cc 0f       	add	r28, r28
    1758:	dd 1f       	adc	r29, r29
    175a:	c8 0f       	add	r28, r24
    175c:	d9 1f       	adc	r29, r25
    175e:	cc 0f       	add	r28, r28
    1760:	dd 1f       	adc	r29, r29
    1762:	c8 5d       	subi	r28, 0xD8	; 216
    1764:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
    1766:	d8 01       	movw	r26, r16
    1768:	c7 01       	movw	r24, r14
    176a:	02 2e       	mov	r0, r18
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <green_led+0x42>
    176e:	b6 95       	lsr	r27
    1770:	a7 95       	ror	r26
    1772:	97 95       	ror	r25
    1774:	87 95       	ror	r24
    1776:	0a 94       	dec	r0
    1778:	d2 f7       	brpl	.-12     	; 0x176e <green_led+0x3a>
        if(state){
    177a:	80 ff       	sbrs	r24, 0
    177c:	12 c0       	rjmp	.+36     	; 0x17a2 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
    177e:	de 01       	movw	r26, r28
    1780:	ca 01       	movw	r24, r20
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
    1786:	fc 01       	movw	r30, r24
    1788:	65 91       	lpm	r22, Z+
    178a:	74 91       	lpm	r23, Z+
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	11 97       	sbiw	r26, 0x01	; 1
    1792:	e6 2b       	or	r30, r22
    1794:	f7 2b       	or	r31, r23
    1796:	ed 93       	st	X+, r30
    1798:	fd 93       	st	X+, r31
    179a:	da 94       	dec	r13
    179c:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    179e:	dd 20       	and	r13, r13
    17a0:	91 f7       	brne	.-28     	; 0x1786 <green_led+0x52>
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	46 5f       	subi	r20, 0xF6	; 246
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    17aa:	29 31       	cpi	r18, 0x19	; 25
    17ac:	31 05       	cpc	r19, r1
    17ae:	d9 f6       	brne	.-74     	; 0x1766 <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	08 95       	ret

000017c0 <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	bf 92       	push	r11
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	b8 2e       	mov	r11, r24
    17d8:	38 01       	movw	r6, r16
    17da:	49 01       	movw	r8, r18
    red_led(layer,red);
    17dc:	0e 94 0e 0b 	call	0x161c	; 0x161c <red_led>
    blue_led(layer,blue);
    17e0:	8b 2d       	mov	r24, r11
    17e2:	b4 01       	movw	r22, r8
    17e4:	a3 01       	movw	r20, r6
    17e6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <blue_led>
    green_led(layer,green);
    17ea:	8b 2d       	mov	r24, r11
    17ec:	b7 01       	movw	r22, r14
    17ee:	a6 01       	movw	r20, r12
    17f0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <green_led>
}
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	7f 90       	pop	r7
    1808:	6f 90       	pop	r6
    180a:	08 95       	ret

0000180c <test_frame>:
void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        //level(i);
        transmit2(i);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	0e 94 8e 02 	call	0x51c	; 0x51c <transmit2>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 8e 02 	call	0x51c	; 0x51c <transmit2>
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	0e 94 8e 02 	call	0x51c	; 0x51c <transmit2>
    181e:	83 e0       	ldi	r24, 0x03	; 3
    1820:	0e 94 8e 02 	call	0x51c	; 0x51c <transmit2>
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	0e 94 8e 02 	call	0x51c	; 0x51c <transmit2>
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
    }
}
    182a:	08 95       	ret

0000182c <clear_frame>:

void clear_frame(){
    182c:	e8 e2       	ldi	r30, 0x28	; 40
    182e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            frame[i][j] = 0;
    1830:	11 82       	std	Z+1, r1	; 0x01
    1832:	10 82       	st	Z, r1
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	12 82       	std	Z+2, r1	; 0x02
    1838:	15 82       	std	Z+5, r1	; 0x05
    183a:	14 82       	std	Z+4, r1	; 0x04
    183c:	17 82       	std	Z+7, r1	; 0x07
    183e:	16 82       	std	Z+6, r1	; 0x06
    1840:	11 86       	std	Z+9, r1	; 0x09
    1842:	10 86       	std	Z+8, r1	; 0x08
    1844:	3a 96       	adiw	r30, 0x0a	; 10
}

void clear_frame(){
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	ea 35       	cpi	r30, 0x5A	; 90
    184a:	f8 07       	cpc	r31, r24
    184c:	89 f7       	brne	.-30     	; 0x1830 <clear_frame+0x4>
        for(j=0;j<5;j++){
            frame[i][j] = 0;
        }
    } 
    }
    184e:	08 95       	ret

00001850 <test_pattern>:

void test_pattern(){
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    uint32_t row4 = 0x1F00000;
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    1860:	c0 e0       	ldi	r28, 0x00	; 0
    1862:	d0 e0       	ldi	r29, 0x00	; 0
    while(1){
        while(counter <0x0018){
    1864:	c8 31       	cpi	r28, 0x18	; 24
    1866:	d1 05       	cpc	r29, r1
    1868:	08 f4       	brcc	.+2      	; 0x186c <test_pattern+0x1c>
    186a:	60 c2       	rjmp	.+1216   	; 0x1d2c <test_pattern+0x4dc>
    186c:	c8 e1       	ldi	r28, 0x18	; 24
    186e:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	40 ee       	ldi	r20, 0xE0	; 224
    1874:	53 e0       	ldi	r21, 0x03	; 3
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	98 01       	movw	r18, r16
    1880:	cc 24       	eor	r12, r12
    1882:	dd 24       	eor	r13, r13
    1884:	76 01       	movw	r14, r12
    1886:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row1,0);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	ba 01       	movw	r22, r20
    1892:	00 ee       	ldi	r16, 0xE0	; 224
    1894:	13 e0       	ldi	r17, 0x03	; 3
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row1);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	ba 01       	movw	r22, r20
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	98 01       	movw	r18, r16
    18ac:	90 ee       	ldi	r25, 0xE0	; 224
    18ae:	c9 2e       	mov	r12, r25
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	d9 2e       	mov	r13, r25
    18b4:	e1 2c       	mov	r14, r1
    18b6:	f1 2c       	mov	r15, r1
    18b8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row1);
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	ba 01       	movw	r22, r20
    18c4:	00 e0       	ldi	r16, 0x00	; 0
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	98 01       	movw	r18, r16
    18ca:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row1,0,0);
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	40 ee       	ldi	r20, 0xE0	; 224
    18d2:	53 e0       	ldi	r21, 0x03	; 3
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	00 e0       	ldi	r16, 0x00	; 0
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	98 01       	movw	r18, r16
    18de:	cc 24       	eor	r12, r12
    18e0:	dd 24       	eor	r13, r13
    18e2:	76 01       	movw	r14, r12
    18e4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    18e8:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    18ec:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row0,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <test_pattern+0xa2>
    18f0:	bf cf       	rjmp	.-130    	; 0x1870 <test_pattern+0x20>
    18f2:	c8 e1       	ldi	r28, 0x18	; 24
    18f4:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	5c e7       	ldi	r21, 0x7C	; 124
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	98 01       	movw	r18, r16
    1906:	cc 24       	eor	r12, r12
    1908:	dd 24       	eor	r13, r13
    190a:	76 01       	movw	r14, r12
    190c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row2,0);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	ba 01       	movw	r22, r20
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	1c e7       	ldi	r17, 0x7C	; 124
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row2);
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	ba 01       	movw	r22, r20
    192c:	00 e0       	ldi	r16, 0x00	; 0
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	98 01       	movw	r18, r16
    1932:	c1 2c       	mov	r12, r1
    1934:	bc e7       	ldi	r27, 0x7C	; 124
    1936:	db 2e       	mov	r13, r27
    1938:	e1 2c       	mov	r14, r1
    193a:	f1 2c       	mov	r15, r1
    193c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row2);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	ba 01       	movw	r22, r20
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	98 01       	movw	r18, r16
    194e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row2,0,0);
    1952:	84 e0       	ldi	r24, 0x04	; 4
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	5c e7       	ldi	r21, 0x7C	; 124
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	98 01       	movw	r18, r16
    1962:	cc 24       	eor	r12, r12
    1964:	dd 24       	eor	r13, r13
    1966:	76 01       	movw	r14, r12
    1968:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    196c:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1970:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1972:	09 f0       	breq	.+2      	; 0x1976 <test_pattern+0x126>
    1974:	c0 cf       	rjmp	.-128    	; 0x18f6 <test_pattern+0xa6>
    1976:	c8 e1       	ldi	r28, 0x18	; 24
    1978:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e8       	ldi	r21, 0x80	; 128
    1980:	6f e0       	ldi	r22, 0x0F	; 15
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	00 e0       	ldi	r16, 0x00	; 0
    1986:	10 e0       	ldi	r17, 0x00	; 0
    1988:	98 01       	movw	r18, r16
    198a:	cc 24       	eor	r12, r12
    198c:	dd 24       	eor	r13, r13
    198e:	76 01       	movw	r14, r12
    1990:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row3,0);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	ba 01       	movw	r22, r20
    199c:	00 e0       	ldi	r16, 0x00	; 0
    199e:	10 e8       	ldi	r17, 0x80	; 128
    19a0:	2f e0       	ldi	r18, 0x0F	; 15
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row3);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	ba 01       	movw	r22, r20
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	98 01       	movw	r18, r16
    19b6:	c1 2c       	mov	r12, r1
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	da 2e       	mov	r13, r26
    19bc:	af e0       	ldi	r26, 0x0F	; 15
    19be:	ea 2e       	mov	r14, r26
    19c0:	f1 2c       	mov	r15, r1
    19c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row3);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	ba 01       	movw	r22, r20
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	98 01       	movw	r18, r16
    19d4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row3,0,0);
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e8       	ldi	r21, 0x80	; 128
    19de:	6f e0       	ldi	r22, 0x0F	; 15
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	00 e0       	ldi	r16, 0x00	; 0
    19e4:	10 e0       	ldi	r17, 0x00	; 0
    19e6:	98 01       	movw	r18, r16
    19e8:	cc 24       	eor	r12, r12
    19ea:	dd 24       	eor	r13, r13
    19ec:	76 01       	movw	r14, r12
    19ee:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    19f2:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    19f6:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    19f8:	09 f0       	breq	.+2      	; 0x19fc <test_pattern+0x1ac>
    19fa:	bf cf       	rjmp	.-130    	; 0x197a <test_pattern+0x12a>
    19fc:	c8 e1       	ldi	r28, 0x18	; 24
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
            leds(0,row4,0,0);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	60 ef       	ldi	r22, 0xF0	; 240
    1a08:	71 e0       	ldi	r23, 0x01	; 1
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
    1a0c:	10 e0       	ldi	r17, 0x00	; 0
    1a0e:	98 01       	movw	r18, r16
    1a10:	cc 24       	eor	r12, r12
    1a12:	dd 24       	eor	r13, r13
    1a14:	76 01       	movw	r14, r12
    1a16:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row4,0);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	ba 01       	movw	r22, r20
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	10 e0       	ldi	r17, 0x00	; 0
    1a26:	20 ef       	ldi	r18, 0xF0	; 240
    1a28:	31 e0       	ldi	r19, 0x01	; 1
    1a2a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row4);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	ba 01       	movw	r22, r20
    1a36:	00 e0       	ldi	r16, 0x00	; 0
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	98 01       	movw	r18, r16
    1a3c:	c1 2c       	mov	r12, r1
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	f0 ef       	ldi	r31, 0xF0	; 240
    1a42:	ef 2e       	mov	r14, r31
    1a44:	f1 e0       	ldi	r31, 0x01	; 1
    1a46:	ff 2e       	mov	r15, r31
    1a48:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row4);
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	ba 01       	movw	r22, r20
    1a54:	00 e0       	ldi	r16, 0x00	; 0
    1a56:	10 e0       	ldi	r17, 0x00	; 0
    1a58:	98 01       	movw	r18, r16
    1a5a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row4,0,0);
    1a5e:	84 e0       	ldi	r24, 0x04	; 4
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	60 ef       	ldi	r22, 0xF0	; 240
    1a66:	71 e0       	ldi	r23, 0x01	; 1
    1a68:	00 e0       	ldi	r16, 0x00	; 0
    1a6a:	10 e0       	ldi	r17, 0x00	; 0
    1a6c:	98 01       	movw	r18, r16
    1a6e:	cc 24       	eor	r12, r12
    1a70:	dd 24       	eor	r13, r13
    1a72:	76 01       	movw	r14, r12
    1a74:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1a78:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1a7c:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <test_pattern+0x232>
    1a80:	bf cf       	rjmp	.-130    	; 0x1a00 <test_pattern+0x1b0>
    1a82:	c8 e1       	ldi	r28, 0x18	; 24
    1a84:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e8       	ldi	r21, 0x80	; 128
    1a8c:	6f e0       	ldi	r22, 0x0F	; 15
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	98 01       	movw	r18, r16
    1a96:	cc 24       	eor	r12, r12
    1a98:	dd 24       	eor	r13, r13
    1a9a:	76 01       	movw	r14, r12
    1a9c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row3,0);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	ba 01       	movw	r22, r20
    1aa8:	00 e0       	ldi	r16, 0x00	; 0
    1aaa:	10 e8       	ldi	r17, 0x80	; 128
    1aac:	2f e0       	ldi	r18, 0x0F	; 15
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row3);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	ba 01       	movw	r22, r20
    1abc:	00 e0       	ldi	r16, 0x00	; 0
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	98 01       	movw	r18, r16
    1ac2:	c1 2c       	mov	r12, r1
    1ac4:	e0 e8       	ldi	r30, 0x80	; 128
    1ac6:	de 2e       	mov	r13, r30
    1ac8:	ef e0       	ldi	r30, 0x0F	; 15
    1aca:	ee 2e       	mov	r14, r30
    1acc:	f1 2c       	mov	r15, r1
    1ace:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row3);
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	ba 01       	movw	r22, r20
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	98 01       	movw	r18, r16
    1ae0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row3,0,0);
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e8       	ldi	r21, 0x80	; 128
    1aea:	6f e0       	ldi	r22, 0x0F	; 15
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	98 01       	movw	r18, r16
    1af4:	cc 24       	eor	r12, r12
    1af6:	dd 24       	eor	r13, r13
    1af8:	76 01       	movw	r14, r12
    1afa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1afe:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1b02:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row4,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <test_pattern+0x2b8>
    1b06:	bf cf       	rjmp	.-130    	; 0x1a86 <test_pattern+0x236>
    1b08:	c8 e1       	ldi	r28, 0x18	; 24
    1b0a:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	5c e7       	ldi	r21, 0x7C	; 124
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	00 e0       	ldi	r16, 0x00	; 0
    1b18:	10 e0       	ldi	r17, 0x00	; 0
    1b1a:	98 01       	movw	r18, r16
    1b1c:	cc 24       	eor	r12, r12
    1b1e:	dd 24       	eor	r13, r13
    1b20:	76 01       	movw	r14, r12
    1b22:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row2,0);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	ba 01       	movw	r22, r20
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	1c e7       	ldi	r17, 0x7C	; 124
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row2);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	ba 01       	movw	r22, r20
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	10 e0       	ldi	r17, 0x00	; 0
    1b46:	98 01       	movw	r18, r16
    1b48:	c1 2c       	mov	r12, r1
    1b4a:	9c e7       	ldi	r25, 0x7C	; 124
    1b4c:	d9 2e       	mov	r13, r25
    1b4e:	e1 2c       	mov	r14, r1
    1b50:	f1 2c       	mov	r15, r1
    1b52:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row2);
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	ba 01       	movw	r22, r20
    1b5e:	00 e0       	ldi	r16, 0x00	; 0
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	98 01       	movw	r18, r16
    1b64:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row2,0,0);
    1b68:	84 e0       	ldi	r24, 0x04	; 4
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	5c e7       	ldi	r21, 0x7C	; 124
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e0       	ldi	r17, 0x00	; 0
    1b76:	98 01       	movw	r18, r16
    1b78:	cc 24       	eor	r12, r12
    1b7a:	dd 24       	eor	r13, r13
    1b7c:	76 01       	movw	r14, r12
    1b7e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1b82:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1b86:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <test_pattern+0x33c>
    1b8a:	c0 cf       	rjmp	.-128    	; 0x1b0c <test_pattern+0x2bc>
    1b8c:	c8 e1       	ldi	r28, 0x18	; 24
    1b8e:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	40 ee       	ldi	r20, 0xE0	; 224
    1b94:	53 e0       	ldi	r21, 0x03	; 3
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	98 01       	movw	r18, r16
    1ba0:	cc 24       	eor	r12, r12
    1ba2:	dd 24       	eor	r13, r13
    1ba4:	76 01       	movw	r14, r12
    1ba6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row1,0);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	ba 01       	movw	r22, r20
    1bb2:	00 ee       	ldi	r16, 0xE0	; 224
    1bb4:	13 e0       	ldi	r17, 0x03	; 3
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row1);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	ba 01       	movw	r22, r20
    1bc6:	00 e0       	ldi	r16, 0x00	; 0
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	98 01       	movw	r18, r16
    1bcc:	b0 ee       	ldi	r27, 0xE0	; 224
    1bce:	cb 2e       	mov	r12, r27
    1bd0:	b3 e0       	ldi	r27, 0x03	; 3
    1bd2:	db 2e       	mov	r13, r27
    1bd4:	e1 2c       	mov	r14, r1
    1bd6:	f1 2c       	mov	r15, r1
    1bd8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row1);
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	ba 01       	movw	r22, r20
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	98 01       	movw	r18, r16
    1bea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row1,0,0);
    1bee:	84 e0       	ldi	r24, 0x04	; 4
    1bf0:	40 ee       	ldi	r20, 0xE0	; 224
    1bf2:	53 e0       	ldi	r21, 0x03	; 3
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	98 01       	movw	r18, r16
    1bfe:	cc 24       	eor	r12, r12
    1c00:	dd 24       	eor	r13, r13
    1c02:	76 01       	movw	r14, r12
    1c04:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1c08:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1c0c:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <test_pattern+0x3c2>
    1c10:	bf cf       	rjmp	.-130    	; 0x1b90 <test_pattern+0x340>
    1c12:	c8 e1       	ldi	r28, 0x18	; 24
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,plane,0,0);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	4f ef       	ldi	r20, 0xFF	; 255
    1c1a:	5f ef       	ldi	r21, 0xFF	; 255
    1c1c:	6f ef       	ldi	r22, 0xFF	; 255
    1c1e:	71 e0       	ldi	r23, 0x01	; 1
    1c20:	00 e0       	ldi	r16, 0x00	; 0
    1c22:	10 e0       	ldi	r17, 0x00	; 0
    1c24:	98 01       	movw	r18, r16
    1c26:	cc 24       	eor	r12, r12
    1c28:	dd 24       	eor	r13, r13
    1c2a:	76 01       	movw	r14, r12
    1c2c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,plane,0);
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	ba 01       	movw	r22, r20
    1c38:	0f ef       	ldi	r16, 0xFF	; 255
    1c3a:	1f ef       	ldi	r17, 0xFF	; 255
    1c3c:	2f ef       	ldi	r18, 0xFF	; 255
    1c3e:	31 e0       	ldi	r19, 0x01	; 1
    1c40:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,plane);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	ba 01       	movw	r22, r20
    1c4c:	00 e0       	ldi	r16, 0x00	; 0
    1c4e:	10 e0       	ldi	r17, 0x00	; 0
    1c50:	98 01       	movw	r18, r16
    1c52:	af ef       	ldi	r26, 0xFF	; 255
    1c54:	ca 2e       	mov	r12, r26
    1c56:	af ef       	ldi	r26, 0xFF	; 255
    1c58:	da 2e       	mov	r13, r26
    1c5a:	af ef       	ldi	r26, 0xFF	; 255
    1c5c:	ea 2e       	mov	r14, r26
    1c5e:	a1 e0       	ldi	r26, 0x01	; 1
    1c60:	fa 2e       	mov	r15, r26
    1c62:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,plane);
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	ba 01       	movw	r22, r20
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	10 e0       	ldi	r17, 0x00	; 0
    1c72:	98 01       	movw	r18, r16
    1c74:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,plane,0,0);
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	4f ef       	ldi	r20, 0xFF	; 255
    1c7c:	5f ef       	ldi	r21, 0xFF	; 255
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	71 e0       	ldi	r23, 0x01	; 1
    1c82:	00 e0       	ldi	r16, 0x00	; 0
    1c84:	10 e0       	ldi	r17, 0x00	; 0
    1c86:	98 01       	movw	r18, r16
    1c88:	cc 24       	eor	r12, r12
    1c8a:	dd 24       	eor	r13, r13
    1c8c:	76 01       	movw	r14, r12
    1c8e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1c92:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1c96:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <test_pattern+0x44c>
    1c9a:	bd cf       	rjmp	.-134    	; 0x1c16 <test_pattern+0x3c6>
    1c9c:	c8 e1       	ldi	r28, 0x18	; 24
    1c9e:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row0,0,0);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	4f e1       	ldi	r20, 0x1F	; 31
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	00 e0       	ldi	r16, 0x00	; 0
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	98 01       	movw	r18, r16
    1cb0:	cc 24       	eor	r12, r12
    1cb2:	dd 24       	eor	r13, r13
    1cb4:	76 01       	movw	r14, r12
    1cb6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row0,0);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	ba 01       	movw	r22, r20
    1cc2:	0f e1       	ldi	r16, 0x1F	; 31
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row0);
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	ba 01       	movw	r22, r20
    1cd6:	00 e0       	ldi	r16, 0x00	; 0
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	98 01       	movw	r18, r16
    1cdc:	ff e1       	ldi	r31, 0x1F	; 31
    1cde:	cf 2e       	mov	r12, r31
    1ce0:	d1 2c       	mov	r13, r1
    1ce2:	e1 2c       	mov	r14, r1
    1ce4:	f1 2c       	mov	r15, r1
    1ce6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row0);
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	ba 01       	movw	r22, r20
    1cf2:	00 e0       	ldi	r16, 0x00	; 0
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	98 01       	movw	r18, r16
    1cf8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row0,0,0);
    1cfc:	84 e0       	ldi	r24, 0x04	; 4
    1cfe:	4f e1       	ldi	r20, 0x1F	; 31
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	00 e0       	ldi	r16, 0x00	; 0
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	98 01       	movw	r18, r16
    1d0c:	cc 24       	eor	r12, r12
    1d0e:	dd 24       	eor	r13, r13
    1d10:	76 01       	movw	r14, r12
    1d12:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1d16:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1d1a:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,plane,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <test_pattern+0x4d0>
    1d1e:	c0 cf       	rjmp	.-128    	; 0x1ca0 <test_pattern+0x450>
            leds(1,0,row0,0);
            leds(2,0,0,row0);
            leds(3,0,0,row0);
            leds(4,row0,0,0);
            test_frame();
            counter++;
    1d20:	c8 e1       	ldi	r28, 0x18	; 24
    1d22:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(counter <0x0018){
    1d24:	c8 31       	cpi	r28, 0x18	; 24
    1d26:	d1 05       	cpc	r29, r1
    1d28:	08 f0       	brcs	.+2      	; 0x1d2c <test_pattern+0x4dc>
    1d2a:	a0 cd       	rjmp	.-1216   	; 0x186c <test_pattern+0x1c>
            leds(0,row0,0,0);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	4f e1       	ldi	r20, 0x1F	; 31
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	00 e0       	ldi	r16, 0x00	; 0
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	98 01       	movw	r18, r16
    1d3c:	cc 24       	eor	r12, r12
    1d3e:	dd 24       	eor	r13, r13
    1d40:	76 01       	movw	r14, r12
    1d42:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row0,0);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	ba 01       	movw	r22, r20
    1d4e:	0f e1       	ldi	r16, 0x1F	; 31
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row0);
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	ba 01       	movw	r22, r20
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	98 01       	movw	r18, r16
    1d68:	ef e1       	ldi	r30, 0x1F	; 31
    1d6a:	ce 2e       	mov	r12, r30
    1d6c:	d1 2c       	mov	r13, r1
    1d6e:	e1 2c       	mov	r14, r1
    1d70:	f1 2c       	mov	r15, r1
    1d72:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row0);
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	ba 01       	movw	r22, r20
    1d7e:	00 e0       	ldi	r16, 0x00	; 0
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	98 01       	movw	r18, r16
    1d84:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,row0,0,0);
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	4f e1       	ldi	r20, 0x1F	; 31
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	00 e0       	ldi	r16, 0x00	; 0
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	98 01       	movw	r18, r16
    1d98:	cc 24       	eor	r12, r12
    1d9a:	dd 24       	eor	r13, r13
    1d9c:	76 01       	movw	r14, r12
    1d9e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1da2:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
            counter++;
    1da6:	21 96       	adiw	r28, 0x01	; 1
    1da8:	5d cd       	rjmp	.-1350   	; 0x1864 <test_pattern+0x14>

00001daa <test_pattern1>:
            
        }
    }
}

void test_pattern1(){
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
    1db6:	80 91 5a 01 	lds	r24, 0x015A
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <test_pattern1+0x16>
    1dbe:	42 c0       	rjmp	.+132    	; 0x1e44 <test_pattern1+0x9a>
            leds(0,row0,0,0);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	4f e1       	ldi	r20, 0x1F	; 31
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	98 01       	movw	r18, r16
    1dd0:	cc 24       	eor	r12, r12
    1dd2:	dd 24       	eor	r13, r13
    1dd4:	76 01       	movw	r14, r12
    1dd6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row0,0);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	ba 01       	movw	r22, r20
    1de2:	0f e1       	ldi	r16, 0x1F	; 31
    1de4:	10 e0       	ldi	r17, 0x00	; 0
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row0);
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	ba 01       	movw	r22, r20
    1df6:	00 e0       	ldi	r16, 0x00	; 0
    1df8:	10 e0       	ldi	r17, 0x00	; 0
    1dfa:	98 01       	movw	r18, r16
    1dfc:	af e1       	ldi	r26, 0x1F	; 31
    1dfe:	ca 2e       	mov	r12, r26
    1e00:	d1 2c       	mov	r13, r1
    1e02:	e1 2c       	mov	r14, r1
    1e04:	f1 2c       	mov	r15, r1
    1e06:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row0);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	ba 01       	movw	r22, r20
    1e12:	00 e0       	ldi	r16, 0x00	; 0
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	98 01       	movw	r18, r16
    1e18:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,0,row0,0);
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	ba 01       	movw	r22, r20
    1e24:	0f e1       	ldi	r16, 0x1F	; 31
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	cc 24       	eor	r12, r12
    1e2e:	dd 24       	eor	r13, r13
    1e30:	76 01       	movw	r14, r12
    1e32:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1e36:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
    1e3a:	80 91 5a 01 	lds	r24, 0x015A
    1e3e:	88 23       	and	r24, r24
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <test_pattern1+0x9a>
    1e42:	be cf       	rjmp	.-132    	; 0x1dc0 <test_pattern1+0x16>
            leds(4,0,row1,0);
            test_frame();
            //counter++;
        }
        //counter = 0;
        next = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 5a 01 	sts	0x015A, r24
        while(counter <0x0018){
            leds(0,row2,0,0);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	5c e7       	ldi	r21, 0x7C	; 124
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	98 01       	movw	r18, r16
    1e5a:	cc 24       	eor	r12, r12
    1e5c:	dd 24       	eor	r13, r13
    1e5e:	76 01       	movw	r14, r12
    1e60:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(1,0,row2,0);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	ba 01       	movw	r22, r20
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	1c e7       	ldi	r17, 0x7C	; 124
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(2,0,0,row2);
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	ba 01       	movw	r22, r20
    1e80:	00 e0       	ldi	r16, 0x00	; 0
    1e82:	10 e0       	ldi	r17, 0x00	; 0
    1e84:	98 01       	movw	r18, r16
    1e86:	c1 2c       	mov	r12, r1
    1e88:	fc e7       	ldi	r31, 0x7C	; 124
    1e8a:	df 2e       	mov	r13, r31
    1e8c:	e1 2c       	mov	r14, r1
    1e8e:	f1 2c       	mov	r15, r1
    1e90:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(3,0,0,row2);
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	ba 01       	movw	r22, r20
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	98 01       	movw	r18, r16
    1ea2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            leds(4,0,row2,0);
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	ba 01       	movw	r22, r20
    1eae:	00 e0       	ldi	r16, 0x00	; 0
    1eb0:	1c e7       	ldi	r17, 0x7C	; 124
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	cc 24       	eor	r12, r12
    1eb8:	dd 24       	eor	r13, r13
    1eba:	76 01       	movw	r14, r12
    1ebc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
            test_frame();
    1ec0:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
    1ec4:	c2 cf       	rjmp	.-124    	; 0x1e4a <test_pattern1+0xa0>

00001ec6 <__vector_9>:
        //
		_delay_ms(10);
}
*/

ISR(TIMER1_OVF_vect){
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	8f 93       	push	r24
    1ed2:	9f 93       	push	r25
//
    static uint16_t counter = 0;
    if(counter >= 0x08){
    1ed4:	80 91 5b 01 	lds	r24, 0x015B
    1ed8:	90 91 5c 01 	lds	r25, 0x015C
    1edc:	88 30       	cpi	r24, 0x08	; 8
    1ede:	91 05       	cpc	r25, r1
    1ee0:	38 f0       	brcs	.+14     	; 0x1ef0 <__vector_9+0x2a>
        next = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 93 5a 01 	sts	0x015A, r24
        counter = 0;
    1ee8:	10 92 5c 01 	sts	0x015C, r1
    1eec:	10 92 5b 01 	sts	0x015B, r1
    }

}
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <test_xbee_pins>:

void test_xbee_pins(){

    PORTA |= ((1<<PA0)|(1<<PA1));
    1efe:	82 b1       	in	r24, 0x02	; 2
    1f00:	83 60       	ori	r24, 0x03	; 3
    1f02:	82 b9       	out	0x02, r24	; 2
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	94 e3       	ldi	r25, 0x34	; 52
    1f08:	ac e0       	ldi	r26, 0x0C	; 12
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	90 40       	sbci	r25, 0x00	; 0
    1f0e:	a0 40       	sbci	r26, 0x00	; 0
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <test_xbee_pins+0xc>
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <test_xbee_pins+0x16>
    1f14:	00 00       	nop
    _delay_ms(500);
    PORTA |= ((0<<PA0)|(0<<PA1));
    1f16:	82 b1       	in	r24, 0x02	; 2
    1f18:	82 b9       	out	0x02, r24	; 2

}
    1f1a:	08 95       	ret

00001f1c <probe_test>:

void probe_test(){
        LED_test(0,4,0);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	64 e0       	ldi	r22, 0x04	; 4
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LED_test>
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
}
    1f26:	08 95       	ret

00001f28 <test_protocol>:

void test_protocol(){
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    if(Receive(buffer,BUFFER_SIZE) == 1){
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	60 e2       	ldi	r22, 0x20	; 32
    1f3a:	0e 94 25 02 	call	0x44a	; 0x44a <Receive>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	69 f1       	breq	.+90     	; 0x1f9c <test_protocol+0x74>
    1f42:	8f e7       	ldi	r24, 0x7F	; 127
    1f44:	98 e3       	ldi	r25, 0x38	; 56
    1f46:	a1 e0       	ldi	r26, 0x01	; 1
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	90 40       	sbci	r25, 0x00	; 0
    1f4c:	a0 40       	sbci	r26, 0x00	; 0
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <test_protocol+0x20>
    1f50:	00 c0       	rjmp	.+0      	; 0x1f52 <test_protocol+0x2a>
    1f52:	00 00       	nop
    1f54:	8f e7       	ldi	r24, 0x7F	; 127
    1f56:	98 e3       	ldi	r25, 0x38	; 56
    1f58:	a1 e0       	ldi	r26, 0x01	; 1
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	90 40       	sbci	r25, 0x00	; 0
    1f5e:	a0 40       	sbci	r26, 0x00	; 0
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <test_protocol+0x32>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <test_protocol+0x3c>
    1f64:	00 00       	nop
        _delay_ms(50);
        //led_off();
    }
    //led_off();
    _delay_ms(50);
    leds(4,buffer[0],buffer[1],buffer[2]);
    1f66:	40 91 00 01 	lds	r20, 0x0100
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	00 91 01 01 	lds	r16, 0x0101
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	c0 90 02 01 	lds	r12, 0x0102
    1f7e:	dd 24       	eor	r13, r13
    1f80:	ee 24       	eor	r14, r14
    1f82:	ff 24       	eor	r15, r15
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <leds>
    test_frame();
    1f8a:	0e 94 06 0c 	call	0x180c	; 0x180c <test_frame>
}
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	08 95       	ret
    1f9c:	8f e7       	ldi	r24, 0x7F	; 127
    1f9e:	98 e3       	ldi	r25, 0x38	; 56
    1fa0:	a1 e0       	ldi	r26, 0x01	; 1
    1fa2:	81 50       	subi	r24, 0x01	; 1
    1fa4:	90 40       	sbci	r25, 0x00	; 0
    1fa6:	a0 40       	sbci	r26, 0x00	; 0
    1fa8:	e1 f7       	brne	.-8      	; 0x1fa2 <test_protocol+0x7a>
    1faa:	00 c0       	rjmp	.+0      	; 0x1fac <test_protocol+0x84>
    1fac:	00 00       	nop
    if(Receive(buffer,BUFFER_SIZE) == 1){
        //if((buffer[3] == 'l')){//}&&(buffer[31] == '}')){
        //led1_on();
        _delay_ms(50);
        //led_off();
        Transmit(buffer,BUFFER_SIZE);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	60 e2       	ldi	r22, 0x20	; 32
    1fb4:	0e 94 22 02 	call	0x444	; 0x444 <Transmit>
    1fb8:	cd cf       	rjmp	.-102    	; 0x1f54 <test_protocol+0x2c>

00001fba <main>:
/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    1fba:	84 b1       	in	r24, 0x04	; 4
    1fbc:	80 67       	ori	r24, 0x70	; 112
    1fbe:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
    1fc0:	85 b1       	in	r24, 0x05	; 5
    1fc2:	8f 60       	ori	r24, 0x0F	; 15
    1fc4:	85 b9       	out	0x05, r24	; 5
	spi_init();    //initalize SPI port
    1fc6:	0e 94 3b 11 	call	0x2276	; 0x2276 <spi_init>
    //initialize_interrupts();
	// Initialize AVR for use with mirf
	//mirf_init();
    init();
    1fca:	0e 94 0d 02 	call	0x41a	; 0x41a <init>
    1fce:	8f e7       	ldi	r24, 0x7F	; 127
    1fd0:	98 e3       	ldi	r25, 0x38	; 56
    1fd2:	a1 e0       	ldi	r26, 0x01	; 1
    1fd4:	81 50       	subi	r24, 0x01	; 1
    1fd6:	90 40       	sbci	r25, 0x00	; 0
    1fd8:	a0 40       	sbci	r26, 0x00	; 0
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <main+0x1a>
    1fdc:	00 c0       	rjmp	.+0      	; 0x1fde <main+0x24>
    1fde:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    sei();
    1fe0:	78 94       	sei
    init2();
    1fe2:	0e 94 19 02 	call	0x432	; 0x432 <init2>
	//mirf_read_register(STATUS, receive_buffer, 1);
	mirf_config();
    1fe6:	0e 94 8f 10 	call	0x211e	; 0x211e <mirf_config>
    1fea:	ff cf       	rjmp	.-2      	; 0x1fea <main+0x30>

00001fec <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
    1fec:	84 b1       	in	r24, 0x04	; 4
    1fee:	83 60       	ori	r24, 0x03	; 3
    1ff0:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB4); //Enable the interrupt pin as an input set to high since the IRQ is active low
    1ff2:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CE_lo;
    1ff4:	11 98       	cbi	0x02, 1	; 2
    mirf_CSN_hi;
    1ff6:	10 9a       	sbi	0x02, 0	; 2

#if defined(__AVR_ATtiny167__)
    // Initialize PCINT3 for ATtiny167
    PCICR |= (1<<PCIE0);
    1ff8:	e8 e6       	ldi	r30, 0x68	; 104
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	81 60       	ori	r24, 0x01	; 1
    2000:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT3);
    2002:	eb e6       	ldi	r30, 0x6B	; 107
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 60       	ori	r24, 0x08	; 8
    200a:	80 83       	st	Z, r24
	GIMSK |= (1<<PCIE);
	PCMSK |= (1<<PCINT4);
    */

    // Initialize spi module
    spi_init();
    200c:	0e 94 3b 11 	call	0x2276	; 0x2276 <spi_init>
}
    2010:	08 95       	ret

00002012 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2012:	80 91 69 01 	lds	r24, 0x0169
    2016:	88 23       	and	r24, r24
    2018:	11 f0       	breq	.+4      	; 0x201e <mirf_data_ready+0xc>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    201c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    201e:	10 98       	cbi	0x02, 0	; 2
    status = SPI_Receive();               // Read status register
    2020:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
    2024:	10 9a       	sbi	0x02, 0	; 2
    return status & (1<<RX_DR);
    2026:	80 74       	andi	r24, 0x40	; 64
    2028:	08 95       	ret

0000202a <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    2034:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    2036:	8f 71       	andi	r24, 0x1F	; 31
    2038:	80 62       	ori	r24, 0x20	; 32
    203a:	69 83       	std	Y+1, r22	; 0x01
    203c:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    SPI_Transmit(value);
    2040:	69 81       	ldd	r22, Y+1	; 0x01
    2042:	86 2f       	mov	r24, r22
    2044:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    mirf_CSN_hi;
    2048:	10 9a       	sbi	0x02, 0	; 2
}
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
    2058:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
    205a:	81 e6       	ldi	r24, 0x61	; 97
    205c:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
    2060:	ce 01       	movw	r24, r28
    2062:	be 01       	movw	r22, r28
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
    206a:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    206c:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_RX );     // Write cmd to flush tx fifo
    206e:	82 ee       	ldi	r24, 0xE2	; 226
    2070:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    2074:	10 9a       	sbi	0x02, 0	; 2
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
    2076:	87 e0       	ldi	r24, 0x07	; 7
    2078:	60 e4       	ldi	r22, 0x40	; 64
    207a:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <tx_complete>:
//    EIFR |= (1<<PCIF);
}

void tx_complete(void){
    uint8_t status;
    if (PTX) {
    2084:	80 91 69 01 	lds	r24, 0x0169
    2088:	88 23       	and	r24, r24
    208a:	81 f0       	breq	.+32     	; 0x20ac <tx_complete+0x28>
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    208c:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
    208e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    2092:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    2094:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	6b e4       	ldi	r22, 0x4B	; 75
    209a:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    209e:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    20a0:	10 92 69 01 	sts	0x0169, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    20a4:	87 e0       	ldi	r24, 0x07	; 7
    20a6:	60 e3       	ldi	r22, 0x30	; 48
    20a8:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
    }
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
    20ac:	d8 9a       	sbi	0x1b, 0	; 27
#endif // __AVR_ATmega168__  
}
    20ae:	08 95       	ret

000020b0 <__vector_3>:
#if defined(__AVR_ATtiny167__)
    ISR(PCINT0_vect)
#endif // __AVR_ATmega168__  
// Interrupt handler 
//ISR(PCINT_vect)
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	ef 93       	push	r30
    20d0:	ff 93       	push	r31
    //DDRD |= (1<<6);
    //PORTD |= (1<<6);
    //transmit_string("interupted\n");
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
    20d2:	80 91 69 01 	lds	r24, 0x0169
    20d6:	88 23       	and	r24, r24
    20d8:	81 f0       	breq	.+32     	; 0x20fa <__vector_3+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    20da:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
    20dc:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    20e0:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    20e2:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	6b e4       	ldi	r22, 0x4B	; 75
    20e8:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    20ec:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    20ee:	10 92 69 01 	sts	0x0169, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    20f2:	87 e0       	ldi	r24, 0x07	; 7
    20f4:	60 e3       	ldi	r22, 0x30	; 48
    20f6:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
//PORTD &= (~(1<<6));
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
    20fa:	d8 9a       	sbi	0x1b, 0	; 27
#endif // __AVR_ATmega168__  
//    EIFR |= (1<<PCIF);
}
    20fc:	ff 91       	pop	r31
    20fe:	ef 91       	pop	r30
    2100:	bf 91       	pop	r27
    2102:	af 91       	pop	r26
    2104:	9f 91       	pop	r25
    2106:	8f 91       	pop	r24
    2108:	7f 91       	pop	r23
    210a:	6f 91       	pop	r22
    210c:	5f 91       	pop	r21
    210e:	4f 91       	pop	r20
    2110:	3f 91       	pop	r19
    2112:	2f 91       	pop	r18
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti

0000211e <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
    211e:	85 e0       	ldi	r24, 0x05	; 5
    2120:	62 e0       	ldi	r22, 0x02	; 2
    2122:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
    2126:	81 e1       	ldi	r24, 0x11	; 17
    2128:	60 e2       	ldi	r22, 0x20	; 32
    212a:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
    //mirf_set_RADDR_P1(0xB3B4B5B6F1);
    //mirf_set_TADDR(0xB3B4B5B6F1);
    //mirf_set_TADDR(0x7878787878);

    // Start receiver 
    PTX = 0;        // Start in receiving mode
    212e:	10 92 69 01 	sts	0x0169, r1
    RX_POWERUP;     // Power up in receiving mode
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	6b e4       	ldi	r22, 0x4B	; 75
    2136:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
    213a:	11 9a       	sbi	0x02, 1	; 2
}
    213c:	08 95       	ret

0000213e <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    214e:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
    2150:	8f 71       	andi	r24, 0x1F	; 31
    2152:	49 83       	std	Y+1, r20	; 0x01
    2154:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    SPI_Transceive(value,value,len);
    2158:	c8 01       	movw	r24, r16
    215a:	b8 01       	movw	r22, r16
    215c:	49 81       	ldd	r20, Y+1	; 0x01
    215e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <SPI_Transceive>
    mirf_CSN_hi;
    2162:	10 9a       	sbi	0x02, 0	; 2
}
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    2180:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    2182:	8f 71       	andi	r24, 0x1F	; 31
    2184:	80 62       	ori	r24, 0x20	; 32
    2186:	49 83       	std	Y+1, r20	; 0x01
    2188:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    SPI_Transmit_All(value,len);
    218c:	c8 01       	movw	r24, r16
    218e:	49 81       	ldd	r20, Y+1	; 0x01
    2190:	64 2f       	mov	r22, r20
    2192:	0e 94 4b 11 	call	0x2296	; 0x2296 <SPI_Transmit_All>
    mirf_CSN_hi;
    2196:	10 9a       	sbi	0x02, 0	; 2
}
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	08 95       	ret

000021a4 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    21a4:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
    21a6:	80 e1       	ldi	r24, 0x10	; 16
    21a8:	45 e0       	ldi	r20, 0x05	; 5
    21aa:	0e 94 b8 10 	call	0x2170	; 0x2170 <mirf_write_register>
}
    21ae:	08 95       	ret

000021b0 <mirf_set_RADDR>:
    mirf_CE_hi;
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    21b0:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    21b2:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P0,adr,5);
    21b4:	8a e0       	ldi	r24, 0x0A	; 10
    21b6:	45 e0       	ldi	r20, 0x05	; 5
    21b8:	0e 94 b8 10 	call	0x2170	; 0x2170 <mirf_write_register>
    mirf_CE_hi;
    21bc:	11 9a       	sbi	0x02, 1	; 2
}
    21be:	08 95       	ret

000021c0 <mirf_set_RADDR_P1>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR_P1(uint8_t * adr) 
// Sets the receiving address
{
    21c0:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    21c2:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P1,adr,5);
    21c4:	8b e0       	ldi	r24, 0x0B	; 11
    21c6:	45 e0       	ldi	r20, 0x05	; 5
    21c8:	0e 94 b8 10 	call	0x2170	; 0x2170 <mirf_write_register>
    mirf_CE_hi;
    21cc:	11 9a       	sbi	0x02, 1	; 2
}
    21ce:	08 95       	ret

000021d0 <mirf_send>:


char mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	0f 92       	push	r0
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	8c 01       	movw	r16, r24
    21e4:	f6 2e       	mov	r15, r22

    // Save interrupt state and turn off interrupts
    uint8_t sreg_original = SREG;
    21e6:	ef b6       	in	r14, 0x3f	; 63
    cli ();
    21e8:	f8 94       	cli

    uint8_t status = 0;
    21ea:	19 82       	std	Y+1, r1	; 0x01
    mirf_read_register (STATUS, &status, 1);
    21ec:	87 e0       	ldi	r24, 0x07	; 7
    21ee:	be 01       	movw	r22, r28
    21f0:	6f 5f       	subi	r22, 0xFF	; 255
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 9f 10 	call	0x213e	; 0x213e <mirf_read_register>
    }
    #endif // __AVR_ATmega8__
    #if defined(__AVR_ATtiny167__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    21fa:	1b 99       	sbic	0x03, 3	; 3
    21fc:	15 c0       	rjmp	.+42     	; 0x2228 <mirf_send+0x58>
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	85 fd       	sbrc	r24, 5
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <mirf_send+0x50>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
    2204:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    2206:	80 91 69 01 	lds	r24, 0x0169
    220a:	88 23       	and	r24, r24
    220c:	a1 f0       	breq	.+40     	; 0x2236 <mirf_send+0x66>
    {
        return -1; 
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    //USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
    //USART_Transmit('q');
    return 0;
}
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	08 95       	ret
    }
    #endif // __AVR_ATmega8__
    #if defined(__AVR_ATtiny167__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    2220:	80 91 69 01 	lds	r24, 0x0169
    2224:	88 23       	and	r24, r24
    2226:	71 f3       	breq	.-36     	; 0x2204 <mirf_send+0x34>
    {
        tx_complete();
    2228:	0e 94 42 10 	call	0x2084	; 0x2084 <tx_complete>
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
    222c:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    222e:	80 91 69 01 	lds	r24, 0x0169
    2232:	88 23       	and	r24, r24
    2234:	61 f7       	brne	.-40     	; 0x220e <mirf_send+0x3e>
        return -1; 
    }
//    while (PTX) {}                  // Wait until last paket is send

    //USART_Transmit('h');
    mirf_CE_lo;
    2236:	11 98       	cbi	0x02, 1	; 2

    PTX = 1;                        // Set to transmitter mode
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 69 01 	sts	0x0169, r24
    TX_POWERUP;                     // Power up
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	6a e4       	ldi	r22, 0x4A	; 74
    2242:	0e 94 15 10 	call	0x202a	; 0x202a <mirf_config_register>
    
    //USART_Transmit('h');
    mirf_CSN_lo;                    // Pull down chip select
    2246:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
    2248:	81 ee       	ldi	r24, 0xE1	; 225
    224a:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    224e:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    2250:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
    2252:	80 ea       	ldi	r24, 0xA0	; 160
    2254:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_Transmit>
    //USART_Transmit('h');
    //SPI_Transmit_All(testbuffer,16);
    SPI_Transmit_All(value,len);   // Write payload
    2258:	c8 01       	movw	r24, r16
    225a:	6f 2d       	mov	r22, r15
    225c:	0e 94 4b 11 	call	0x2296	; 0x2296 <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
    2260:	10 9a       	sbi	0x02, 0	; 2
    //USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
    2262:	11 9a       	sbi	0x02, 1	; 2
    //USART_Transmit('q');
    return 0;
    2264:	80 e0       	ldi	r24, 0x00	; 0
}
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	08 95       	ret

00002276 <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    2276:	81 b1       	in	r24, 0x01	; 1
    2278:	80 67       	ori	r24, 0x70	; 112
    227a:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
    227c:	8c b5       	in	r24, 0x2c	; 44
    227e:	80 65       	ori	r24, 0x50	; 80
    2280:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    2282:	8d b5       	in	r24, 0x2d	; 45
    2284:	81 60       	ori	r24, 0x01	; 1
    2286:	8d bd       	out	0x2d, r24	; 45


}
    2288:	08 95       	ret

0000228a <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    228a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    228c:	0d b4       	in	r0, 0x2d	; 45
    228e:	07 fe       	sbrs	r0, 7
    2290:	fd cf       	rjmp	.-6      	; 0x228c <SPI_Transmit+0x2>
	return SPDR;
    2292:	8e b5       	in	r24, 0x2e	; 46
}
    2294:	08 95       	ret

00002296 <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    2296:	66 23       	and	r22, r22
    2298:	61 f0       	breq	.+24     	; 0x22b2 <SPI_Transmit_All+0x1c>
    229a:	e8 2f       	mov	r30, r24
    229c:	f9 2f       	mov	r31, r25
    229e:	80 e0       	ldi	r24, 0x00	; 0
        SPI_Transmit(data[i]);
    22a0:	91 91       	ld	r25, Z+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    22a2:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    22a4:	0d b4       	in	r0, 0x2d	; 45
    22a6:	07 fe       	sbrs	r0, 7
    22a8:	fd cf       	rjmp	.-6      	; 0x22a4 <SPI_Transmit_All+0xe>
	return SPDR;
    22aa:	9e b5       	in	r25, 0x2e	; 46
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	86 17       	cp	r24, r22
    22b0:	b8 f3       	brcs	.-18     	; 0x22a0 <SPI_Transmit_All+0xa>
    22b2:	08 95       	ret

000022b4 <SPI_Receive>:
        SPI_Transmit(data[i]);
    }
}

char SPI_Receive(void){
    SPDR = 0x00;
    22b4:	1e bc       	out	0x2e, r1	; 46
    while(bit_is_clear(SPSR,SPIF)){};
    22b6:	0d b4       	in	r0, 0x2d	; 45
    22b8:	07 fe       	sbrs	r0, 7
    22ba:	fd cf       	rjmp	.-6      	; 0x22b6 <SPI_Receive+0x2>
    return SPDR;
    22bc:	8e b5       	in	r24, 0x2e	; 46
}
    22be:	08 95       	ret

000022c0 <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    22c0:	e8 2f       	mov	r30, r24
    22c2:	f9 2f       	mov	r31, r25
    22c4:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
    22c6:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
    22c8:	0d b4       	in	r0, 0x2d	; 45
    22ca:	07 fe       	sbrs	r0, 7
    22cc:	fd cf       	rjmp	.-6      	; 0x22c8 <SPI_Receive_All+0x8>
        data[i] = SPDR;
    22ce:	9e b5       	in	r25, 0x2e	; 46
    22d0:	91 93       	st	Z+, r25
    22d2:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
    22d4:	c1 f7       	brne	.-16     	; 0x22c6 <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
    22d6:	08 95       	ret

000022d8 <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    22d8:	44 23       	and	r20, r20
    22da:	79 f0       	breq	.+30     	; 0x22fa <SPI_Transceive+0x22>
    22dc:	a8 2f       	mov	r26, r24
    22de:	b9 2f       	mov	r27, r25
    22e0:	e6 2f       	mov	r30, r22
    22e2:	f7 2f       	mov	r31, r23
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    22e6:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    22e8:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    22ea:	0d b4       	in	r0, 0x2d	; 45
    22ec:	07 fe       	sbrs	r0, 7
    22ee:	fd cf       	rjmp	.-6      	; 0x22ea <SPI_Transceive+0x12>
	return SPDR;
    22f0:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    22f2:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	84 17       	cp	r24, r20
    22f8:	b0 f3       	brcs	.-20     	; 0x22e6 <SPI_Transceive+0xe>
    22fa:	08 95       	ret

000022fc <__udivmodqi4>:
    22fc:	99 1b       	sub	r25, r25
    22fe:	79 e0       	ldi	r23, 0x09	; 9
    2300:	04 c0       	rjmp	.+8      	; 0x230a <__udivmodqi4_ep>

00002302 <__udivmodqi4_loop>:
    2302:	99 1f       	adc	r25, r25
    2304:	96 17       	cp	r25, r22
    2306:	08 f0       	brcs	.+2      	; 0x230a <__udivmodqi4_ep>
    2308:	96 1b       	sub	r25, r22

0000230a <__udivmodqi4_ep>:
    230a:	88 1f       	adc	r24, r24
    230c:	7a 95       	dec	r23
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__udivmodqi4_loop>
    2310:	80 95       	com	r24
    2312:	08 95       	ret

00002314 <_exit>:
    2314:	f8 94       	cli

00002316 <__stop_program>:
    2316:	ff cf       	rjmp	.-2      	; 0x2316 <__stop_program>
