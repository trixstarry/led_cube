
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00002196  0000222a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800162  00800162  0000228c  2**0
                  ALLOC
  3 .stab         00002a60  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f58  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__ctors_end>
       4:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
       8:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
       c:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_3>
      10:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      14:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      18:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      1c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      20:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      24:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      28:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      2c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      30:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      34:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      38:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      3c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      40:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      44:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      48:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>
      4c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__bad_interrupt>

00000050 <R>:
      50:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      68:	00 01 00 00 00 00 00 00 00 00 08 00 00 00 00 00     ................
      78:	00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00     ................
      88:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
      98:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
      b0:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
      cc:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
      dc:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
      ec:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
      fc:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     10c:	40 00 00 00 00 00 00 00 00 00 02 00 08 00 00 00     @...............
     11c:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     134:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     144:	00 00 00 00 00 40                                   .....@

0000014a <G>:
     14a:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     162:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     172:	00 00 00 00 02 00 00 00 00 00 00 00 08 00 00 00     ................
     182:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     1aa:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     1c6:	00 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     1d6:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     1e6:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     1f6:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     206:	20 00 00 00 00 00 00 00 00 00 04 00 04 00 00 00      ...............
     216:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     22e:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     23e:	00 00 00 00 00 80                                   ......

00000244 <B>:
     244:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     25c:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     26c:	00 00 00 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
     27c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     2a4:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     2c0:	00 00 04 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     2d0:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     2e0:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     2f0:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     300:	10 00 00 00 00 00 00 00 00 00 08 00 02 00 00 00     ................
     310:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     328:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     338:	00 00 00 00 01 00                                   ......

0000033e <off>:
	...

0000037a <patterns>:
	...
     3b6:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     3c6:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     3d6:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     3e6:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
	...
     3fe:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     416:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     432:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     44a:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     462:	ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     472:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     48a:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     4a2:	ff ff ff 01 04 00 00 00 00 00 00 00 00 00 00 00     ................
     4b2:	04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00     ................
	...
     4ca:	04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00     ................
	...
     4e2:	00 04 00 00 00 00 00 00 00 00 00 00 00 04 00 00     ................
	...
     4fa:	00 04 00 00 00 00 00 00 00 00 00 00 00 04 00 00     ................
	...
     512:	00 04 00 00 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     52a:	00 40 00 00 00 00 00 00 00 00 00 00 00 40 00 00     .@...........@..
	...
     542:	00 40 00 00 00 00 00 00 00 00 00 00 00 40 00 00     .@...........@..
	...
     55a:	00 00 40 00 00 00 00 00 00 00 00 00 00 00 40 00     ..@...........@.
	...
     572:	00 00 40 00 00 00 00 00 00 00 00 00 00 00 40 00     ..@...........@.
	...
     58a:	00 00 40 00 00 00 00 00 00 00 00 00 80 00 00 00     ..@.............
	...
     5a2:	80 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00     ................
	...
     5ba:	80 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00     ................
	...
     5d2:	00 08 00 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
	...
     5ea:	00 08 00 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
	...
     602:	00 08 00 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
     61a:	00 10 00 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
     632:	00 10 00 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
     64a:	00 20 00 00 00 00 00 00 00 00 00 00 00 20 00 00     . ........... ..
	...
     662:	00 20 00 00 00 00 00 00 00 00 00 00 00 20 00 00     . ........... ..
	...
     67a:	00 20 00 00 00 00 00 00 00 00 00 00 00 00 02 00     . ..............
	...
     692:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 02 00     ................
	...
     6aa:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 02 00     ................
	...
     6c2:	00 7c 00 00 00 7c 00 00 00 7c 00 00 00 7c 00 00     .|...|...|...|..
     6d2:	00 7c 00 00 00 7c 00 00 00 7c 00 00 00 7c 00 00     .|...|...|...|..
     6e2:	00 7c 00 00 00 7c 00 00 00 7c 00 00 00 7c 00 00     .|...|...|...|..
     6f2:	00 7c 00 00 00 7c 00 00 00 7c 00 00 10 11 11 00     .|...|...|......
     702:	00 00 00 00 10 11 11 00 10 11 11 00 00 00 00 00     ................
     712:	10 11 11 00 10 11 11 00 00 00 00 00 10 11 11 00     ................
     722:	10 11 11 00 00 00 00 00 10 11 11 00 10 11 11 00     ................
     732:	00 00 00 00 10 11 11 00 00 00 00 00 84 10 42 00     ..............B.
     742:	84 10 42 00 00 00 00 00 84 10 42 00 84 10 42 00     ..B.......B...B.
     752:	00 00 00 00 84 10 42 00 84 10 42 00 00 00 00 00     ......B...B.....
     762:	84 10 42 00 84 10 42 00 00 00 00 00 84 10 42 00     ..B...B.......B.
     772:	84 10 42 00 00 00 00 00 00 00 00 00 41 10 04 01     ..B.........A...
	...
     78a:	41 10 04 01 00 00 00 00 00 00 00 00 41 10 04 01     A...........A...
	...
     7a2:	41 10 04 01 00 00 00 00 00 00 00 00 41 10 04 01     A...........A...
     7b2:	c0 39 07 00 c0 39 07 00 c0 39 07 00 c0 39 07 00     .9...9...9...9..
     7c2:	c0 39 07 00 c0 39 07 00 c0 39 07 00 c0 39 07 00     .9...9...9...9..
     7d2:	c0 39 07 00 c0 39 07 00 c0 39 07 00 c0 39 07 00     .9...9...9...9..
     7e2:	c0 39 07 00 c0 39 07 00 c0 39 07 00 3f c6 00 00     .9...9...9..?...
     7f2:	3f c6 00 00 3f c6 00 00 3f c6 00 00 3f c6 00 00     ?...?...?...?...
     802:	3f c6 00 00 3f c6 00 00 3f c6 00 00 3f c6 00 00     ?...?...?...?...
     812:	3f c6 00 00 3f c6 00 00 3f c6 00 00 3f c6 00 00     ?...?...?...?...
     822:	3f c6 00 00 3f c6 00 00 1f 00 00 00 00 00 00 00     ?...?...........
     832:	00 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00     ................
     842:	1f 00 00 00 00 00 00 00 00 00 00 00 1f 00 00 00     ................
	...
     85a:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     86a:	e0 03 00 00 00 00 00 00 00 00 00 00 e0 03 00 00     ................
	...
     882:	e0 03 00 00 00 00 00 00 00 00 00 00 e0 03 00 00     ................
	...
     89a:	e0 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8aa:	00 7c 00 00 00 00 00 00 00 00 00 00 00 7c 00 00     .|...........|..
	...
     8c2:	00 7c 00 00 00 00 00 00 00 00 00 00 00 7c 00 00     .|...........|..
	...
     8da:	00 7c 00 00 00 80 0f 00 00 80 0f 00 00 00 00 00     .|..............
     8ea:	00 80 0f 00 00 80 0f 00 00 00 00 00 00 80 0f 00     ................
     8fa:	00 80 0f 00 00 00 00 00 00 80 0f 00 00 80 0f 00     ................
     90a:	00 00 00 00 00 80 0f 00 00 80 0f 00 00 00 00 00     ................
     91a:	00 00 00 00 00 00 f0 01 00 00 f0 01 00 00 00 00     ................
     92a:	00 00 f0 01 00 00 f0 01 00 00 00 00 00 00 f0 01     ................
     93a:	00 00 f0 01 00 00 00 00 00 00 f0 01 00 00 f0 01     ................
     94a:	00 00 00 00 00 00 f0 01 00 00 f0 01                 ............

00000956 <on>:
     956:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     966:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     976:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     986:	ff ff ff 01 ff ff ff 01 ff ff ff 01                 ............

00000992 <pattern1>:
     992:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     9aa:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     9c2:	ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9d2:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     9ea:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     a02:	ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a12:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     a2a:	ff ff ff 01 00 00 00 00 00 00 00 00 ff ff ff 01     ................
	...
     a42:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     a52:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     a62:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
     a72:	ff ff ff 01 ff ff ff 01 ff ff ff 01 ff ff ff 01     ................
	...

00000abe <pattern2>:
     abe:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     afa:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     b36:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     b72:	08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     bae:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000bea <pattern3>:
     bea:	04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00     ................
	...
     c02:	04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00     ................
	...
     c1a:	04 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00     ................
	...
     c32:	00 04 00 00 00 00 00 00 00 00 00 00 00 04 00 00     ................
	...
     c4a:	00 04 00 00 00 00 00 00 00 00 00 00 00 04 00 00     ................
	...
     c62:	00 40 00 00 00 00 00 00 00 00 00 00 00 40 00 00     .@...........@..
	...
     c7a:	00 40 00 00 00 00 00 00 00 00 00 00 00 40 00 00     .@...........@..
	...
     c92:	00 40 00 00 00 00 00 00 00 00 00 00 00 00 40 00     .@............@.
	...
     caa:	00 00 40 00 00 00 00 00 00 00 00 00 00 00 40 00     ..@...........@.
	...
     cc2:	00 00 40 00 00 00 00 00 00 00 00 00 00 00 40 00     ..@...........@.
	...

00000d16 <__ctors_end>:
     d16:	11 24       	eor	r1, r1
     d18:	1f be       	out	0x3f, r1	; 63
     d1a:	ce ef       	ldi	r28, 0xFE	; 254
     d1c:	d2 e0       	ldi	r29, 0x02	; 2
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	cd bf       	out	0x3d, r28	; 61

00000d22 <__do_copy_data>:
     d22:	11 e0       	ldi	r17, 0x01	; 1
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	e6 e9       	ldi	r30, 0x96	; 150
     d2a:	f1 e2       	ldi	r31, 0x21	; 33
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__do_copy_data+0x10>
     d2e:	05 90       	lpm	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	a2 36       	cpi	r26, 0x62	; 98
     d34:	b1 07       	cpc	r27, r17
     d36:	d9 f7       	brne	.-10     	; 0xd2e <__do_copy_data+0xc>

00000d38 <__do_clear_bss>:
     d38:	11 e0       	ldi	r17, 0x01	; 1
     d3a:	a2 e6       	ldi	r26, 0x62	; 98
     d3c:	b1 e0       	ldi	r27, 0x01	; 1
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <.do_clear_bss_start>

00000d40 <.do_clear_bss_loop>:
     d40:	1d 92       	st	X+, r1

00000d42 <.do_clear_bss_start>:
     d42:	a4 3a       	cpi	r26, 0xA4	; 164
     d44:	b1 07       	cpc	r27, r17
     d46:	e1 f7       	brne	.-8      	; 0xd40 <.do_clear_bss_loop>
     d48:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <main>
     d4c:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <_exit>

00000d50 <__bad_interrupt>:
     d50:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d54 <level>:
uint8_t item = 0;
uint8_t frame_num = 0;


void level(uint8_t layer){
    switch(layer){
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	f1 f0       	breq	.+60     	; 0xd94 <level+0x40>
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <level+0x18>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	f9 f0       	breq	.+62     	; 0xd9e <level+0x4a>
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	99 f0       	breq	.+38     	; 0xd8a <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     d64:	85 b1       	in	r24, 0x05	; 5
     d66:	80 67       	ori	r24, 0x70	; 112
     d68:	85 b9       	out	0x05, r24	; 5
     d6a:	08 95       	ret
uint8_t item = 0;
uint8_t frame_num = 0;


void level(uint8_t layer){
    switch(layer){
     d6c:	88 23       	and	r24, r24
     d6e:	39 f0       	breq	.+14     	; 0xd7e <level+0x2a>
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	c1 f7       	brne	.-16     	; 0xd64 <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     d74:	85 b1       	in	r24, 0x05	; 5
     d76:	8f 78       	andi	r24, 0x8F	; 143
     d78:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     d7a:	2c 9a       	sbi	0x05, 4	; 5
            return;
     d7c:	08 95       	ret


void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     d7e:	85 b1       	in	r24, 0x05	; 5
     d80:	8f 78       	andi	r24, 0x8F	; 143
     d82:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     d84:	85 b1       	in	r24, 0x05	; 5
     d86:	85 b9       	out	0x05, r24	; 5
            return;
     d88:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     d8a:	85 b1       	in	r24, 0x05	; 5
     d8c:	8f 78       	andi	r24, 0x8F	; 143
     d8e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     d90:	2e 9a       	sbi	0x05, 6	; 5
            return;
     d92:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     d94:	85 b1       	in	r24, 0x05	; 5
     d96:	8f 78       	andi	r24, 0x8F	; 143
     d98:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     d9a:	2d 9a       	sbi	0x05, 5	; 5
            return;
     d9c:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     d9e:	85 b1       	in	r24, 0x05	; 5
     da0:	8f 78       	andi	r24, 0x8F	; 143
     da2:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     da4:	85 b1       	in	r24, 0x05	; 5
     da6:	80 63       	ori	r24, 0x30	; 48
     da8:	85 b9       	out	0x05, r24	; 5
            return;
     daa:	08 95       	ret

00000dac <red_led>:
    _delay_ms(100);
    //_delay_us(300);
}
*/

void red_led(uint8_t layer,uint32_t red){
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	7a 01       	movw	r14, r20
     dbc:	8b 01       	movw	r16, r22
     dbe:	40 e5       	ldi	r20, 0x50	; 80
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	ec 01       	movw	r28, r24
     dca:	cc 0f       	add	r28, r28
     dcc:	dd 1f       	adc	r29, r29
     dce:	cc 0f       	add	r28, r28
     dd0:	dd 1f       	adc	r29, r29
     dd2:	c8 0f       	add	r28, r24
     dd4:	d9 1f       	adc	r29, r25
     dd6:	cc 0f       	add	r28, r28
     dd8:	dd 1f       	adc	r29, r29
     dda:	ce 59       	subi	r28, 0x9E	; 158
     ddc:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
     dde:	d8 01       	movw	r26, r16
     de0:	c7 01       	movw	r24, r14
     de2:	02 2e       	mov	r0, r18
     de4:	04 c0       	rjmp	.+8      	; 0xdee <red_led+0x42>
     de6:	b6 95       	lsr	r27
     de8:	a7 95       	ror	r26
     dea:	97 95       	ror	r25
     dec:	87 95       	ror	r24
     dee:	0a 94       	dec	r0
     df0:	d2 f7       	brpl	.-12     	; 0xde6 <red_led+0x3a>
        if(state){
     df2:	80 ff       	sbrs	r24, 0
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <red_led+0x6e>
    _delay_ms(100);
    //_delay_us(300);
}
*/

void red_led(uint8_t layer,uint32_t red){
     df6:	de 01       	movw	r26, r28
     df8:	ca 01       	movw	r24, r20
     dfa:	65 e0       	ldi	r22, 0x05	; 5
     dfc:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
     dfe:	fc 01       	movw	r30, r24
     e00:	65 91       	lpm	r22, Z+
     e02:	74 91       	lpm	r23, Z+
     e04:	ed 91       	ld	r30, X+
     e06:	fc 91       	ld	r31, X
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	e6 2b       	or	r30, r22
     e0c:	f7 2b       	or	r31, r23
     e0e:	ed 93       	st	X+, r30
     e10:	fd 93       	st	X+, r31
     e12:	da 94       	dec	r13
     e14:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
     e16:	dd 20       	and	r13, r13
     e18:	91 f7       	brne	.-28     	; 0xdfe <red_led+0x52>
     e1a:	2f 5f       	subi	r18, 0xFF	; 255
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	46 5f       	subi	r20, 0xF6	; 246
     e20:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     e22:	29 31       	cpi	r18, 0x19	; 25
     e24:	31 05       	cpc	r19, r1
     e26:	d9 f6       	brne	.-74     	; 0xdde <red_led+0x32>
            }
        }
    }
    
//
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	08 95       	ret

00000e38 <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	7a 01       	movw	r14, r20
     e48:	8b 01       	movw	r16, r22
     e4a:	44 e4       	ldi	r20, 0x44	; 68
     e4c:	52 e0       	ldi	r21, 0x02	; 2
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	ec 01       	movw	r28, r24
     e56:	cc 0f       	add	r28, r28
     e58:	dd 1f       	adc	r29, r29
     e5a:	cc 0f       	add	r28, r28
     e5c:	dd 1f       	adc	r29, r29
     e5e:	c8 0f       	add	r28, r24
     e60:	d9 1f       	adc	r29, r25
     e62:	cc 0f       	add	r28, r28
     e64:	dd 1f       	adc	r29, r29
     e66:	ce 59       	subi	r28, 0x9E	; 158
     e68:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
     e6a:	d8 01       	movw	r26, r16
     e6c:	c7 01       	movw	r24, r14
     e6e:	02 2e       	mov	r0, r18
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <blue_led+0x42>
     e72:	b6 95       	lsr	r27
     e74:	a7 95       	ror	r26
     e76:	97 95       	ror	r25
     e78:	87 95       	ror	r24
     e7a:	0a 94       	dec	r0
     e7c:	d2 f7       	brpl	.-12     	; 0xe72 <blue_led+0x3a>
        if(state){
     e7e:	80 ff       	sbrs	r24, 0
     e80:	12 c0       	rjmp	.+36     	; 0xea6 <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
     e82:	de 01       	movw	r26, r28
     e84:	ca 01       	movw	r24, r20
     e86:	f5 e0       	ldi	r31, 0x05	; 5
     e88:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
     e8a:	fc 01       	movw	r30, r24
     e8c:	65 91       	lpm	r22, Z+
     e8e:	74 91       	lpm	r23, Z+
     e90:	ed 91       	ld	r30, X+
     e92:	fc 91       	ld	r31, X
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	e6 2b       	or	r30, r22
     e98:	f7 2b       	or	r31, r23
     e9a:	ed 93       	st	X+, r30
     e9c:	fd 93       	st	X+, r31
     e9e:	da 94       	dec	r13
     ea0:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     ea2:	dd 20       	and	r13, r13
     ea4:	91 f7       	brne	.-28     	; 0xe8a <blue_led+0x52>
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	46 5f       	subi	r20, 0xF6	; 246
     eac:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     eae:	29 31       	cpi	r18, 0x19	; 25
     eb0:	31 05       	cpc	r19, r1
     eb2:	d9 f6       	brne	.-74     	; 0xe6a <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	08 95       	ret

00000ec4 <green_led>:

void green_led(uint8_t layer,uint32_t green){
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	7a 01       	movw	r14, r20
     ed4:	8b 01       	movw	r16, r22
     ed6:	4a e4       	ldi	r20, 0x4A	; 74
     ed8:	51 e0       	ldi	r21, 0x01	; 1
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	ec 01       	movw	r28, r24
     ee2:	cc 0f       	add	r28, r28
     ee4:	dd 1f       	adc	r29, r29
     ee6:	cc 0f       	add	r28, r28
     ee8:	dd 1f       	adc	r29, r29
     eea:	c8 0f       	add	r28, r24
     eec:	d9 1f       	adc	r29, r25
     eee:	cc 0f       	add	r28, r28
     ef0:	dd 1f       	adc	r29, r29
     ef2:	ce 59       	subi	r28, 0x9E	; 158
     ef4:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
     ef6:	d8 01       	movw	r26, r16
     ef8:	c7 01       	movw	r24, r14
     efa:	02 2e       	mov	r0, r18
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <green_led+0x42>
     efe:	b6 95       	lsr	r27
     f00:	a7 95       	ror	r26
     f02:	97 95       	ror	r25
     f04:	87 95       	ror	r24
     f06:	0a 94       	dec	r0
     f08:	d2 f7       	brpl	.-12     	; 0xefe <green_led+0x3a>
        if(state){
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	12 c0       	rjmp	.+36     	; 0xf32 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
     f0e:	de 01       	movw	r26, r28
     f10:	ca 01       	movw	r24, r20
     f12:	65 e0       	ldi	r22, 0x05	; 5
     f14:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
     f16:	fc 01       	movw	r30, r24
     f18:	65 91       	lpm	r22, Z+
     f1a:	74 91       	lpm	r23, Z+
     f1c:	ed 91       	ld	r30, X+
     f1e:	fc 91       	ld	r31, X
     f20:	11 97       	sbiw	r26, 0x01	; 1
     f22:	e6 2b       	or	r30, r22
     f24:	f7 2b       	or	r31, r23
     f26:	ed 93       	st	X+, r30
     f28:	fd 93       	st	X+, r31
     f2a:	da 94       	dec	r13
     f2c:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     f2e:	dd 20       	and	r13, r13
     f30:	91 f7       	brne	.-28     	; 0xf16 <green_led+0x52>
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	46 5f       	subi	r20, 0xF6	; 246
     f38:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     f3a:	29 31       	cpi	r18, 0x19	; 25
     f3c:	31 05       	cpc	r19, r1
     f3e:	d9 f6       	brne	.-74     	; 0xef6 <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	08 95       	ret

00000f50 <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	b8 2e       	mov	r11, r24
     f68:	38 01       	movw	r6, r16
     f6a:	49 01       	movw	r8, r18
    ///frame[layer][0] = 0;
    //frame[layer][1] = 0;
    //frame[layer][2] = 0;
    //frame[layer][3] = 0;
    //frame[layer][4] = 0;
    red_led(layer,red);
     f6c:	0e 94 d6 06 	call	0xdac	; 0xdac <red_led>
    blue_led(layer,blue);
     f70:	8b 2d       	mov	r24, r11
     f72:	b4 01       	movw	r22, r8
     f74:	a3 01       	movw	r20, r6
     f76:	0e 94 1c 07 	call	0xe38	; 0xe38 <blue_led>
    green_led(layer,green);
     f7a:	8b 2d       	mov	r24, r11
     f7c:	b7 01       	movw	r22, r14
     f7e:	a6 01       	movw	r20, r12
     f80:	0e 94 62 07 	call	0xec4	; 0xec4 <green_led>
}
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	08 95       	ret

00000f9c <pattern>:
            _delay_ms(100);
    }
}
*/

void pattern(uint8_t selection,uint8_t num){
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29

    
    //Load Pattern into frame
    //Appears frame is not cleared when loaded to drivers. Create a flag and only load a new frame from memory when
    //a new frame appears.
    leds(0,pgm_read_dword(&(patterns[num][0][red])),pgm_read_dword(&(patterns[num][0][blue])),pgm_read_dword(&(patterns[num][0][green])));
     fb4:	86 2f       	mov	r24, r22
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	ec 01       	movw	r28, r24
     fba:	c2 95       	swap	r28
     fbc:	d2 95       	swap	r29
     fbe:	d0 7f       	andi	r29, 0xF0	; 240
     fc0:	dc 27       	eor	r29, r28
     fc2:	c0 7f       	andi	r28, 0xF0	; 240
     fc4:	dc 27       	eor	r29, r28
     fc6:	c8 1b       	sub	r28, r24
     fc8:	d9 0b       	sbc	r29, r25
     fca:	fe 01       	movw	r30, r28
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	e6 58       	subi	r30, 0x86	; 134
     fd6:	fc 4f       	sbci	r31, 0xFC	; 252
     fd8:	05 91       	lpm	r16, Z+
     fda:	15 91       	lpm	r17, Z+
     fdc:	25 91       	lpm	r18, Z+
     fde:	34 91       	lpm	r19, Z+
     fe0:	fe 01       	movw	r30, r28
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	e2 58       	subi	r30, 0x82	; 130
     fec:	fc 4f       	sbci	r31, 0xFC	; 252
     fee:	c5 90       	lpm	r12, Z+
     ff0:	d5 90       	lpm	r13, Z+
     ff2:	e5 90       	lpm	r14, Z+
     ff4:	f4 90       	lpm	r15, Z+
     ff6:	fe 01       	movw	r30, r28
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 57       	subi	r30, 0x7E	; 126
    1002:	fc 4f       	sbci	r31, 0xFC	; 252
    1004:	85 90       	lpm	r8, Z+
    1006:	95 90       	lpm	r9, Z+
    1008:	a5 90       	lpm	r10, Z+
    100a:	b4 90       	lpm	r11, Z+
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	a8 01       	movw	r20, r16
    1010:	b9 01       	movw	r22, r18
    1012:	86 01       	movw	r16, r12
    1014:	97 01       	movw	r18, r14
    1016:	64 01       	movw	r12, r8
    1018:	75 01       	movw	r14, r10
    101a:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(1,pgm_read_dword(&(patterns[num][1][red])),pgm_read_dword(&(patterns[num][1][blue])),pgm_read_dword(&(patterns[num][1][green])));
    101e:	fe 01       	movw	r30, r28
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	ea 57       	subi	r30, 0x7A	; 122
    102a:	fc 4f       	sbci	r31, 0xFC	; 252
    102c:	05 91       	lpm	r16, Z+
    102e:	15 91       	lpm	r17, Z+
    1030:	25 91       	lpm	r18, Z+
    1032:	34 91       	lpm	r19, Z+
    1034:	fe 01       	movw	r30, r28
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	e6 57       	subi	r30, 0x76	; 118
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	c5 90       	lpm	r12, Z+
    1044:	d5 90       	lpm	r13, Z+
    1046:	e5 90       	lpm	r14, Z+
    1048:	f4 90       	lpm	r15, Z+
    104a:	fe 01       	movw	r30, r28
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	e2 57       	subi	r30, 0x72	; 114
    1056:	fc 4f       	sbci	r31, 0xFC	; 252
    1058:	85 90       	lpm	r8, Z+
    105a:	95 90       	lpm	r9, Z+
    105c:	a5 90       	lpm	r10, Z+
    105e:	b4 90       	lpm	r11, Z+
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	a8 01       	movw	r20, r16
    1064:	b9 01       	movw	r22, r18
    1066:	86 01       	movw	r16, r12
    1068:	97 01       	movw	r18, r14
    106a:	64 01       	movw	r12, r8
    106c:	75 01       	movw	r14, r10
    106e:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(2,pgm_read_dword(&(patterns[num][2][red])),pgm_read_dword(&(patterns[num][2][blue])),pgm_read_dword(&(patterns[num][2][green])));
    1072:	fe 01       	movw	r30, r28
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ee 56       	subi	r30, 0x6E	; 110
    107e:	fc 4f       	sbci	r31, 0xFC	; 252
    1080:	05 91       	lpm	r16, Z+
    1082:	15 91       	lpm	r17, Z+
    1084:	25 91       	lpm	r18, Z+
    1086:	34 91       	lpm	r19, Z+
    1088:	fe 01       	movw	r30, r28
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	ea 56       	subi	r30, 0x6A	; 106
    1094:	fc 4f       	sbci	r31, 0xFC	; 252
    1096:	c5 90       	lpm	r12, Z+
    1098:	d5 90       	lpm	r13, Z+
    109a:	e5 90       	lpm	r14, Z+
    109c:	f4 90       	lpm	r15, Z+
    109e:	fe 01       	movw	r30, r28
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	e6 56       	subi	r30, 0x66	; 102
    10aa:	fc 4f       	sbci	r31, 0xFC	; 252
    10ac:	85 90       	lpm	r8, Z+
    10ae:	95 90       	lpm	r9, Z+
    10b0:	a5 90       	lpm	r10, Z+
    10b2:	b4 90       	lpm	r11, Z+
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	a8 01       	movw	r20, r16
    10b8:	b9 01       	movw	r22, r18
    10ba:	86 01       	movw	r16, r12
    10bc:	97 01       	movw	r18, r14
    10be:	64 01       	movw	r12, r8
    10c0:	75 01       	movw	r14, r10
    10c2:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(3,pgm_read_dword(&(patterns[num][3][red])),pgm_read_dword(&(patterns[num][3][blue])),pgm_read_dword(&(patterns[num][3][green])));
    10c6:	fe 01       	movw	r30, r28
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e2 56       	subi	r30, 0x62	; 98
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	05 91       	lpm	r16, Z+
    10d6:	15 91       	lpm	r17, Z+
    10d8:	25 91       	lpm	r18, Z+
    10da:	34 91       	lpm	r19, Z+
    10dc:	fe 01       	movw	r30, r28
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 55       	subi	r30, 0x5E	; 94
    10e8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ea:	c5 90       	lpm	r12, Z+
    10ec:	d5 90       	lpm	r13, Z+
    10ee:	e5 90       	lpm	r14, Z+
    10f0:	f4 90       	lpm	r15, Z+
    10f2:	fe 01       	movw	r30, r28
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ea 55       	subi	r30, 0x5A	; 90
    10fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1100:	85 90       	lpm	r8, Z+
    1102:	95 90       	lpm	r9, Z+
    1104:	a5 90       	lpm	r10, Z+
    1106:	b4 90       	lpm	r11, Z+
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	a8 01       	movw	r20, r16
    110c:	b9 01       	movw	r22, r18
    110e:	86 01       	movw	r16, r12
    1110:	97 01       	movw	r18, r14
    1112:	64 01       	movw	r12, r8
    1114:	75 01       	movw	r14, r10
    1116:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(4,pgm_read_dword(&(patterns[num][4][red])),pgm_read_dword(&(patterns[num][4][blue])),pgm_read_dword(&(patterns[num][4][green])));
    111a:	fe 01       	movw	r30, r28
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	e6 55       	subi	r30, 0x56	; 86
    1126:	fc 4f       	sbci	r31, 0xFC	; 252
    1128:	05 91       	lpm	r16, Z+
    112a:	15 91       	lpm	r17, Z+
    112c:	25 91       	lpm	r18, Z+
    112e:	34 91       	lpm	r19, Z+
    1130:	fe 01       	movw	r30, r28
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e2 55       	subi	r30, 0x52	; 82
    113c:	fc 4f       	sbci	r31, 0xFC	; 252
    113e:	c5 90       	lpm	r12, Z+
    1140:	d5 90       	lpm	r13, Z+
    1142:	e5 90       	lpm	r14, Z+
    1144:	f4 90       	lpm	r15, Z+
    1146:	fe 01       	movw	r30, r28
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ee 54       	subi	r30, 0x4E	; 78
    1152:	fc 4f       	sbci	r31, 0xFC	; 252
    1154:	85 90       	lpm	r8, Z+
    1156:	95 90       	lpm	r9, Z+
    1158:	a5 90       	lpm	r10, Z+
    115a:	b4 90       	lpm	r11, Z+
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	a8 01       	movw	r20, r16
    1160:	b9 01       	movw	r22, r18
    1162:	86 01       	movw	r16, r12
    1164:	97 01       	movw	r18, r14
    1166:	64 01       	movw	r12, r8
    1168:	75 01       	movw	r14, r10
    116a:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    116e:	c0 e0       	ldi	r28, 0x00	; 0
    1170:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
        level(i);
    1172:	8c 2f       	mov	r24, r28
    1174:	0e 94 aa 06 	call	0xd54	; 0xd54 <level>
        for(j=5;j-- > 0; ){
    1178:	24 e0       	ldi	r18, 0x04	; 4
    117a:	ce 01       	movw	r24, r28
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
            temp = (frame[i][j]);
    1184:	8c 0f       	add	r24, r28
    1186:	9d 1f       	adc	r25, r29
    1188:	e2 2f       	mov	r30, r18
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	dc 01       	movw	r26, r24
    118e:	ae 0f       	add	r26, r30
    1190:	bf 1f       	adc	r27, r31
    1192:	aa 0f       	add	r26, r26
    1194:	bb 1f       	adc	r27, r27
    1196:	ae 59       	subi	r26, 0x9E	; 158
    1198:	be 4f       	sbci	r27, 0xFE	; 254
    119a:	3c 91       	ld	r19, X
            //load first byte
            SPDR = temp;
    119c:	3e bd       	out	0x2e, r19	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
    119e:	0d b4       	in	r0, 0x2d	; 45
    11a0:	07 fe       	sbrs	r0, 7
    11a2:	fd cf       	rjmp	.-6      	; 0x119e <pattern+0x202>

            temp = (frame[i][j]>>8);
    11a4:	dc 01       	movw	r26, r24
    11a6:	ae 0f       	add	r26, r30
    11a8:	bf 1f       	adc	r27, r31
    11aa:	aa 0f       	add	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	ae 59       	subi	r26, 0x9E	; 158
    11b0:	be 4f       	sbci	r27, 0xFE	; 254
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	3c 91       	ld	r19, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
            //load second byte
            SPDR = temp;
    11b8:	3e bd       	out	0x2e, r19	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
    11ba:	0d b4       	in	r0, 0x2d	; 45
    11bc:	07 fe       	sbrs	r0, 7
    11be:	fd cf       	rjmp	.-6      	; 0x11ba <pattern+0x21e>
            frame[i][j] = 0; //Clears Frame after data is sent
    11c0:	e8 0f       	add	r30, r24
    11c2:	f9 1f       	adc	r31, r25
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 59       	subi	r30, 0x9E	; 158
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	11 82       	std	Z+1, r1	; 0x01
    11ce:	10 82       	st	Z, r1
    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
        level(i);
        for(j=5;j-- > 0; ){
    11d0:	22 23       	and	r18, r18
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <pattern+0x23c>
    11d4:	21 50       	subi	r18, 0x01	; 1
    11d6:	d8 cf       	rjmp	.-80     	; 0x1188 <pattern+0x1ec>
            frame[i][j] = 0; //Clears Frame after data is sent
                             // should change to also react to flag
        }

        //Toggle latch
        TOGGLE_LATCH
    11d8:	16 9a       	sbi	0x02, 6	; 2
    11da:	16 98       	cbi	0x02, 6	; 2
        if(i < 4){
    11dc:	c4 30       	cpi	r28, 0x04	; 4
    11de:	d1 05       	cpc	r29, r1
    11e0:	69 f4       	brne	.+26     	; 0x11fc <pattern+0x260>
        }
        else{
            _delay_ms(500); //why delay?
        }
    }
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11fc:	8f e9       	ldi	r24, 0x9F	; 159
    11fe:	9f e0       	ldi	r25, 0x0F	; 15
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <pattern+0x264>
    1204:	00 c0       	rjmp	.+0      	; 0x1206 <pattern+0x26a>
    1206:	00 00       	nop
    1208:	21 96       	adiw	r28, 0x01	; 1
    //Insert a test

    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
    120a:	c5 30       	cpi	r28, 0x05	; 5
    120c:	d1 05       	cpc	r29, r1
    120e:	09 f0       	breq	.+2      	; 0x1212 <pattern+0x276>
    1210:	b0 cf       	rjmp	.-160    	; 0x1172 <pattern+0x1d6>
    1212:	e7 cf       	rjmp	.-50     	; 0x11e2 <pattern+0x246>

00001214 <display>:
            _delay_ms(500); //why delay?
        }
    }
}

void display(uint8_t *buffer){
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ec 01       	movw	r28, r24
    uint8_t red = 0;
    uint8_t blue = 1;
    uint8_t green = 2;

    if(updated == 1){
    1226:	80 91 a0 01 	lds	r24, 0x01A0
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	09 f4       	brne	.+2      	; 0x1230 <display+0x1c>
    122e:	56 c0       	rjmp	.+172    	; 0x12dc <display+0xc8>
            _delay_ms(500); //why delay?
        }
    }
}

void display(uint8_t *buffer){
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
        level(i);
    1234:	8c 2f       	mov	r24, r28
    1236:	0e 94 aa 06 	call	0xd54	; 0xd54 <level>
        for(j=5;j-- > 0; ){
    123a:	44 e0       	ldi	r20, 0x04	; 4
    123c:	9e 01       	movw	r18, r28
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
            temp = (frame[i][j]);
    1246:	2c 0f       	add	r18, r28
    1248:	3d 1f       	adc	r19, r29
    124a:	84 2f       	mov	r24, r20
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	f9 01       	movw	r30, r18
    1250:	e8 0f       	add	r30, r24
    1252:	f9 1f       	adc	r31, r25
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	ee 59       	subi	r30, 0x9E	; 158
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	50 81       	ld	r21, Z
            //load first byte
            SPDR = temp;
    125e:	5e bd       	out	0x2e, r21	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
    1260:	0d b4       	in	r0, 0x2d	; 45
    1262:	07 fe       	sbrs	r0, 7
    1264:	fd cf       	rjmp	.-6      	; 0x1260 <display+0x4c>

            temp = (frame[i][j]>>8);
    1266:	f9 01       	movw	r30, r18
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	ee 59       	subi	r30, 0x9E	; 158
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	51 81       	ldd	r21, Z+1	; 0x01
            //load second byte
            SPDR = temp;
    1276:	5e bd       	out	0x2e, r21	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
    1278:	0d b4       	in	r0, 0x2d	; 45
    127a:	07 fe       	sbrs	r0, 7
    127c:	fd cf       	rjmp	.-6      	; 0x1278 <display+0x64>
            if(clear == 1){
    127e:	50 91 00 01 	lds	r21, 0x0100
    1282:	51 30       	cpi	r21, 0x01	; 1
    1284:	21 f0       	breq	.+8      	; 0x128e <display+0x7a>
    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
        level(i);
        for(j=5;j-- > 0; ){
    1286:	44 23       	and	r20, r20
    1288:	79 f0       	breq	.+30     	; 0x12a8 <display+0x94>
    128a:	41 50       	subi	r20, 0x01	; 1
    128c:	de cf       	rjmp	.-68     	; 0x124a <display+0x36>
            //load second byte
            SPDR = temp;
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
            if(clear == 1){
                frame[i][j] = 0; //Clears Frame after data is sent
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	8e 59       	subi	r24, 0x9E	; 158
    1298:	9e 4f       	sbci	r25, 0xFE	; 254
    129a:	fc 01       	movw	r30, r24
    129c:	11 82       	std	Z+1, r1	; 0x01
    129e:	10 82       	st	Z, r1
                clear = 0;
    12a0:	10 92 00 01 	sts	0x0100, r1
    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
        level(i);
        for(j=5;j-- > 0; ){
    12a4:	44 23       	and	r20, r20
    12a6:	89 f7       	brne	.-30     	; 0x128a <display+0x76>
                clear = 0;
            }
        }

        //Toggle latch
        TOGGLE_LATCH
    12a8:	16 9a       	sbi	0x02, 6	; 2
    12aa:	16 98       	cbi	0x02, 6	; 2
        if(i < 4){
    12ac:	c4 30       	cpi	r28, 0x04	; 4
    12ae:	d1 05       	cpc	r29, r1
    12b0:	49 f4       	brne	.+18     	; 0x12c4 <display+0xb0>
        }
        else{
            _delay_ms(500); //why delay?
        }
    }
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	08 95       	ret
    12c4:	8f e9       	ldi	r24, 0x9F	; 159
    12c6:	9f e0       	ldi	r25, 0x0F	; 15
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <display+0xb4>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <display+0xba>
    12ce:	00 00       	nop
    12d0:	21 96       	adiw	r28, 0x01	; 1
    */

    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
    12d2:	c5 30       	cpi	r28, 0x05	; 5
    12d4:	d1 05       	cpc	r29, r1
    12d6:	09 f0       	breq	.+2      	; 0x12da <display+0xc6>
    12d8:	ad cf       	rjmp	.-166    	; 0x1234 <display+0x20>
    12da:	eb cf       	rjmp	.-42     	; 0x12b2 <display+0x9e>
    uint8_t blue = 1;
    uint8_t green = 2;

    if(updated == 1){
        //Layer 0
        color[0] = ((uint32_t)(buffer[3]))|((uint32_t)(buffer[2])<<8)|((uint32_t)(buffer[1])<<16)|((uint32_t)(buffer[0])<<24);
    12dc:	48 81       	ld	r20, Y
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	74 2f       	mov	r23, r20
    12e6:	66 27       	eor	r22, r22
    12e8:	55 27       	eor	r21, r21
    12ea:	44 27       	eor	r20, r20
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	48 2b       	or	r20, r24
    12f6:	59 2b       	or	r21, r25
    12f8:	6a 2b       	or	r22, r26
    12fa:	7b 2b       	or	r23, r27
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ba 2f       	mov	r27, r26
    1306:	a9 2f       	mov	r26, r25
    1308:	98 2f       	mov	r25, r24
    130a:	88 27       	eor	r24, r24
    130c:	48 2b       	or	r20, r24
    130e:	59 2b       	or	r21, r25
    1310:	6a 2b       	or	r22, r26
    1312:	7b 2b       	or	r23, r27
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	dc 01       	movw	r26, r24
    131e:	99 27       	eor	r25, r25
    1320:	88 27       	eor	r24, r24
    1322:	48 2b       	or	r20, r24
    1324:	59 2b       	or	r21, r25
    1326:	6a 2b       	or	r22, r26
    1328:	7b 2b       	or	r23, r27
    132a:	40 93 94 01 	sts	0x0194, r20
    132e:	50 93 95 01 	sts	0x0195, r21
    1332:	60 93 96 01 	sts	0x0196, r22
    1336:	70 93 97 01 	sts	0x0197, r23
        color[1] = ((uint32_t)(buffer[3+20]))|((uint32_t)(buffer[2+20])<<8)|((uint32_t)(buffer[1+20])<<16)|((uint32_t)(buffer[0+20])<<24);
    133a:	0e 89       	ldd	r16, Y+22	; 0x16
    133c:	10 e0       	ldi	r17, 0x00	; 0
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	32 2f       	mov	r19, r18
    1344:	21 2f       	mov	r18, r17
    1346:	10 2f       	mov	r17, r16
    1348:	00 27       	eor	r16, r16
    134a:	8d 89       	ldd	r24, Y+21	; 0x15
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	dc 01       	movw	r26, r24
    1354:	99 27       	eor	r25, r25
    1356:	88 27       	eor	r24, r24
    1358:	08 2b       	or	r16, r24
    135a:	19 2b       	or	r17, r25
    135c:	2a 2b       	or	r18, r26
    135e:	3b 2b       	or	r19, r27
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e0       	ldi	r26, 0x00	; 0
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	08 2b       	or	r16, r24
    136a:	19 2b       	or	r17, r25
    136c:	2a 2b       	or	r18, r26
    136e:	3b 2b       	or	r19, r27
    1370:	8c 89       	ldd	r24, Y+20	; 0x14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	b8 2f       	mov	r27, r24
    137a:	aa 27       	eor	r26, r26
    137c:	99 27       	eor	r25, r25
    137e:	88 27       	eor	r24, r24
    1380:	08 2b       	or	r16, r24
    1382:	19 2b       	or	r17, r25
    1384:	2a 2b       	or	r18, r26
    1386:	3b 2b       	or	r19, r27
    1388:	00 93 98 01 	sts	0x0198, r16
    138c:	10 93 99 01 	sts	0x0199, r17
    1390:	20 93 9a 01 	sts	0x019A, r18
    1394:	30 93 9b 01 	sts	0x019B, r19
        color[2] = ((uint32_t)(buffer[3+40]))|((uint32_t)(buffer[2+40])<<8)|((uint32_t)(buffer[1+40])<<16)|((uint32_t)(buffer[0+40])<<24);
    1398:	8a a5       	ldd	r24, Y+42	; 0x2a
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	cc 24       	eor	r12, r12
    13a2:	d8 2e       	mov	r13, r24
    13a4:	e9 2e       	mov	r14, r25
    13a6:	fa 2e       	mov	r15, r26
    13a8:	89 a5       	ldd	r24, Y+41	; 0x29
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	dc 01       	movw	r26, r24
    13b2:	99 27       	eor	r25, r25
    13b4:	88 27       	eor	r24, r24
    13b6:	c8 2a       	or	r12, r24
    13b8:	d9 2a       	or	r13, r25
    13ba:	ea 2a       	or	r14, r26
    13bc:	fb 2a       	or	r15, r27
    13be:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	c8 2a       	or	r12, r24
    13c8:	d9 2a       	or	r13, r25
    13ca:	ea 2a       	or	r14, r26
    13cc:	fb 2a       	or	r15, r27
    13ce:	88 a5       	ldd	r24, Y+40	; 0x28
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	b8 2f       	mov	r27, r24
    13d8:	aa 27       	eor	r26, r26
    13da:	99 27       	eor	r25, r25
    13dc:	88 27       	eor	r24, r24
    13de:	c8 2a       	or	r12, r24
    13e0:	d9 2a       	or	r13, r25
    13e2:	ea 2a       	or	r14, r26
    13e4:	fb 2a       	or	r15, r27
    13e6:	c0 92 9c 01 	sts	0x019C, r12
    13ea:	d0 92 9d 01 	sts	0x019D, r13
    13ee:	e0 92 9e 01 	sts	0x019E, r14
    13f2:	f0 92 9f 01 	sts	0x019F, r15
        leds(0,color[0],color[1],color[2]);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>

        //Layer 1
        color[0] = ((uint32_t)(buffer[7]))|((uint32_t)(buffer[6])<<8)|((uint32_t)(buffer[5])<<16)|((uint32_t)(buffer[4])<<24);
    13fc:	4e 81       	ldd	r20, Y+6	; 0x06
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	76 2f       	mov	r23, r22
    1406:	65 2f       	mov	r22, r21
    1408:	54 2f       	mov	r21, r20
    140a:	44 27       	eor	r20, r20
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e0       	ldi	r26, 0x00	; 0
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	dc 01       	movw	r26, r24
    1416:	99 27       	eor	r25, r25
    1418:	88 27       	eor	r24, r24
    141a:	48 2b       	or	r20, r24
    141c:	59 2b       	or	r21, r25
    141e:	6a 2b       	or	r22, r26
    1420:	7b 2b       	or	r23, r27
    1422:	8f 81       	ldd	r24, Y+7	; 0x07
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	48 2b       	or	r20, r24
    142c:	59 2b       	or	r21, r25
    142e:	6a 2b       	or	r22, r26
    1430:	7b 2b       	or	r23, r27
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	b8 2f       	mov	r27, r24
    143c:	aa 27       	eor	r26, r26
    143e:	99 27       	eor	r25, r25
    1440:	88 27       	eor	r24, r24
    1442:	48 2b       	or	r20, r24
    1444:	59 2b       	or	r21, r25
    1446:	6a 2b       	or	r22, r26
    1448:	7b 2b       	or	r23, r27
    144a:	40 93 94 01 	sts	0x0194, r20
    144e:	50 93 95 01 	sts	0x0195, r21
    1452:	60 93 96 01 	sts	0x0196, r22
    1456:	70 93 97 01 	sts	0x0197, r23
        color[1] = ((uint32_t)(buffer[7+20]))|((uint32_t)(buffer[6+20])<<8)|((uint32_t)(buffer[5+20])<<16)|((uint32_t)(buffer[4+20])<<24);
    145a:	0a 8d       	ldd	r16, Y+26	; 0x1a
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	32 2f       	mov	r19, r18
    1464:	21 2f       	mov	r18, r17
    1466:	10 2f       	mov	r17, r16
    1468:	00 27       	eor	r16, r16
    146a:	89 8d       	ldd	r24, Y+25	; 0x19
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e0       	ldi	r26, 0x00	; 0
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	dc 01       	movw	r26, r24
    1474:	99 27       	eor	r25, r25
    1476:	88 27       	eor	r24, r24
    1478:	08 2b       	or	r16, r24
    147a:	19 2b       	or	r17, r25
    147c:	2a 2b       	or	r18, r26
    147e:	3b 2b       	or	r19, r27
    1480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	08 2b       	or	r16, r24
    148a:	19 2b       	or	r17, r25
    148c:	2a 2b       	or	r18, r26
    148e:	3b 2b       	or	r19, r27
    1490:	88 8d       	ldd	r24, Y+24	; 0x18
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	b8 2f       	mov	r27, r24
    149a:	aa 27       	eor	r26, r26
    149c:	99 27       	eor	r25, r25
    149e:	88 27       	eor	r24, r24
    14a0:	08 2b       	or	r16, r24
    14a2:	19 2b       	or	r17, r25
    14a4:	2a 2b       	or	r18, r26
    14a6:	3b 2b       	or	r19, r27
    14a8:	00 93 98 01 	sts	0x0198, r16
    14ac:	10 93 99 01 	sts	0x0199, r17
    14b0:	20 93 9a 01 	sts	0x019A, r18
    14b4:	30 93 9b 01 	sts	0x019B, r19
        color[2] = ((uint32_t)(buffer[7+40]))|((uint32_t)(buffer[6+40])<<8)|((uint32_t)(buffer[5+40])<<16)|((uint32_t)(buffer[4+40])<<24);
    14b8:	8e a5       	ldd	r24, Y+46	; 0x2e
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	cc 24       	eor	r12, r12
    14c2:	d8 2e       	mov	r13, r24
    14c4:	e9 2e       	mov	r14, r25
    14c6:	fa 2e       	mov	r15, r26
    14c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	dc 01       	movw	r26, r24
    14d2:	99 27       	eor	r25, r25
    14d4:	88 27       	eor	r24, r24
    14d6:	c8 2a       	or	r12, r24
    14d8:	d9 2a       	or	r13, r25
    14da:	ea 2a       	or	r14, r26
    14dc:	fb 2a       	or	r15, r27
    14de:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	c8 2a       	or	r12, r24
    14e8:	d9 2a       	or	r13, r25
    14ea:	ea 2a       	or	r14, r26
    14ec:	fb 2a       	or	r15, r27
    14ee:	8c a5       	ldd	r24, Y+44	; 0x2c
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	b8 2f       	mov	r27, r24
    14f8:	aa 27       	eor	r26, r26
    14fa:	99 27       	eor	r25, r25
    14fc:	88 27       	eor	r24, r24
    14fe:	c8 2a       	or	r12, r24
    1500:	d9 2a       	or	r13, r25
    1502:	ea 2a       	or	r14, r26
    1504:	fb 2a       	or	r15, r27
    1506:	c0 92 9c 01 	sts	0x019C, r12
    150a:	d0 92 9d 01 	sts	0x019D, r13
    150e:	e0 92 9e 01 	sts	0x019E, r14
    1512:	f0 92 9f 01 	sts	0x019F, r15
        leds(1,color[0],color[1],color[2]);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>

        //Layer 2
        color[0] = ((uint32_t)(buffer[11]))|((uint32_t)(buffer[10])<<8)|((uint32_t)(buffer[9])<<16)|((uint32_t)(buffer[8])<<24);
    151c:	4a 85       	ldd	r20, Y+10	; 0x0a
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	76 2f       	mov	r23, r22
    1526:	65 2f       	mov	r22, r21
    1528:	54 2f       	mov	r21, r20
    152a:	44 27       	eor	r20, r20
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	dc 01       	movw	r26, r24
    1536:	99 27       	eor	r25, r25
    1538:	88 27       	eor	r24, r24
    153a:	48 2b       	or	r20, r24
    153c:	59 2b       	or	r21, r25
    153e:	6a 2b       	or	r22, r26
    1540:	7b 2b       	or	r23, r27
    1542:	8b 85       	ldd	r24, Y+11	; 0x0b
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	48 2b       	or	r20, r24
    154c:	59 2b       	or	r21, r25
    154e:	6a 2b       	or	r22, r26
    1550:	7b 2b       	or	r23, r27
    1552:	88 85       	ldd	r24, Y+8	; 0x08
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	b8 2f       	mov	r27, r24
    155c:	aa 27       	eor	r26, r26
    155e:	99 27       	eor	r25, r25
    1560:	88 27       	eor	r24, r24
    1562:	48 2b       	or	r20, r24
    1564:	59 2b       	or	r21, r25
    1566:	6a 2b       	or	r22, r26
    1568:	7b 2b       	or	r23, r27
    156a:	40 93 94 01 	sts	0x0194, r20
    156e:	50 93 95 01 	sts	0x0195, r21
    1572:	60 93 96 01 	sts	0x0196, r22
    1576:	70 93 97 01 	sts	0x0197, r23
        color[1] = ((uint32_t)(buffer[11+20]))|((uint32_t)(buffer[10+20])<<8)|((uint32_t)(buffer[9+20])<<16)|((uint32_t)(buffer[8+20])<<24);
    157a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    157c:	10 e0       	ldi	r17, 0x00	; 0
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	32 2f       	mov	r19, r18
    1584:	21 2f       	mov	r18, r17
    1586:	10 2f       	mov	r17, r16
    1588:	00 27       	eor	r16, r16
    158a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	08 2b       	or	r16, r24
    159a:	19 2b       	or	r17, r25
    159c:	2a 2b       	or	r18, r26
    159e:	3b 2b       	or	r19, r27
    15a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e0       	ldi	r26, 0x00	; 0
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	08 2b       	or	r16, r24
    15aa:	19 2b       	or	r17, r25
    15ac:	2a 2b       	or	r18, r26
    15ae:	3b 2b       	or	r19, r27
    15b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	b8 2f       	mov	r27, r24
    15ba:	aa 27       	eor	r26, r26
    15bc:	99 27       	eor	r25, r25
    15be:	88 27       	eor	r24, r24
    15c0:	08 2b       	or	r16, r24
    15c2:	19 2b       	or	r17, r25
    15c4:	2a 2b       	or	r18, r26
    15c6:	3b 2b       	or	r19, r27
    15c8:	00 93 98 01 	sts	0x0198, r16
    15cc:	10 93 99 01 	sts	0x0199, r17
    15d0:	20 93 9a 01 	sts	0x019A, r18
    15d4:	30 93 9b 01 	sts	0x019B, r19
        color[2] = ((uint32_t)(buffer[11+40]))|((uint32_t)(buffer[10+40])<<8)|((uint32_t)(buffer[9+40])<<16)|((uint32_t)(buffer[8+40])<<24);
    15d8:	8a a9       	ldd	r24, Y+50	; 0x32
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	cc 24       	eor	r12, r12
    15e2:	d8 2e       	mov	r13, r24
    15e4:	e9 2e       	mov	r14, r25
    15e6:	fa 2e       	mov	r15, r26
    15e8:	89 a9       	ldd	r24, Y+49	; 0x31
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	dc 01       	movw	r26, r24
    15f2:	99 27       	eor	r25, r25
    15f4:	88 27       	eor	r24, r24
    15f6:	c8 2a       	or	r12, r24
    15f8:	d9 2a       	or	r13, r25
    15fa:	ea 2a       	or	r14, r26
    15fc:	fb 2a       	or	r15, r27
    15fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	c8 2a       	or	r12, r24
    1608:	d9 2a       	or	r13, r25
    160a:	ea 2a       	or	r14, r26
    160c:	fb 2a       	or	r15, r27
    160e:	88 a9       	ldd	r24, Y+48	; 0x30
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	b8 2f       	mov	r27, r24
    1618:	aa 27       	eor	r26, r26
    161a:	99 27       	eor	r25, r25
    161c:	88 27       	eor	r24, r24
    161e:	c8 2a       	or	r12, r24
    1620:	d9 2a       	or	r13, r25
    1622:	ea 2a       	or	r14, r26
    1624:	fb 2a       	or	r15, r27
    1626:	c0 92 9c 01 	sts	0x019C, r12
    162a:	d0 92 9d 01 	sts	0x019D, r13
    162e:	e0 92 9e 01 	sts	0x019E, r14
    1632:	f0 92 9f 01 	sts	0x019F, r15
        leds(2,color[0],color[1],color[2]);
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>

        //Layer 3
        color[0] = ((uint32_t)(buffer[15]))|((uint32_t)(buffer[14])<<8)|((uint32_t)(buffer[13])<<16)|((uint32_t)(buffer[12])<<24);
    163c:	4e 85       	ldd	r20, Y+14	; 0x0e
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	76 2f       	mov	r23, r22
    1646:	65 2f       	mov	r22, r21
    1648:	54 2f       	mov	r21, r20
    164a:	44 27       	eor	r20, r20
    164c:	8d 85       	ldd	r24, Y+13	; 0x0d
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	dc 01       	movw	r26, r24
    1656:	99 27       	eor	r25, r25
    1658:	88 27       	eor	r24, r24
    165a:	48 2b       	or	r20, r24
    165c:	59 2b       	or	r21, r25
    165e:	6a 2b       	or	r22, r26
    1660:	7b 2b       	or	r23, r27
    1662:	8f 85       	ldd	r24, Y+15	; 0x0f
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	48 2b       	or	r20, r24
    166c:	59 2b       	or	r21, r25
    166e:	6a 2b       	or	r22, r26
    1670:	7b 2b       	or	r23, r27
    1672:	8c 85       	ldd	r24, Y+12	; 0x0c
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	b8 2f       	mov	r27, r24
    167c:	aa 27       	eor	r26, r26
    167e:	99 27       	eor	r25, r25
    1680:	88 27       	eor	r24, r24
    1682:	48 2b       	or	r20, r24
    1684:	59 2b       	or	r21, r25
    1686:	6a 2b       	or	r22, r26
    1688:	7b 2b       	or	r23, r27
    168a:	40 93 94 01 	sts	0x0194, r20
    168e:	50 93 95 01 	sts	0x0195, r21
    1692:	60 93 96 01 	sts	0x0196, r22
    1696:	70 93 97 01 	sts	0x0197, r23
        color[1] = ((uint32_t)(buffer[15+20]))|((uint32_t)(buffer[14+20])<<8)|((uint32_t)(buffer[13+20])<<16)|((uint32_t)(buffer[12+20])<<24);
    169a:	0a a1       	ldd	r16, Y+34	; 0x22
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	32 2f       	mov	r19, r18
    16a4:	21 2f       	mov	r18, r17
    16a6:	10 2f       	mov	r17, r16
    16a8:	00 27       	eor	r16, r16
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e0       	ldi	r26, 0x00	; 0
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	dc 01       	movw	r26, r24
    16b4:	99 27       	eor	r25, r25
    16b6:	88 27       	eor	r24, r24
    16b8:	08 2b       	or	r16, r24
    16ba:	19 2b       	or	r17, r25
    16bc:	2a 2b       	or	r18, r26
    16be:	3b 2b       	or	r19, r27
    16c0:	8b a1       	ldd	r24, Y+35	; 0x23
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	08 2b       	or	r16, r24
    16ca:	19 2b       	or	r17, r25
    16cc:	2a 2b       	or	r18, r26
    16ce:	3b 2b       	or	r19, r27
    16d0:	88 a1       	ldd	r24, Y+32	; 0x20
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e0       	ldi	r26, 0x00	; 0
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	b8 2f       	mov	r27, r24
    16da:	aa 27       	eor	r26, r26
    16dc:	99 27       	eor	r25, r25
    16de:	88 27       	eor	r24, r24
    16e0:	08 2b       	or	r16, r24
    16e2:	19 2b       	or	r17, r25
    16e4:	2a 2b       	or	r18, r26
    16e6:	3b 2b       	or	r19, r27
    16e8:	00 93 98 01 	sts	0x0198, r16
    16ec:	10 93 99 01 	sts	0x0199, r17
    16f0:	20 93 9a 01 	sts	0x019A, r18
    16f4:	30 93 9b 01 	sts	0x019B, r19
        color[2] = ((uint32_t)(buffer[15+40]))|((uint32_t)(buffer[14+40])<<8)|((uint32_t)(buffer[13+40])<<16)|((uint32_t)(buffer[12+40])<<24);
    16f8:	8e a9       	ldd	r24, Y+54	; 0x36
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	cc 24       	eor	r12, r12
    1702:	d8 2e       	mov	r13, r24
    1704:	e9 2e       	mov	r14, r25
    1706:	fa 2e       	mov	r15, r26
    1708:	8d a9       	ldd	r24, Y+53	; 0x35
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	dc 01       	movw	r26, r24
    1712:	99 27       	eor	r25, r25
    1714:	88 27       	eor	r24, r24
    1716:	c8 2a       	or	r12, r24
    1718:	d9 2a       	or	r13, r25
    171a:	ea 2a       	or	r14, r26
    171c:	fb 2a       	or	r15, r27
    171e:	8f a9       	ldd	r24, Y+55	; 0x37
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	c8 2a       	or	r12, r24
    1728:	d9 2a       	or	r13, r25
    172a:	ea 2a       	or	r14, r26
    172c:	fb 2a       	or	r15, r27
    172e:	8c a9       	ldd	r24, Y+52	; 0x34
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	b8 2f       	mov	r27, r24
    1738:	aa 27       	eor	r26, r26
    173a:	99 27       	eor	r25, r25
    173c:	88 27       	eor	r24, r24
    173e:	c8 2a       	or	r12, r24
    1740:	d9 2a       	or	r13, r25
    1742:	ea 2a       	or	r14, r26
    1744:	fb 2a       	or	r15, r27
    1746:	c0 92 9c 01 	sts	0x019C, r12
    174a:	d0 92 9d 01 	sts	0x019D, r13
    174e:	e0 92 9e 01 	sts	0x019E, r14
    1752:	f0 92 9f 01 	sts	0x019F, r15
        leds(3,color[0],color[1],color[2]);
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>

        //Layer 4
        color[0] = ((uint32_t)(buffer[19]))|((uint32_t)(buffer[18])<<8)|((uint32_t)(buffer[17])<<16)|((uint32_t)(buffer[16])<<24);
    175c:	4a 89       	ldd	r20, Y+18	; 0x12
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	76 2f       	mov	r23, r22
    1766:	65 2f       	mov	r22, r21
    1768:	54 2f       	mov	r21, r20
    176a:	44 27       	eor	r20, r20
    176c:	89 89       	ldd	r24, Y+17	; 0x11
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	dc 01       	movw	r26, r24
    1776:	99 27       	eor	r25, r25
    1778:	88 27       	eor	r24, r24
    177a:	48 2b       	or	r20, r24
    177c:	59 2b       	or	r21, r25
    177e:	6a 2b       	or	r22, r26
    1780:	7b 2b       	or	r23, r27
    1782:	8b 89       	ldd	r24, Y+19	; 0x13
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	48 2b       	or	r20, r24
    178c:	59 2b       	or	r21, r25
    178e:	6a 2b       	or	r22, r26
    1790:	7b 2b       	or	r23, r27
    1792:	88 89       	ldd	r24, Y+16	; 0x10
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a0 e0       	ldi	r26, 0x00	; 0
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	b8 2f       	mov	r27, r24
    179c:	aa 27       	eor	r26, r26
    179e:	99 27       	eor	r25, r25
    17a0:	88 27       	eor	r24, r24
    17a2:	48 2b       	or	r20, r24
    17a4:	59 2b       	or	r21, r25
    17a6:	6a 2b       	or	r22, r26
    17a8:	7b 2b       	or	r23, r27
    17aa:	40 93 94 01 	sts	0x0194, r20
    17ae:	50 93 95 01 	sts	0x0195, r21
    17b2:	60 93 96 01 	sts	0x0196, r22
    17b6:	70 93 97 01 	sts	0x0197, r23
        color[1] = ((uint32_t)(buffer[19+20]))|((uint32_t)(buffer[18+20])<<8)|((uint32_t)(buffer[17+20])<<16)|((uint32_t)(buffer[16+20])<<24);
    17ba:	0e a1       	ldd	r16, Y+38	; 0x26
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	32 2f       	mov	r19, r18
    17c4:	21 2f       	mov	r18, r17
    17c6:	10 2f       	mov	r17, r16
    17c8:	00 27       	eor	r16, r16
    17ca:	8d a1       	ldd	r24, Y+37	; 0x25
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	dc 01       	movw	r26, r24
    17d4:	99 27       	eor	r25, r25
    17d6:	88 27       	eor	r24, r24
    17d8:	08 2b       	or	r16, r24
    17da:	19 2b       	or	r17, r25
    17dc:	2a 2b       	or	r18, r26
    17de:	3b 2b       	or	r19, r27
    17e0:	8f a1       	ldd	r24, Y+39	; 0x27
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	08 2b       	or	r16, r24
    17ea:	19 2b       	or	r17, r25
    17ec:	2a 2b       	or	r18, r26
    17ee:	3b 2b       	or	r19, r27
    17f0:	8c a1       	ldd	r24, Y+36	; 0x24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	b8 2f       	mov	r27, r24
    17fa:	aa 27       	eor	r26, r26
    17fc:	99 27       	eor	r25, r25
    17fe:	88 27       	eor	r24, r24
    1800:	08 2b       	or	r16, r24
    1802:	19 2b       	or	r17, r25
    1804:	2a 2b       	or	r18, r26
    1806:	3b 2b       	or	r19, r27
    1808:	00 93 98 01 	sts	0x0198, r16
    180c:	10 93 99 01 	sts	0x0199, r17
    1810:	20 93 9a 01 	sts	0x019A, r18
    1814:	30 93 9b 01 	sts	0x019B, r19
        color[2] = ((uint32_t)(buffer[19+40]))|((uint32_t)(buffer[18+40])<<8)|((uint32_t)(buffer[17+40])<<16)|((uint32_t)(buffer[16+40])<<24);
    1818:	8a ad       	ldd	r24, Y+58	; 0x3a
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	cc 24       	eor	r12, r12
    1822:	d8 2e       	mov	r13, r24
    1824:	e9 2e       	mov	r14, r25
    1826:	fa 2e       	mov	r15, r26
    1828:	89 ad       	ldd	r24, Y+57	; 0x39
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	dc 01       	movw	r26, r24
    1832:	99 27       	eor	r25, r25
    1834:	88 27       	eor	r24, r24
    1836:	c8 2a       	or	r12, r24
    1838:	d9 2a       	or	r13, r25
    183a:	ea 2a       	or	r14, r26
    183c:	fb 2a       	or	r15, r27
    183e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a0 e0       	ldi	r26, 0x00	; 0
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	c8 2a       	or	r12, r24
    1848:	d9 2a       	or	r13, r25
    184a:	ea 2a       	or	r14, r26
    184c:	fb 2a       	or	r15, r27
    184e:	88 ad       	ldd	r24, Y+56	; 0x38
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	b8 2f       	mov	r27, r24
    1858:	aa 27       	eor	r26, r26
    185a:	99 27       	eor	r25, r25
    185c:	88 27       	eor	r24, r24
    185e:	c8 2a       	or	r12, r24
    1860:	d9 2a       	or	r13, r25
    1862:	ea 2a       	or	r14, r26
    1864:	fb 2a       	or	r15, r27
    1866:	c0 92 9c 01 	sts	0x019C, r12
    186a:	d0 92 9d 01 	sts	0x019D, r13
    186e:	e0 92 9e 01 	sts	0x019E, r14
    1872:	f0 92 9f 01 	sts	0x019F, r15
        leds(4,color[0],color[1],color[2]);
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
        updated = 0;
    187c:	10 92 a0 01 	sts	0x01A0, r1
    1880:	d7 cc       	rjmp	.-1618   	; 0x1230 <display+0x1c>

00001882 <translate>:
            _delay_ms(500); //why delay?
        }
    }
}

void translate(uint8_t *buffer){
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    uint32_t red = 0;
    uint32_t blue = 0;
    uint32_t green = 0;


    red = (buffer[0])|((uint32_t)(buffer[0+1])<<8)|((uint32_t)(buffer[0+2])<<16)|((uint32_t)(buffer[0+3]&MSB1)<<24);
    1894:	49 81       	ldd	r20, Y+1	; 0x01
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	76 2f       	mov	r23, r22
    189e:	65 2f       	mov	r22, r21
    18a0:	54 2f       	mov	r21, r20
    18a2:	44 27       	eor	r20, r20
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	dc 01       	movw	r26, r24
    18ae:	99 27       	eor	r25, r25
    18b0:	88 27       	eor	r24, r24
    18b2:	48 2b       	or	r20, r24
    18b4:	59 2b       	or	r21, r25
    18b6:	6a 2b       	or	r22, r26
    18b8:	7b 2b       	or	r23, r27
    18ba:	88 81       	ld	r24, Y
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	48 2b       	or	r20, r24
    18c4:	59 2b       	or	r21, r25
    18c6:	6a 2b       	or	r22, r26
    18c8:	7b 2b       	or	r23, r27
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	80 78       	andi	r24, 0x80	; 128
    18d4:	90 70       	andi	r25, 0x00	; 0
    18d6:	a0 70       	andi	r26, 0x00	; 0
    18d8:	b0 70       	andi	r27, 0x00	; 0
    18da:	b8 2f       	mov	r27, r24
    18dc:	aa 27       	eor	r26, r26
    18de:	99 27       	eor	r25, r25
    18e0:	88 27       	eor	r24, r24
    18e2:	48 2b       	or	r20, r24
    18e4:	59 2b       	or	r21, r25
    18e6:	6a 2b       	or	r22, r26
    18e8:	7b 2b       	or	r23, r27
    blue = (buffer[0+15]&(~MSB5))|(buffer[0+16]<<3)|(buffer[0+17]<<11)|((buffer[0+18]&MSB6)<<19);
    18ea:	08 89       	ldd	r16, Y+16	; 0x10
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	00 0f       	add	r16, r16
    18f0:	11 1f       	adc	r17, r17
    18f2:	00 0f       	add	r16, r16
    18f4:	11 1f       	adc	r17, r17
    18f6:	00 0f       	add	r16, r16
    18f8:	11 1f       	adc	r17, r17
    18fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	87 70       	andi	r24, 0x07	; 7
    1900:	08 2b       	or	r16, r24
    1902:	19 2b       	or	r17, r25
    1904:	29 89       	ldd	r18, Y+17	; 0x11
    1906:	92 2f       	mov	r25, r18
    1908:	99 0f       	add	r25, r25
    190a:	99 0f       	add	r25, r25
    190c:	99 0f       	add	r25, r25
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 2b       	or	r16, r24
    1912:	19 2b       	or	r17, r25
    1914:	22 27       	eor	r18, r18
    1916:	17 fd       	sbrc	r17, 7
    1918:	20 95       	com	r18
    191a:	32 2f       	mov	r19, r18
    green = ((buffer[30+1]&(~MSB2)))|(buffer[30+2]<<6)|(buffer[30+3]<<14)|((buffer[30+4]&MSB3)<<22);
    191c:	c8 a0       	ldd	r12, Y+32	; 0x20
    191e:	dd 24       	eor	r13, r13
    1920:	00 24       	eor	r0, r0
    1922:	d6 94       	lsr	r13
    1924:	c7 94       	ror	r12
    1926:	07 94       	ror	r0
    1928:	d6 94       	lsr	r13
    192a:	c7 94       	ror	r12
    192c:	07 94       	ror	r0
    192e:	dc 2c       	mov	r13, r12
    1930:	c0 2c       	mov	r12, r0
    1932:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	8f 73       	andi	r24, 0x3F	; 63
    1938:	c8 2a       	or	r12, r24
    193a:	d9 2a       	or	r13, r25
    193c:	e9 a1       	ldd	r30, Y+33	; 0x21
    193e:	9e 2f       	mov	r25, r30
    1940:	92 95       	swap	r25
    1942:	99 0f       	add	r25, r25
    1944:	99 0f       	add	r25, r25
    1946:	90 7c       	andi	r25, 0xC0	; 192
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	c8 2a       	or	r12, r24
    194c:	d9 2a       	or	r13, r25
    194e:	ee 24       	eor	r14, r14
    1950:	d7 fc       	sbrc	r13, 7
    1952:	e0 94       	com	r14
    1954:	fe 2c       	mov	r15, r14
    leds(0,red,blue,green);
    1956:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    //LAYER 1
    red = ((buffer[0+3]&(~MSB1)))|(buffer[0+4]<<7)|(buffer[0+5]<<15)|((buffer[0+6]&MSB2)<<23);
    195a:	4c 81       	ldd	r20, Y+4	; 0x04
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	56 95       	lsr	r21
    1960:	54 2f       	mov	r21, r20
    1962:	44 27       	eor	r20, r20
    1964:	57 95       	ror	r21
    1966:	47 95       	ror	r20
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	8f 77       	andi	r24, 0x7F	; 127
    196e:	48 2b       	or	r20, r24
    1970:	59 2b       	or	r21, r25
    1972:	2d 81       	ldd	r18, Y+5	; 0x05
    1974:	92 2f       	mov	r25, r18
    1976:	97 95       	ror	r25
    1978:	99 27       	eor	r25, r25
    197a:	97 95       	ror	r25
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	48 2b       	or	r20, r24
    1980:	59 2b       	or	r21, r25
    1982:	66 27       	eor	r22, r22
    1984:	57 fd       	sbrc	r21, 7
    1986:	60 95       	com	r22
    1988:	76 2f       	mov	r23, r22
    blue = (buffer[0+18]&(~MSB6))|(buffer[0+19]<<2)|(buffer[0+20]<<10)|((buffer[0+21]&MSB7)<<18);
    198a:	0b 89       	ldd	r16, Y+19	; 0x13
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	00 0f       	add	r16, r16
    1990:	11 1f       	adc	r17, r17
    1992:	00 0f       	add	r16, r16
    1994:	11 1f       	adc	r17, r17
    1996:	8a 89       	ldd	r24, Y+18	; 0x12
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	83 70       	andi	r24, 0x03	; 3
    199c:	08 2b       	or	r16, r24
    199e:	19 2b       	or	r17, r25
    19a0:	2c 89       	ldd	r18, Y+20	; 0x14
    19a2:	92 2f       	mov	r25, r18
    19a4:	99 0f       	add	r25, r25
    19a6:	99 0f       	add	r25, r25
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 2b       	or	r16, r24
    19ac:	19 2b       	or	r17, r25
    19ae:	22 27       	eor	r18, r18
    19b0:	17 fd       	sbrc	r17, 7
    19b2:	20 95       	com	r18
    19b4:	32 2f       	mov	r19, r18
    green = ((buffer[30+4]&(~MSB3)))|(buffer[30+5]<<5)|(buffer[30+6]<<13)|((buffer[30+7]&MSB4)<<21);
    19b6:	cb a0       	ldd	r12, Y+35	; 0x23
    19b8:	dd 24       	eor	r13, r13
    19ba:	cc 0c       	add	r12, r12
    19bc:	dd 1c       	adc	r13, r13
    19be:	c2 94       	swap	r12
    19c0:	d2 94       	swap	r13
    19c2:	80 ef       	ldi	r24, 0xF0	; 240
    19c4:	d8 22       	and	r13, r24
    19c6:	dc 24       	eor	r13, r12
    19c8:	c8 22       	and	r12, r24
    19ca:	dc 24       	eor	r13, r12
    19cc:	8a a1       	ldd	r24, Y+34	; 0x22
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	8f 71       	andi	r24, 0x1F	; 31
    19d2:	c8 2a       	or	r12, r24
    19d4:	d9 2a       	or	r13, r25
    19d6:	ec a1       	ldd	r30, Y+36	; 0x24
    19d8:	9e 2f       	mov	r25, r30
    19da:	92 95       	swap	r25
    19dc:	99 0f       	add	r25, r25
    19de:	90 7e       	andi	r25, 0xE0	; 224
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	c8 2a       	or	r12, r24
    19e4:	d9 2a       	or	r13, r25
    19e6:	ee 24       	eor	r14, r14
    19e8:	d7 fc       	sbrc	r13, 7
    19ea:	e0 94       	com	r14
    19ec:	fe 2c       	mov	r15, r14
    leds(1,red,blue,green);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    //LAYER 2
    red = (buffer[0+6]&(~MSB2))|(buffer[0+7]<<6)|(buffer[0+8]<<14)|((buffer[0+9]&MSB3)<<22);
    19f4:	4f 81       	ldd	r20, Y+7	; 0x07
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	00 24       	eor	r0, r0
    19fa:	56 95       	lsr	r21
    19fc:	47 95       	ror	r20
    19fe:	07 94       	ror	r0
    1a00:	56 95       	lsr	r21
    1a02:	47 95       	ror	r20
    1a04:	07 94       	ror	r0
    1a06:	54 2f       	mov	r21, r20
    1a08:	40 2d       	mov	r20, r0
    1a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	8f 73       	andi	r24, 0x3F	; 63
    1a10:	48 2b       	or	r20, r24
    1a12:	59 2b       	or	r21, r25
    1a14:	28 85       	ldd	r18, Y+8	; 0x08
    1a16:	92 2f       	mov	r25, r18
    1a18:	92 95       	swap	r25
    1a1a:	99 0f       	add	r25, r25
    1a1c:	99 0f       	add	r25, r25
    1a1e:	90 7c       	andi	r25, 0xC0	; 192
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	48 2b       	or	r20, r24
    1a24:	59 2b       	or	r21, r25
    1a26:	66 27       	eor	r22, r22
    1a28:	57 fd       	sbrc	r21, 7
    1a2a:	60 95       	com	r22
    1a2c:	76 2f       	mov	r23, r22
    blue = (buffer[0+21]&(~MSB7))|(buffer[0+22]<<1)|(buffer[0+23]<<9)|((buffer[0+24])<<17);
    1a2e:	0e 89       	ldd	r16, Y+22	; 0x16
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	00 0f       	add	r16, r16
    1a34:	11 1f       	adc	r17, r17
    1a36:	8d 89       	ldd	r24, Y+21	; 0x15
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	08 2b       	or	r16, r24
    1a3e:	19 2b       	or	r17, r25
    1a40:	2f 89       	ldd	r18, Y+23	; 0x17
    1a42:	92 2f       	mov	r25, r18
    1a44:	99 0f       	add	r25, r25
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	08 2b       	or	r16, r24
    1a4a:	19 2b       	or	r17, r25
    1a4c:	28 8d       	ldd	r18, Y+24	; 0x18
    1a4e:	92 2f       	mov	r25, r18
    1a50:	99 27       	eor	r25, r25
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	08 2b       	or	r16, r24
    1a56:	19 2b       	or	r17, r25
    1a58:	22 27       	eor	r18, r18
    1a5a:	17 fd       	sbrc	r17, 7
    1a5c:	20 95       	com	r18
    1a5e:	32 2f       	mov	r19, r18
    green = ((buffer[30+7]&(~MSB4)))|(buffer[30+8]<<4)|(buffer[30+9]<<12)|((buffer[30+10]&MSB5)<<20);
    1a60:	ce a0       	ldd	r12, Y+38	; 0x26
    1a62:	dd 24       	eor	r13, r13
    1a64:	c2 94       	swap	r12
    1a66:	d2 94       	swap	r13
    1a68:	a0 ef       	ldi	r26, 0xF0	; 240
    1a6a:	da 22       	and	r13, r26
    1a6c:	dc 24       	eor	r13, r12
    1a6e:	ca 22       	and	r12, r26
    1a70:	dc 24       	eor	r13, r12
    1a72:	8d a1       	ldd	r24, Y+37	; 0x25
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	8f 70       	andi	r24, 0x0F	; 15
    1a78:	c8 2a       	or	r12, r24
    1a7a:	d9 2a       	or	r13, r25
    1a7c:	ef a1       	ldd	r30, Y+39	; 0x27
    1a7e:	9e 2f       	mov	r25, r30
    1a80:	92 95       	swap	r25
    1a82:	90 7f       	andi	r25, 0xF0	; 240
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	c8 2a       	or	r12, r24
    1a88:	d9 2a       	or	r13, r25
    1a8a:	ee 24       	eor	r14, r14
    1a8c:	d7 fc       	sbrc	r13, 7
    1a8e:	e0 94       	com	r14
    1a90:	fe 2c       	mov	r15, r14
    leds(2,red,blue,green);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    //LAYER 3
    red = ((buffer[0+9]&(~MSB3)))|(buffer[0+10]<<5)|(buffer[0+11]<<13)|((buffer[0+12]&MSB4)<<21);
    1a98:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	44 0f       	add	r20, r20
    1a9e:	55 1f       	adc	r21, r21
    1aa0:	42 95       	swap	r20
    1aa2:	52 95       	swap	r21
    1aa4:	50 7f       	andi	r21, 0xF0	; 240
    1aa6:	54 27       	eor	r21, r20
    1aa8:	40 7f       	andi	r20, 0xF0	; 240
    1aaa:	54 27       	eor	r21, r20
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	8f 71       	andi	r24, 0x1F	; 31
    1ab2:	48 2b       	or	r20, r24
    1ab4:	59 2b       	or	r21, r25
    1ab6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ab8:	92 2f       	mov	r25, r18
    1aba:	92 95       	swap	r25
    1abc:	99 0f       	add	r25, r25
    1abe:	90 7e       	andi	r25, 0xE0	; 224
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	48 2b       	or	r20, r24
    1ac4:	59 2b       	or	r21, r25
    1ac6:	66 27       	eor	r22, r22
    1ac8:	57 fd       	sbrc	r21, 7
    1aca:	60 95       	com	r22
    1acc:	76 2f       	mov	r23, r22
    blue = (buffer[0+25])|(buffer[0+26]<<8)|(buffer[0+27]<<16)|((buffer[0+28]&MSB1)<<24);
    1ace:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1ad4:	92 2f       	mov	r25, r18
    1ad6:	99 27       	eor	r25, r25
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	08 2b       	or	r16, r24
    1adc:	19 2b       	or	r17, r25
    1ade:	89 8d       	ldd	r24, Y+25	; 0x19
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	08 2b       	or	r16, r24
    1ae4:	19 2b       	or	r17, r25
    1ae6:	22 27       	eor	r18, r18
    1ae8:	17 fd       	sbrc	r17, 7
    1aea:	20 95       	com	r18
    1aec:	32 2f       	mov	r19, r18
    green = ((buffer[30+10]&(~MSB5)))|(buffer[30+11]<<3)|(buffer[30+12]<<11)|((buffer[30+13]&MSB6)<<19);
    1aee:	c9 a4       	ldd	r12, Y+41	; 0x29
    1af0:	dd 24       	eor	r13, r13
    1af2:	cc 0c       	add	r12, r12
    1af4:	dd 1c       	adc	r13, r13
    1af6:	cc 0c       	add	r12, r12
    1af8:	dd 1c       	adc	r13, r13
    1afa:	cc 0c       	add	r12, r12
    1afc:	dd 1c       	adc	r13, r13
    1afe:	88 a5       	ldd	r24, Y+40	; 0x28
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	87 70       	andi	r24, 0x07	; 7
    1b04:	c8 2a       	or	r12, r24
    1b06:	d9 2a       	or	r13, r25
    1b08:	ea a5       	ldd	r30, Y+42	; 0x2a
    1b0a:	9e 2f       	mov	r25, r30
    1b0c:	99 0f       	add	r25, r25
    1b0e:	99 0f       	add	r25, r25
    1b10:	99 0f       	add	r25, r25
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	c8 2a       	or	r12, r24
    1b16:	d9 2a       	or	r13, r25
    1b18:	ee 24       	eor	r14, r14
    1b1a:	d7 fc       	sbrc	r13, 7
    1b1c:	e0 94       	com	r14
    1b1e:	fe 2c       	mov	r15, r14
    leds(3,red,blue,green);
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    //LAYER 4
    red = ((buffer[0+12]&(~MSB4)))|(buffer[0+13]<<4)|(buffer[0+14]<<12)|((buffer[0+15]&MSB5)<<20);
    1b26:	4d 85       	ldd	r20, Y+13	; 0x0d
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	42 95       	swap	r20
    1b2c:	52 95       	swap	r21
    1b2e:	50 7f       	andi	r21, 0xF0	; 240
    1b30:	54 27       	eor	r21, r20
    1b32:	40 7f       	andi	r20, 0xF0	; 240
    1b34:	54 27       	eor	r21, r20
    1b36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	8f 70       	andi	r24, 0x0F	; 15
    1b3c:	48 2b       	or	r20, r24
    1b3e:	59 2b       	or	r21, r25
    1b40:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b42:	92 2f       	mov	r25, r18
    1b44:	92 95       	swap	r25
    1b46:	90 7f       	andi	r25, 0xF0	; 240
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	48 2b       	or	r20, r24
    1b4c:	59 2b       	or	r21, r25
    1b4e:	66 27       	eor	r22, r22
    1b50:	57 fd       	sbrc	r21, 7
    1b52:	60 95       	com	r22
    1b54:	76 2f       	mov	r23, r22
    blue = ((buffer[0+28]&(~MSB1)))|(buffer[0+29]<<7)|(buffer[30]<<15)|((buffer[30+1]&MSB2)<<23);
    1b56:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	16 95       	lsr	r17
    1b5c:	10 2f       	mov	r17, r16
    1b5e:	00 27       	eor	r16, r16
    1b60:	17 95       	ror	r17
    1b62:	07 95       	ror	r16
    1b64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	8f 77       	andi	r24, 0x7F	; 127
    1b6a:	08 2b       	or	r16, r24
    1b6c:	19 2b       	or	r17, r25
    1b6e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1b70:	92 2f       	mov	r25, r18
    1b72:	97 95       	ror	r25
    1b74:	99 27       	eor	r25, r25
    1b76:	97 95       	ror	r25
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	08 2b       	or	r16, r24
    1b7c:	19 2b       	or	r17, r25
    1b7e:	22 27       	eor	r18, r18
    1b80:	17 fd       	sbrc	r17, 7
    1b82:	20 95       	com	r18
    1b84:	32 2f       	mov	r19, r18
    green = ((buffer[30+13]&(~MSB6)))|(buffer[30+14]<<2)|(buffer[30+15]<<10)|((buffer[30+15]&MSB7)<<18);
    1b86:	cc a4       	ldd	r12, Y+44	; 0x2c
    1b88:	dd 24       	eor	r13, r13
    1b8a:	cc 0c       	add	r12, r12
    1b8c:	dd 1c       	adc	r13, r13
    1b8e:	cc 0c       	add	r12, r12
    1b90:	dd 1c       	adc	r13, r13
    1b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	83 70       	andi	r24, 0x03	; 3
    1b98:	c8 2a       	or	r12, r24
    1b9a:	d9 2a       	or	r13, r25
    1b9c:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b9e:	9e 2f       	mov	r25, r30
    1ba0:	99 0f       	add	r25, r25
    1ba2:	99 0f       	add	r25, r25
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	c8 2a       	or	r12, r24
    1ba8:	d9 2a       	or	r13, r25
    1baa:	ee 24       	eor	r14, r14
    1bac:	d7 fc       	sbrc	r13, 7
    1bae:	e0 94       	com	r14
    1bb0:	fe 2c       	mov	r15, r14
    leds(4,red,blue,green);
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	08 95       	ret

00001bca <Transmit>:
        }
    }
}
*/

void Transmit(uint8_t *buffer, uint8_t buffersize){
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	7c 01       	movw	r14, r24
        uint16_t counter = 0;
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	10 e0       	ldi	r17, 0x00	; 0
        while (mirf_send (buffer, BUFFER_SIZE) && counter < 1000)
    1be2:	0a c0       	rjmp	.+20     	; 0x1bf8 <Transmit+0x2e>
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	08 3e       	cpi	r16, 0xE8	; 232
    1be8:	19 07       	cpc	r17, r25
    1bea:	c1 f0       	breq	.+48     	; 0x1c1c <Transmit+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bec:	8a e1       	ldi	r24, 0x1A	; 26
    1bee:	8a 95       	dec	r24
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <Transmit+0x24>
    1bf2:	00 c0       	rjmp	.+0      	; 0x1bf4 <Transmit+0x2a>
        {
            _delay_us(10);
            counter++;
    1bf4:	0f 5f       	subi	r16, 0xFF	; 255
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
}
*/

void Transmit(uint8_t *buffer, uint8_t buffersize){
        uint16_t counter = 0;
        while (mirf_send (buffer, BUFFER_SIZE) && counter < 1000)
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	60 e2       	ldi	r22, 0x20	; 32
    1bfc:	0e 94 76 10 	call	0x20ec	; 0x20ec <mirf_send>
    1c00:	88 23       	and	r24, r24
    1c02:	81 f7       	brne	.-32     	; 0x1be4 <Transmit+0x1a>
        {
            _delay_us(10);
            counter++;
        }

        if (counter >= 1000)
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	08 3e       	cpi	r16, 0xE8	; 232
    1c08:	18 07       	cpc	r17, r24
    1c0a:	40 f4       	brcc	.+16     	; 0x1c1c <Transmit+0x52>
            _delay_us(4500);
            mirf_config_register(CONFIG, (config | (1<<PWR_UP)));
            _delay_us(4500);
            //transmit_string("e");
        }
}
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	08 95       	ret
            counter++;
        }

        if (counter >= 1000)
        {
            uint8_t config  = 0;
    1c1c:	19 82       	std	Y+1, r1	; 0x01
            mirf_read_register (CONFIG, &config, 1);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	be 01       	movw	r22, r28
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 35 10 	call	0x206a	; 0x206a <mirf_read_register>
            mirf_config_register(CONFIG, (config & ~(1<<PWR_UP)));
    1c2c:	69 81       	ldd	r22, Y+1	; 0x01
    1c2e:	6d 7f       	andi	r22, 0xFD	; 253
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    1c36:	87 e2       	ldi	r24, 0x27	; 39
    1c38:	93 e2       	ldi	r25, 0x23	; 35
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <Transmit+0x70>
    1c3e:	00 c0       	rjmp	.+0      	; 0x1c40 <Transmit+0x76>
    1c40:	00 00       	nop
            _delay_us(4500);
            mirf_config_register(CONFIG, (config | (1<<PWR_UP)));
    1c42:	69 81       	ldd	r22, Y+1	; 0x01
    1c44:	62 60       	ori	r22, 0x02	; 2
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    1c4c:	87 e2       	ldi	r24, 0x27	; 39
    1c4e:	93 e2       	ldi	r25, 0x23	; 35
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <Transmit+0x86>
    1c54:	00 c0       	rjmp	.+0      	; 0x1c56 <Transmit+0x8c>
    1c56:	00 00       	nop
            _delay_us(4500);
            //transmit_string("e");
        }
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	08 95       	ret

00001c68 <Receive>:


int8_t Receive(uint8_t *buffer,uint8_t *receive_buffer,uint8_t buffersize){
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
    1c72:	8b 01       	movw	r16, r22
        //uint8_t i = 0;
		while (!mirf_data_ready()){
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <Receive+0x14>
            //test_cube(buffer);
            //pattern(item,frame_num);
            display(buffer);
    1c76:	ce 01       	movw	r24, r28
    1c78:	0e 94 0a 09 	call	0x1214	; 0x1214 <display>
}


int8_t Receive(uint8_t *buffer,uint8_t *receive_buffer,uint8_t buffersize){
        //uint8_t i = 0;
		while (!mirf_data_ready()){
    1c7c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <mirf_data_ready>
    1c80:	88 23       	and	r24, r24
    1c82:	c9 f3       	breq	.-14     	; 0x1c76 <Receive+0xe>
                //LED1_ON;
            //    return -1;
           // }
            //i++;
        }
		mirf_get_data(receive_buffer);
    1c84:	c8 01       	movw	r24, r16
    1c86:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <mirf_get_data>
        //test_cube(buffer);
        return 1;
}
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <init>:
}
*/

void init(){
	// Initialize AVR for use with mirf
	mirf_init();
    1c96:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c9a:	8f e7       	ldi	r24, 0x7F	; 127
    1c9c:	98 e3       	ldi	r25, 0x38	; 56
    1c9e:	a1 e0       	ldi	r26, 0x01	; 1
    1ca0:	81 50       	subi	r24, 0x01	; 1
    1ca2:	90 40       	sbci	r25, 0x00	; 0
    1ca4:	a0 40       	sbci	r26, 0x00	; 0
    1ca6:	e1 f7       	brne	.-8      	; 0x1ca0 <init+0xa>
    1ca8:	00 c0       	rjmp	.+0      	; 0x1caa <init+0x14>
    1caa:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
}
    1cac:	08 95       	ret

00001cae <init2>:
void init2(uint8_t *buffer){
	// Configure mirf
	mirf_config();
    1cae:	0e 94 25 10 	call	0x204a	; 0x204a <mirf_config>
}
    1cb2:	08 95       	ret

00001cb4 <sensors>:

uint8_t sensors(){
    return (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
    1cb4:	83 b1       	in	r24, 0x03	; 3
    1cb6:	80 95       	com	r24
}
    1cb8:	8f 70       	andi	r24, 0x0F	; 15
    1cba:	08 95       	ret

00001cbc <main>:


int main (void)
{
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	c2 56       	subi	r28, 0x62	; 98
    1cde:	d0 40       	sbci	r29, 0x00	; 0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    1cea:	84 b1       	in	r24, 0x04	; 4
    1cec:	80 67       	ori	r24, 0x70	; 112
    1cee:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
    1cf0:	85 b1       	in	r24, 0x05	; 5
    1cf2:	8f 60       	ori	r24, 0x0F	; 15
    1cf4:	85 b9       	out	0x05, r24	; 5
    init();
    1cf6:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <init>
    //uint8_t temp_buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
    //    'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    uint8_t receive_buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
    1cfa:	4e 01       	movw	r8, r28
    1cfc:	08 94       	sec
    1cfe:	81 1c       	adc	r8, r1
    1d00:	91 1c       	adc	r9, r1
    1d02:	d4 01       	movw	r26, r8
    1d04:	e1 e4       	ldi	r30, 0x41	; 65
    1d06:	f1 e0       	ldi	r31, 0x01	; 1
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	01 90       	ld	r0, Z+
    1d0c:	0d 92       	st	X+, r0
    1d0e:	81 50       	subi	r24, 0x01	; 1
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <main+0x4e>
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    uint8_t frame_buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    //uint32_t color = 0;
    uint8_t buffer [64] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
    1d12:	31 e2       	ldi	r19, 0x21	; 33
    1d14:	a3 2e       	mov	r10, r19
    1d16:	b1 2c       	mov	r11, r1
    1d18:	ac 0e       	add	r10, r28
    1d1a:	bd 1e       	adc	r11, r29
    1d1c:	d5 01       	movw	r26, r10
    1d1e:	e1 e0       	ldi	r30, 0x01	; 1
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	80 e4       	ldi	r24, 0x40	; 64
    1d24:	01 90       	ld	r0, Z+
    1d26:	0d 92       	st	X+, r0
    1d28:	81 50       	subi	r24, 0x01	; 1
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <main+0x68>
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    //uint16_t i = 0;
    
	sei();
    1d2c:	78 94       	sei
	// Wait for mirf to come up
	_delay_ms(50);
}
void init2(uint8_t *buffer){
	// Configure mirf
	mirf_config();
    1d2e:	0e 94 25 10 	call	0x204a	; 0x204a <mirf_config>
    //uint16_t i = 0;
    
	sei();
    init2(receive_buffer);
    //uint16_t counter = 0;
    leds(0,1,0,0);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	00 e0       	ldi	r16, 0x00	; 0
    1d3e:	10 e0       	ldi	r17, 0x00	; 0
    1d40:	98 01       	movw	r18, r16
    1d42:	cc 24       	eor	r12, r12
    1d44:	dd 24       	eor	r13, r13
    1d46:	76 01       	movw	r14, r12
    1d48:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(1,1,0,0);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	98 01       	movw	r18, r16
    1d5c:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(2,1,0,0);
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	00 e0       	ldi	r16, 0x00	; 0
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	98 01       	movw	r18, r16
    1d70:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(3,1,0,0);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	00 e0       	ldi	r16, 0x00	; 0
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	98 01       	movw	r18, r16
    1d84:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    leds(4,1,0,0);
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	00 e0       	ldi	r16, 0x00	; 0
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	98 01       	movw	r18, r16
    1d98:	0e 94 a8 07 	call	0xf50	; 0xf50 <leds>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	94 e3       	ldi	r25, 0x34	; 52
    1da0:	ac e0       	ldi	r26, 0x0C	; 12
    1da2:	81 50       	subi	r24, 0x01	; 1
    1da4:	90 40       	sbci	r25, 0x00	; 0
    1da6:	a0 40       	sbci	r26, 0x00	; 0
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <main+0xe6>
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <main+0xf0>
    1dac:	00 00       	nop
uint8_t sensors(){
    return (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
}


int main (void)
    1dae:	ce 01       	movw	r24, r28
    1db0:	8f 59       	subi	r24, 0x9F	; 159
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	f5 01       	movw	r30, r10
    leds(3,1,0,0);
    leds(4,1,0,0);
    _delay_ms(500);
    uint8_t i = 0;
    for(i = 0; i<64;i++){
        buffer[i] = 0;
    1db6:	11 92       	st	Z+, r1
    leds(2,1,0,0);
    leds(3,1,0,0);
    leds(4,1,0,0);
    _delay_ms(500);
    uint8_t i = 0;
    for(i = 0; i<64;i++){
    1db8:	e8 17       	cp	r30, r24
    1dba:	f9 07       	cpc	r31, r25
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <main+0xfa>
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	03 5f       	subi	r16, 0xF3	; 243
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	25 e3       	ldi	r18, 0x35	; 53
    1dc6:	62 2e       	mov	r6, r18
    1dc8:	71 2c       	mov	r7, r1
    1dca:	6c 0e       	add	r6, r28
    1dcc:	7d 1e       	adc	r7, r29
                            }
                        }
                    }
                }

                receive_buffer[0] = ID_SELF;
    1dce:	dd 24       	eor	r13, r13
    1dd0:	d3 94       	inc	r13
                receive_buffer[1] = ACK;
    1dd2:	91 e1       	ldi	r25, 0x11	; 17
    1dd4:	c9 2e       	mov	r12, r25
                        }
                        //color[1] = (receive_buffer[8]) | ((uint32_t)(receive_buffer[7])<<8) | ((uint32_t)(receive_buffer[6])<<16) | ((uint32_t)(receive_buffer[5])<<24);
                        if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
                            if(ID_SELF == receive_buffer[0]){
                                frame_num = receive_buffer[2];
                                item = 1;
    1dd6:	d5 01       	movw	r26, r10
    1dd8:	98 96       	adiw	r26, 0x28	; 40
    1dda:	a3 96       	adiw	r28, 0x23	; 35
    1ddc:	bf af       	std	Y+63, r27	; 0x3f
    1dde:	ae af       	std	Y+62, r26	; 0x3e
    1de0:	a3 97       	sbiw	r28, 0x23	; 35
        buffer[i] = 0;
    }
	
	while (1)
	{
        if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
    1de2:	c5 01       	movw	r24, r10
    1de4:	b4 01       	movw	r22, r8
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Receive>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <main+0x126>
            if(ID_SELF == receive_buffer[0]){
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	b1 f7       	brne	.-20     	; 0x1de2 <main+0x126>
                frame_num = receive_buffer[2];
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	90 93 a2 01 	sts	0x01A2, r25
                item = 1;
    1dfc:	80 93 a1 01 	sts	0x01A1, r24
    1e00:	78 01       	movw	r14, r16
uint8_t sensors(){
    return (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
}


int main (void)
    1e02:	d5 01       	movw	r26, r10
    1e04:	f8 01       	movw	r30, r16
            if(ID_SELF == receive_buffer[0]){
                frame_num = receive_buffer[2];
                item = 1;

                for(i = 0; i<20;i++){
                    buffer[i] = receive_buffer[i+DATA_START];
    1e06:	81 91       	ld	r24, Z+
    1e08:	8d 93       	st	X+, r24
        if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
            if(ID_SELF == receive_buffer[0]){
                frame_num = receive_buffer[2];
                item = 1;

                for(i = 0; i<20;i++){
    1e0a:	ea 15       	cp	r30, r10
    1e0c:	fb 05       	cpc	r31, r11
    1e0e:	d9 f7       	brne	.-10     	; 0x1e06 <main+0x14a>
                    buffer[i] = receive_buffer[i+DATA_START];
                }

                //color[0] = (receive_buffer[8]) | ((uint32_t)(receive_buffer[7])<<8) | ((uint32_t)(receive_buffer[6])<<16) | ((uint32_t)(receive_buffer[5])<<24);
                if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
    1e10:	c5 01       	movw	r24, r10
    1e12:	b4 01       	movw	r22, r8
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Receive>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <main+0x17e>
                            }
                        }
                    }
                }

                receive_buffer[0] = ID_SELF;
    1e1e:	d9 82       	std	Y+1, r13	; 0x01
                receive_buffer[1] = ACK;
    1e20:	ca 82       	std	Y+2, r12	; 0x02
                receive_buffer[2] = SENSORS;
    1e22:	83 b1       	in	r24, 0x03	; 3
    1e24:	80 95       	com	r24
    1e26:	8f 70       	andi	r24, 0x0F	; 15
    1e28:	8b 83       	std	Y+3, r24	; 0x03
                //Transmit(receive_buffer,BUFFER_SIZE);
                if (receive_buffer[3] == RESPONSE){
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	c9 f6       	brne	.-78     	; 0x1de2 <main+0x126>
                    Transmit(receive_buffer,BUFFER_SIZE);
    1e30:	c4 01       	movw	r24, r8
    1e32:	60 e2       	ldi	r22, 0x20	; 32
    1e34:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <Transmit>
    1e38:	d4 cf       	rjmp	.-88     	; 0x1de2 <main+0x126>
                    buffer[i] = receive_buffer[i+DATA_START];
                }

                //color[0] = (receive_buffer[8]) | ((uint32_t)(receive_buffer[7])<<8) | ((uint32_t)(receive_buffer[6])<<16) | ((uint32_t)(receive_buffer[5])<<24);
                if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
                    if(ID_SELF == receive_buffer[0]){
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	79 f7       	brne	.-34     	; 0x1e1e <main+0x162>
                        frame_num = receive_buffer[2];
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	90 93 a2 01 	sts	0x01A2, r25
                        item = 1;
    1e46:	80 93 a1 01 	sts	0x01A1, r24
    1e4a:	d3 01       	movw	r26, r6
    1e4c:	f8 01       	movw	r30, r16

                        for(i = 0; i<20;i++){
                            buffer[i+20] = receive_buffer[i+DATA_START];
    1e4e:	81 91       	ld	r24, Z+
    1e50:	8d 93       	st	X+, r24
                if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
                    if(ID_SELF == receive_buffer[0]){
                        frame_num = receive_buffer[2];
                        item = 1;

                        for(i = 0; i<20;i++){
    1e52:	ea 15       	cp	r30, r10
    1e54:	fb 05       	cpc	r31, r11
    1e56:	d9 f7       	brne	.-10     	; 0x1e4e <main+0x192>
                            buffer[i+20] = receive_buffer[i+DATA_START];
                        }
                        //color[1] = (receive_buffer[8]) | ((uint32_t)(receive_buffer[7])<<8) | ((uint32_t)(receive_buffer[6])<<16) | ((uint32_t)(receive_buffer[5])<<24);
                        if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
    1e58:	c5 01       	movw	r24, r10
    1e5a:	b4 01       	movw	r22, r8
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Receive>
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	e1 f6       	brne	.-72     	; 0x1e1e <main+0x162>
                            if(ID_SELF == receive_buffer[0]){
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	c9 f6       	brne	.-78     	; 0x1e1e <main+0x162>
                                frame_num = receive_buffer[2];
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	90 93 a2 01 	sts	0x01A2, r25
                                item = 1;
    1e72:	80 93 a1 01 	sts	0x01A1, r24
    1e76:	a3 96       	adiw	r28, 0x23	; 35
    1e78:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e7c:	a3 97       	sbiw	r28, 0x23	; 35

                                for(i = 0; i<20;i++){
                                    buffer[i+40] = receive_buffer[i+DATA_START];
    1e7e:	d7 01       	movw	r26, r14
    1e80:	8d 91       	ld	r24, X+
    1e82:	7d 01       	movw	r14, r26
    1e84:	81 93       	st	Z+, r24
                        if(Receive(buffer,receive_buffer,BUFFER_SIZE) == 1){
                            if(ID_SELF == receive_buffer[0]){
                                frame_num = receive_buffer[2];
                                item = 1;

                                for(i = 0; i<20;i++){
    1e86:	aa 15       	cp	r26, r10
    1e88:	bb 05       	cpc	r27, r11
    1e8a:	c9 f7       	brne	.-14     	; 0x1e7e <main+0x1c2>
                                    buffer[i+40] = receive_buffer[i+DATA_START];
                                }
                                clear = 1;
    1e8c:	d0 92 00 01 	sts	0x0100, r13
                                display(buffer);
    1e90:	c5 01       	movw	r24, r10
    1e92:	0e 94 0a 09 	call	0x1214	; 0x1214 <display>
                                updated = 1;
    1e96:	d0 92 a0 01 	sts	0x01A0, r13
    1e9a:	c1 cf       	rjmp	.-126    	; 0x1e1e <main+0x162>

00001e9c <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    1e9c:	81 b1       	in	r24, 0x01	; 1
    1e9e:	80 67       	ori	r24, 0x70	; 112
    1ea0:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
    1ea2:	8c b5       	in	r24, 0x2c	; 44
    1ea4:	80 65       	ori	r24, 0x50	; 80
    1ea6:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    1ea8:	8d b5       	in	r24, 0x2d	; 45
    1eaa:	81 60       	ori	r24, 0x01	; 1
    1eac:	8d bd       	out	0x2d, r24	; 45


}
    1eae:	08 95       	ret

00001eb0 <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1eb0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    1eb2:	0d b4       	in	r0, 0x2d	; 45
    1eb4:	07 fe       	sbrs	r0, 7
    1eb6:	fd cf       	rjmp	.-6      	; 0x1eb2 <SPI_Transmit+0x2>
	return SPDR;
    1eb8:	8e b5       	in	r24, 0x2e	; 46
}
    1eba:	08 95       	ret

00001ebc <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    1ebc:	66 23       	and	r22, r22
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <SPI_Transmit_All+0x1c>
    1ec0:	e8 2f       	mov	r30, r24
    1ec2:	f9 2f       	mov	r31, r25
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
        SPI_Transmit(data[i]);
    1ec6:	91 91       	ld	r25, Z+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1ec8:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    1eca:	0d b4       	in	r0, 0x2d	; 45
    1ecc:	07 fe       	sbrs	r0, 7
    1ece:	fd cf       	rjmp	.-6      	; 0x1eca <SPI_Transmit_All+0xe>
	return SPDR;
    1ed0:	9e b5       	in	r25, 0x2e	; 46
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	86 17       	cp	r24, r22
    1ed6:	b8 f3       	brcs	.-18     	; 0x1ec6 <SPI_Transmit_All+0xa>
    1ed8:	08 95       	ret

00001eda <SPI_Receive>:
        SPI_Transmit(data[i]);
    }
}

char SPI_Receive(void){
    SPDR = 0xFF;
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	8e bd       	out	0x2e, r24	; 46
    while(bit_is_clear(SPSR,SPIF)){};
    1ede:	0d b4       	in	r0, 0x2d	; 45
    1ee0:	07 fe       	sbrs	r0, 7
    1ee2:	fd cf       	rjmp	.-6      	; 0x1ede <SPI_Receive+0x4>
    return SPDR;
    1ee4:	8e b5       	in	r24, 0x2e	; 46
}
    1ee6:	08 95       	ret

00001ee8 <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    1ee8:	e8 2f       	mov	r30, r24
    1eea:	f9 2f       	mov	r31, r25
    1eec:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
    1eee:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
    1ef0:	0d b4       	in	r0, 0x2d	; 45
    1ef2:	07 fe       	sbrs	r0, 7
    1ef4:	fd cf       	rjmp	.-6      	; 0x1ef0 <SPI_Receive_All+0x8>
        data[i] = SPDR;
    1ef6:	9e b5       	in	r25, 0x2e	; 46
    1ef8:	91 93       	st	Z+, r25
    1efa:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
    1efc:	c1 f7       	brne	.-16     	; 0x1eee <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
    1efe:	08 95       	ret

00001f00 <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    1f00:	44 23       	and	r20, r20
    1f02:	79 f0       	breq	.+30     	; 0x1f22 <SPI_Transceive+0x22>
    1f04:	a8 2f       	mov	r26, r24
    1f06:	b9 2f       	mov	r27, r25
    1f08:	e6 2f       	mov	r30, r22
    1f0a:	f7 2f       	mov	r31, r23
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    1f0e:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1f10:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    1f12:	0d b4       	in	r0, 0x2d	; 45
    1f14:	07 fe       	sbrs	r0, 7
    1f16:	fd cf       	rjmp	.-6      	; 0x1f12 <SPI_Transceive+0x12>
	return SPDR;
    1f18:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    1f1a:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	84 17       	cp	r24, r20
    1f20:	b0 f3       	brcs	.-20     	; 0x1f0e <SPI_Transceive+0xe>
    1f22:	08 95       	ret

00001f24 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRA |= ((1<<CSN)|(1<<CE));
    1f24:	81 b1       	in	r24, 0x01	; 1
    1f26:	83 60       	ori	r24, 0x03	; 3
    1f28:	81 b9       	out	0x01, r24	; 1
    mirf_CE_lo;
    1f2a:	11 98       	cbi	0x02, 1	; 2
    mirf_CSN_hi;
    1f2c:	10 9a       	sbi	0x02, 0	; 2
// Initialize PCINT4 for ATtiny2313
//      GIMSK |= (1<<PCIE);
//      PCMSK |= (1<<PCINT4);

// Initialize PCINT3 for ATtiny167
    PCICR |= (1<<PCIE0);
    1f2e:	e8 e6       	ldi	r30, 0x68	; 104
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	81 60       	ori	r24, 0x01	; 1
    1f36:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT3);
    1f38:	eb e6       	ldi	r30, 0x6B	; 107
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 60       	ori	r24, 0x08	; 8
    1f40:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
    1f42:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <spi_init>
}
    1f46:	08 95       	ret

00001f48 <mirf_data_ready>:
    }
}
extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1f48:	80 91 a3 01 	lds	r24, 0x01A3
    1f4c:	88 23       	and	r24, r24
    1f4e:	11 f0       	breq	.+4      	; 0x1f54 <mirf_data_ready+0xc>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1f52:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1f54:	10 98       	cbi	0x02, 0	; 2
    status = SPI_Receive();               // Read status register
    1f56:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
    1f5a:	10 9a       	sbi	0x02, 0	; 2
    return status & (1<<RX_DR);
    1f5c:	80 74       	andi	r24, 0x40	; 64
    1f5e:	08 95       	ret

00001f60 <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1f6a:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    1f6c:	8f 71       	andi	r24, 0x1F	; 31
    1f6e:	80 62       	ori	r24, 0x20	; 32
    1f70:	69 83       	std	Y+1, r22	; 0x01
    1f72:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    SPI_Transmit(value);
    1f76:	69 81       	ldd	r22, Y+1	; 0x01
    1f78:	86 2f       	mov	r24, r22
    1f7a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    mirf_CSN_hi;
    1f7e:	10 9a       	sbi	0x02, 0	; 2
}
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
    1f8e:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
    1f90:	81 e6       	ldi	r24, 0x61	; 97
    1f92:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
    1f96:	ce 01       	movw	r24, r28
    1f98:	be 01       	movw	r22, r28
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
    1fa0:	10 9a       	sbi	0x02, 0	; 2
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
    1fa2:	87 e0       	ldi	r24, 0x07	; 7
    1fa4:	60 e4       	ldi	r22, 0x40	; 64
    1fa6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
}
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <tx_complete>:
    }
}

void tx_complete(void){
    uint8_t status;
    if (PTX) {
    1fb0:	80 91 a3 01 	lds	r24, 0x01A3
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <tx_complete+0xa>
    1fb8:	08 95       	ret
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    1fba:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Transmit(0x00);               // Read status register
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
        mirf_CSN_hi;                                // Pull up chip select
    1fc2:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    1fc4:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	6b e4       	ldi	r22, 0x4B	; 75
    1fca:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    1fce:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    1fd0:	10 92 a3 01 	sts	0x01A3, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    1fd4:	87 e0       	ldi	r24, 0x07	; 7
    1fd6:	60 e3       	ldi	r22, 0x30	; 48
    1fd8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    1fdc:	08 95       	ret

00001fde <__vector_3>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT0_vect)
{
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	ef 93       	push	r30
    1ffe:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
    2000:	80 91 a3 01 	lds	r24, 0x01A3
    2004:	88 23       	and	r24, r24
    2006:	81 f0       	breq	.+32     	; 0x2028 <__vector_3+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    2008:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
    200a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    200e:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    2010:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	6b e4       	ldi	r22, 0x4B	; 75
    2016:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    201a:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    201c:	10 92 a3 01 	sts	0x01A3, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    2020:	87 e0       	ldi	r24, 0x07	; 7
    2022:	60 e3       	ldi	r22, 0x30	; 48
    2024:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    }
}
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	bf 91       	pop	r27
    202e:	af 91       	pop	r26
    2030:	9f 91       	pop	r25
    2032:	8f 91       	pop	r24
    2034:	7f 91       	pop	r23
    2036:	6f 91       	pop	r22
    2038:	5f 91       	pop	r21
    203a:	4f 91       	pop	r20
    203c:	3f 91       	pop	r19
    203e:	2f 91       	pop	r18
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
    204a:	85 e0       	ldi	r24, 0x05	; 5
    204c:	66 e4       	ldi	r22, 0x46	; 70
    204e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
    2052:	81 e1       	ldi	r24, 0x11	; 17
    2054:	60 e2       	ldi	r22, 0x20	; 32
    2056:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    //mirf_set_TADDR(0xB3B4B5B6F1);



    // Start receiver 
    PTX = 0;        // Start in receiving mode
    205a:	10 92 a3 01 	sts	0x01A3, r1
    RX_POWERUP;     // Power up in receiving mode
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	6b e4       	ldi	r22, 0x4B	; 75
    2062:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
    2066:	11 9a       	sbi	0x02, 1	; 2
}
    2068:	08 95       	ret

0000206a <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    207a:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
    207c:	8f 71       	andi	r24, 0x1F	; 31
    207e:	49 83       	std	Y+1, r20	; 0x01
    2080:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    SPI_Transceive(value,value,len);
    2084:	c8 01       	movw	r24, r16
    2086:	b8 01       	movw	r22, r16
    2088:	49 81       	ldd	r20, Y+1	; 0x01
    208a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <SPI_Transceive>
    mirf_CSN_hi;
    208e:	10 9a       	sbi	0x02, 0	; 2
}
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	0f 92       	push	r0
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    20ac:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    20ae:	8f 71       	andi	r24, 0x1F	; 31
    20b0:	80 62       	ori	r24, 0x20	; 32
    20b2:	49 83       	std	Y+1, r20	; 0x01
    20b4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    SPI_Transmit_All(value,len);
    20b8:	c8 01       	movw	r24, r16
    20ba:	49 81       	ldd	r20, Y+1	; 0x01
    20bc:	64 2f       	mov	r22, r20
    20be:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <SPI_Transmit_All>
    mirf_CSN_hi;
    20c2:	10 9a       	sbi	0x02, 0	; 2
}
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	08 95       	ret

000020d0 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    20d0:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
    20d2:	80 e1       	ldi	r24, 0x10	; 16
    20d4:	45 e0       	ldi	r20, 0x05	; 5
    20d6:	0e 94 4e 10 	call	0x209c	; 0x209c <mirf_write_register>
}
    20da:	08 95       	ret

000020dc <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    20dc:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    20de:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P0,adr,5);
    20e0:	8a e0       	ldi	r24, 0x0A	; 10
    20e2:	45 e0       	ldi	r20, 0x05	; 5
    20e4:	0e 94 4e 10 	call	0x209c	; 0x209c <mirf_write_register>
    mirf_CE_hi;
    20e8:	11 9a       	sbi	0x02, 1	; 2
}
    20ea:	08 95       	ret

000020ec <mirf_send>:


char mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	8c 01       	movw	r16, r24
    2100:	f6 2e       	mov	r15, r22
    uint8_t sreg_original = SREG;
    2102:	ef b6       	in	r14, 0x3f	; 63
    cli ();
    2104:	f8 94       	cli

    uint8_t status = 0;
    2106:	19 82       	std	Y+1, r1	; 0x01
    mirf_read_register (STATUS, &status, 1);
    2108:	87 e0       	ldi	r24, 0x07	; 7
    210a:	be 01       	movw	r22, r28
    210c:	6f 5f       	subi	r22, 0xFF	; 255
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 35 10 	call	0x206a	; 0x206a <mirf_read_register>
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    2116:	1b 99       	sbic	0x03, 3	; 3
    2118:	15 c0       	rjmp	.+42     	; 0x2144 <mirf_send+0x58>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	85 fd       	sbrc	r24, 5
    211e:	0e c0       	rjmp	.+28     	; 0x213c <mirf_send+0x50>
    {
        tx_complete();
    }

    // Restore interrupt state
    SREG = sreg_original;
    2120:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    2122:	80 91 a3 01 	lds	r24, 0x01A3
    2126:	88 23       	and	r24, r24
    2128:	a1 f0       	breq	.+40     	; 0x2152 <mirf_send+0x66>
    {
        return -1; 
    212a:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_Transmit_All(value,len);   // Write payload
    mirf_CSN_hi;                    // Pull up chip select
    
    mirf_CE_hi;                     // Start transmission
    return 0;
}
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	08 95       	ret

    uint8_t status = 0;
    mirf_read_register (STATUS, &status, 1);
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    213c:	80 91 a3 01 	lds	r24, 0x01A3
    2140:	88 23       	and	r24, r24
    2142:	71 f3       	breq	.-36     	; 0x2120 <mirf_send+0x34>
    {
        tx_complete();
    2144:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <tx_complete>
    }

    // Restore interrupt state
    SREG = sreg_original;
    2148:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    214a:	80 91 a3 01 	lds	r24, 0x01A3
    214e:	88 23       	and	r24, r24
    2150:	61 f7       	brne	.-40     	; 0x212a <mirf_send+0x3e>
    {
        return -1; 
    }

    mirf_CE_lo;
    2152:	11 98       	cbi	0x02, 1	; 2

    PTX = 1;                        // Set to transmitter mode
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 a3 01 	sts	0x01A3, r24
    TX_POWERUP;                     // Power up
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	6a e4       	ldi	r22, 0x4A	; 74
    215e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <mirf_config_register>
    //mirf_set_TADDR(0x7878787878);
    
    mirf_CSN_lo;                    // Pull down chip select
    2162:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
    2164:	81 ee       	ldi	r24, 0xE1	; 225
    2166:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    216a:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    216c:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
    216e:	80 ea       	ldi	r24, 0xA0	; 160
    2170:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <SPI_Transmit>
    SPI_Transmit_All(value,len);   // Write payload
    2174:	c8 01       	movw	r24, r16
    2176:	6f 2d       	mov	r22, r15
    2178:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
    217c:	10 9a       	sbi	0x02, 0	; 2
    
    mirf_CE_hi;                     // Start transmission
    217e:	11 9a       	sbi	0x02, 1	; 2
    return 0;
    2180:	80 e0       	ldi	r24, 0x00	; 0
}
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	ef 90       	pop	r14
    2190:	08 95       	ret

00002192 <_exit>:
    2192:	f8 94       	cli

00002194 <__stop_program>:
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <__stop_program>
