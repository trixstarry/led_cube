
leddriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  0000038e  2**0
                  ALLOC
  3 .stab         00001170  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000090b  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e2 ef       	ldi	r30, 0xF2	; 242
  64:	f2 e0       	ldi	r31, 0x02	; 2
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a8 30       	cpi	r26, 0x08	; 8
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a8 e0       	ldi	r26, 0x08	; 8
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	aa 30       	cpi	r26, 0x0A	; 10
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 43 01 	call	0x286	; 0x286 <main>
  86:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  8e:	81 b1       	in	r24, 0x01	; 1
  90:	80 67       	ori	r24, 0x70	; 112
  92:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	81 65       	ori	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  9a:	8d b5       	in	r24, 0x2d	; 45
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bd       	out	0x2d, r24	; 45

}//spi_init
  a0:	08 95       	ret

000000a2 <transmit>:
	
	uint8_t temp = 0;

	temp = (data);
	//load first byte
	SPDR = temp;
  a2:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <transmit+0x2>

	temp = (data>>8);
  aa:	27 2f       	mov	r18, r23
  ac:	38 2f       	mov	r19, r24
  ae:	49 2f       	mov	r20, r25
  b0:	55 27       	eor	r21, r21
	//load second byte
	SPDR = temp;
  b2:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b4:	0d b4       	in	r0, 0x2d	; 45
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <transmit+0x12>

	temp = (data>>16);
  ba:	9c 01       	movw	r18, r24
  bc:	44 27       	eor	r20, r20
  be:	55 27       	eor	r21, r21
	//load third byte
	SPDR = temp;
  c0:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <transmit+0x20>

	temp = (data>>24);
  c8:	69 2f       	mov	r22, r25
  ca:	77 27       	eor	r23, r23
  cc:	88 27       	eor	r24, r24
  ce:	99 27       	eor	r25, r25
	//load fourth byte
	SPDR = temp;
  d0:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <transmit+0x30>
	
	//Toggle latch
	PORTB |= 0x02;
  d8:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(0x02);
  da:	29 98       	cbi	0x05, 1	; 5
}
  dc:	08 95       	ret

000000de <test_run>:

void test_run(void){
	//break the data up into 4 bytes
	
	//load first byte
	SPDR = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <test_run+0x4>
	PORTB |= 0x80;
	PORTB &= ~(0x80);
	*/

	//load second byte
	SPDR = 0xff;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  ec:	0d b4       	in	r0, 0x2d	; 45
  ee:	07 fe       	sbrs	r0, 7
  f0:	fd cf       	rjmp	.-6      	; 0xec <test_run+0xe>
	PORTB |= 0x00;
	PORTB &= ~(0x80);
	*/
	
	//load third byte
	SPDR = 0xff;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <test_run+0x18>
	*/
	


	//load fourth byte
	SPDR = 0xff;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 100:	0d b4       	in	r0, 0x2d	; 45
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <test_run+0x22>
	
	//Toggle latch
	PORTB |= 0x80;
 106:	2f 9a       	sbi	0x05, 7	; 5
	PORTB &= ~(0x80);
 108:	2f 98       	cbi	0x05, 7	; 5
}
 10a:	08 95       	ret

0000010c <on>:

void on(void){
    uint8_t output = -1; //All on
    transmit(output);
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
	}
 118:	08 95       	ret

0000011a <off>:

void off(void){
    uint32_t output = 0;
    transmit(output);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	cb 01       	movw	r24, r22
 120:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 124:	08 95       	ret

00000126 <LED1on>:

void LED1on(void){
    uint32_t output = 0x01000000;
    transmit(output);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 132:	08 95       	ret

00000134 <LED17on>:

void LED17on(void){
    uint32_t output = 0x00000100;
    transmit(output);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	71 e0       	ldi	r23, 0x01	; 1
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 140:	08 95       	ret

00000142 <driver1_count>:

void driver1_count(void){
    static uint16_t count = 0;
    transmit((count<<16));
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	cb 01       	movw	r24, r22
 148:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
    }
 14c:	08 95       	ret

0000014e <driver2_count>:

void driver2_count(void){
    static uint16_t count = 0;
    transmit(count);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	cb 01       	movw	r24, r22
 154:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
    }
 158:	08 95       	ret

0000015a <shift_LED>:

void shift_LED(void){
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
    static uint32_t LED = 0x00000001;
    if(LED == 0){
 162:	60 91 04 01 	lds	r22, 0x0104
 166:	70 91 05 01 	lds	r23, 0x0105
 16a:	80 91 06 01 	lds	r24, 0x0106
 16e:	90 91 07 01 	lds	r25, 0x0107
 172:	61 15       	cp	r22, r1
 174:	71 05       	cpc	r23, r1
 176:	81 05       	cpc	r24, r1
 178:	91 05       	cpc	r25, r1
 17a:	c1 f4       	brne	.+48     	; 0x1ac <shift_LED+0x52>
 17c:	52 e0       	ldi	r21, 0x02	; 2
 17e:	e5 2e       	mov	r14, r21
 180:	f1 2c       	mov	r15, r1
 182:	01 2d       	mov	r16, r1
 184:	11 2d       	mov	r17, r1
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
        LED = 0x00000001;
    }
    transmit(LED);
 18e:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
    LED = LED << 1;
 192:	e0 92 04 01 	sts	0x0104, r14
 196:	f0 92 05 01 	sts	0x0105, r15
 19a:	00 93 06 01 	sts	0x0106, r16
 19e:	10 93 07 01 	sts	0x0107, r17
    }
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret
    transmit(count);
    }

void shift_LED(void){
    static uint32_t LED = 0x00000001;
    if(LED == 0){
 1ac:	7b 01       	movw	r14, r22
 1ae:	8c 01       	movw	r16, r24
 1b0:	ee 0c       	add	r14, r14
 1b2:	ff 1c       	adc	r15, r15
 1b4:	00 1f       	adc	r16, r16
 1b6:	11 1f       	adc	r17, r17
 1b8:	ea cf       	rjmp	.-44     	; 0x18e <shift_LED+0x34>

000001ba <test1>:
    LED = LED << 1;
    }

void test1(void){
    static uint32_t output = -1;
    transmit(output);
 1ba:	6f ef       	ldi	r22, 0xFF	; 255
 1bc:	7f ef       	ldi	r23, 0xFF	; 255
 1be:	cb 01       	movw	r24, r22
 1c0:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 1c4:	08 95       	ret

000001c6 <test2p1>:

void test2p1(void){
    uint32_t output = 0x00010000;
    transmit(output);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 1d2:	08 95       	ret

000001d4 <test2p2>:

void test2p2(void){
    uint32_t output = 0x00000001;
    transmit(output);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
}
 1e0:	08 95       	ret

000001e2 <test3>:

void test3(void){
 1e2:	1f 93       	push	r17
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
 1e4:	10 91 09 01 	lds	r17, 0x0109
 1e8:	12 30       	cpi	r17, 0x02	; 2
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <test3+0x16>
 1ec:	13 30       	cpi	r17, 0x03	; 3
 1ee:	90 f0       	brcs	.+36     	; 0x214 <test3+0x32>
 1f0:	13 30       	cpi	r17, 0x03	; 3
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <test3+0x16>
 1f4:	14 30       	cpi	r17, 0x04	; 4
 1f6:	29 f4       	brne	.+10     	; 0x202 <test3+0x20>
            break;
        case 3:
            transmit(0);
            break;
        case 4:
            transmit(0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	cb 01       	movw	r24, r22
 1fe:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
            break;
    }
    i++;
 202:	81 2f       	mov	r24, r17
 204:	8f 5f       	subi	r24, 0xFF	; 255
    i = i%5;
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodqi4>
 20c:	90 93 09 01 	sts	0x0109, r25
    transmit(output1);
    }
    else{transmit(output2);}
    i++;
    */
}
 210:	1f 91       	pop	r17
 212:	08 95       	ret

void test3(void){
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
 214:	11 23       	and	r17, r17
 216:	49 f0       	breq	.+18     	; 0x22a <test3+0x48>
 218:	11 30       	cpi	r17, 0x01	; 1
 21a:	99 f7       	brne	.-26     	; 0x202 <test3+0x20>
        case 0:
            transmit(output1);
            break;
        case 1:
            transmit(output2);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
            break;
 228:	ec cf       	rjmp	.-40     	; 0x202 <test3+0x20>
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
        case 0:
            transmit(output1);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
            break;
 236:	e5 cf       	rjmp	.-54     	; 0x202 <test3+0x20>

00000238 <ISR>:
//tcnt0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
	static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
	static uint32_t display_count = 0x00000001; //holds count for display 
	uint8_t temp = 0;
	count_7ms++;                //increment count every 7.8125 ms 
 240:	80 91 08 01 	lds	r24, 0x0108
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 08 01 	sts	0x0108, r24
	if ((count_7ms % 1)==0){ //?? interrupts equals one half second 
	//	if((temp % 64) == 0){
			transmit(display_count);
 24a:	e0 90 00 01 	lds	r14, 0x0100
 24e:	f0 90 01 01 	lds	r15, 0x0101
 252:	00 91 02 01 	lds	r16, 0x0102
 256:	10 91 03 01 	lds	r17, 0x0103
 25a:	c8 01       	movw	r24, r16
 25c:	b7 01       	movw	r22, r14
 25e:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit>
			//transmit(0xFFFFFFFF);
			display_count++;
 262:	08 94       	sec
 264:	e1 1c       	adc	r14, r1
 266:	f1 1c       	adc	r15, r1
 268:	01 1d       	adc	r16, r1
 26a:	11 1d       	adc	r17, r1
 26c:	e0 92 00 01 	sts	0x0100, r14
 270:	f0 92 01 01 	sts	0x0101, r15
 274:	00 93 02 01 	sts	0x0102, r16
 278:	10 93 03 01 	sts	0x0103, r17
			//display_count = (display_count << 1); //shift display bit for next time 
			temp++;
//		}
	}
	//if (display_count == 0x00){display_count=0x01;} //display back to 1st positon
}
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	08 95       	ret

00000286 <main>:
//                                main                                 
/***********************************************************************/
int main(){

	//port initialization
	DDRA |= (1<<PA0);  //set port B bits 7,6,5,4,2,1,0  as outputs
 286:	08 9a       	sbi	0x01, 0	; 1
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 288:	81 b1       	in	r24, 0x01	; 1
 28a:	80 67       	ori	r24, 0x70	; 112
 28c:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	81 65       	ori	r24, 0x51	; 81
 292:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 294:	8d b5       	in	r24, 0x2d	; 45
 296:	81 60       	ori	r24, 0x01	; 1
 298:	8d bd       	out	0x2d, r24	; 45
	//tcnt0_init();  //initalize counter timer zero
	spi_init();    //initalize SPI port
	//sei();         //enable interrupts before entering loop
	while(1){
        //test1();
        shift_LED();
 29a:	0e 94 ad 00 	call	0x15a	; 0x15a <shift_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	94 e3       	ldi	r25, 0x34	; 52
 2a2:	ac e0       	ldi	r26, 0x0C	; 12
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	a0 40       	sbci	r26, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x1e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x28>
 2ae:	00 00       	nop
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	94 e3       	ldi	r25, 0x34	; 52
 2b4:	ac e0       	ldi	r26, 0x0C	; 12
 2b6:	81 50       	subi	r24, 0x01	; 1
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	a0 40       	sbci	r26, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x30>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x3a>
 2c0:	00 00       	nop
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	94 e3       	ldi	r25, 0x34	; 52
 2c6:	ac e0       	ldi	r26, 0x0C	; 12
 2c8:	81 50       	subi	r24, 0x01	; 1
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	a0 40       	sbci	r26, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x42>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x4c>
 2d2:	00 00       	nop
 2d4:	e2 cf       	rjmp	.-60     	; 0x29a <main+0x14>

000002d6 <__udivmodqi4>:
 2d6:	99 1b       	sub	r25, r25
 2d8:	79 e0       	ldi	r23, 0x09	; 9
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <__udivmodqi4_ep>

000002dc <__udivmodqi4_loop>:
 2dc:	99 1f       	adc	r25, r25
 2de:	96 17       	cp	r25, r22
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <__udivmodqi4_ep>
 2e2:	96 1b       	sub	r25, r22

000002e4 <__udivmodqi4_ep>:
 2e4:	88 1f       	adc	r24, r24
 2e6:	7a 95       	dec	r23
 2e8:	c9 f7       	brne	.-14     	; 0x2dc <__udivmodqi4_loop>
 2ea:	80 95       	com	r24
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
