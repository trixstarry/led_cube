
leddriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000022c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  000002c4  2**0
                  ALLOC
  3 .stab         00000cc0  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000080f  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  c6:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
	DDRB  |=   (1<<SS_N)|(1<<MOSI)|(1<<SCK);          //Turn on SS, MOSI, SCLK, MISO
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
	SPCR  |=   (1<<SPE)|(1<<MSTR);           //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
	//Bit 5 = DORD = Data Order, 0 = MSB transmitted first
	//Bit 4 = MSTR = Master/Slave Select = Master/slave select
	//Bit 3 = CPOL = Clock polarity (0 means low polarity)
	//Bit 2 = CPHA = Clock phase
	//Bits 1, 0 = SPR1, SPR0 =  
	SPSR  |=   (1<<SPI2X);           // double speed operation
  da:	70 9a       	sbi	0x0e, 0	; 14
}//spi_init
  dc:	08 95       	ret

000000de <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
	ASSR   |=  (1<<AS0);    //ext osc TOSC
  de:	80 b7       	in	r24, 0x30	; 48
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 bf       	out	0x30, r24	; 48
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
  e4:	87 b7       	in	r24, 0x37	; 55
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	87 bf       	out	0x37, r24	; 55
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	83 bf       	out	0x33, r24	; 51
}
  f0:	08 95       	ret

000000f2 <transmit>:

void transmit(uint32_t data){
	//break the data up into 4 bytes
	
	//load first byte
	SPDR = (data & 0xFF);
  f2:	6f b9       	out	0x0f, r22	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <transmit+0x2>

	//load second byte
	SPDR = ((data >> 8) & 0xFF);
  f8:	27 2f       	mov	r18, r23
  fa:	38 2f       	mov	r19, r24
  fc:	49 2f       	mov	r20, r25
  fe:	55 27       	eor	r21, r21
 100:	2f b9       	out	0x0f, r18	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <transmit+0x10>

	//load third byte
	SPDR = ((data>>16) & 0xFF);
 106:	9c 01       	movw	r18, r24
 108:	44 27       	eor	r20, r20
 10a:	55 27       	eor	r21, r21
 10c:	2f b9       	out	0x0f, r18	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 10e:	77 9b       	sbis	0x0e, 7	; 14
 110:	fe cf       	rjmp	.-4      	; 0x10e <transmit+0x1c>

	//load fourth byte
	SPDR = ((data>>24) & 0xFF);
 112:	69 2f       	mov	r22, r25
 114:	77 27       	eor	r23, r23
 116:	88 27       	eor	r24, r24
 118:	99 27       	eor	r25, r25
 11a:	6f b9       	out	0x0f, r22	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <transmit+0x2a>
	
	//Toggle latch
	PORTB |= 0x80;
 120:	c7 9a       	sbi	0x18, 7	; 24
	PORTB &= ~(0x80);
 122:	c7 98       	cbi	0x18, 7	; 24
}
 124:	08 95       	ret

00000126 <__vector_16>:
//tcnt0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
	static uint32_t display_count = 0x0001; //holds count for display 
	uint8_t temp = 0;
	count_7ms++;                //increment count every 7.8125 ms 
 154:	80 91 04 01 	lds	r24, 0x0104
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 04 01 	sts	0x0104, r24
	if ((count_7ms % 255)==0){ //?? interrupts equals one half second 
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	8f 3f       	cpi	r24, 0xFF	; 255
 162:	08 f4       	brcc	.+2      	; 0x166 <__vector_16+0x40>
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	89 0f       	add	r24, r25
 168:	89 f1       	breq	.+98     	; 0x1cc <__vector_16+0xa6>
 16a:	e0 90 00 01 	lds	r14, 0x0100
 16e:	f0 90 01 01 	lds	r15, 0x0101
 172:	00 91 02 01 	lds	r16, 0x0102
 176:	10 91 03 01 	lds	r17, 0x0103
		transmit(display_count);
		display_count = (display_count >> 1); //shift display bit for next time 
	}
	if (display_count == 0xFF){display_count=0x01;} //display back to 1st positon
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	e8 16       	cp	r14, r24
 17e:	f1 04       	cpc	r15, r1
 180:	01 05       	cpc	r16, r1
 182:	11 05       	cpc	r17, r1
 184:	61 f4       	brne	.+24     	; 0x19e <__vector_16+0x78>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	80 93 00 01 	sts	0x0100, r24
 192:	90 93 01 01 	sts	0x0101, r25
 196:	a0 93 02 01 	sts	0x0102, r26
 19a:	b0 93 03 01 	sts	0x0103, r27
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	0f 90       	pop	r0
 1c0:	0b be       	out	0x3b, r0	; 59
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti
	static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
	static uint32_t display_count = 0x0001; //holds count for display 
	uint8_t temp = 0;
	count_7ms++;                //increment count every 7.8125 ms 
	if ((count_7ms % 255)==0){ //?? interrupts equals one half second 
		transmit(display_count);
 1cc:	e0 90 00 01 	lds	r14, 0x0100
 1d0:	f0 90 01 01 	lds	r15, 0x0101
 1d4:	00 91 02 01 	lds	r16, 0x0102
 1d8:	10 91 03 01 	lds	r17, 0x0103
 1dc:	c8 01       	movw	r24, r16
 1de:	b7 01       	movw	r22, r14
 1e0:	0e 94 79 00 	call	0xf2	; 0xf2 <transmit>
		display_count = (display_count >> 1); //shift display bit for next time 
 1e4:	16 95       	lsr	r17
 1e6:	07 95       	ror	r16
 1e8:	f7 94       	ror	r15
 1ea:	e7 94       	ror	r14
 1ec:	e0 92 00 01 	sts	0x0100, r14
 1f0:	f0 92 01 01 	sts	0x0101, r15
 1f4:	00 93 02 01 	sts	0x0102, r16
 1f8:	10 93 03 01 	sts	0x0103, r17
 1fc:	be cf       	rjmp	.-132    	; 0x17a <__vector_16+0x54>

000001fe <main>:
//                                main                                 
/***********************************************************************/
int main(){

	//port initialization
	DDRB = 0xF7;  //set port B bits 7,6,5,4,2,1,0  as outputs
 1fe:	87 ef       	ldi	r24, 0xF7	; 247
 200:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 202:	11 ba       	out	0x11, r1	; 17
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
	ASSR   |=  (1<<AS0);    //ext osc TOSC
 204:	80 b7       	in	r24, 0x30	; 48
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 bf       	out	0x30, r24	; 48
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
 20a:	87 b7       	in	r24, 0x37	; 55
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	87 bf       	out	0x37, r24	; 55
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
 210:	83 b7       	in	r24, 0x33	; 51
 212:	81 60       	ori	r24, 0x01	; 1
 214:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
	DDRB  |=   (1<<SS_N)|(1<<MOSI)|(1<<SCK);          //Turn on SS, MOSI, SCLK, MISO
 216:	87 b3       	in	r24, 0x17	; 23
 218:	87 60       	ori	r24, 0x07	; 7
 21a:	87 bb       	out	0x17, r24	; 23
	SPCR  |=   (1<<SPE)|(1<<MSTR);           //set up SPI mode
 21c:	8d b1       	in	r24, 0x0d	; 13
 21e:	80 65       	ori	r24, 0x50	; 80
 220:	8d b9       	out	0x0d, r24	; 13
	//Bit 5 = DORD = Data Order, 0 = MSB transmitted first
	//Bit 4 = MSTR = Master/Slave Select = Master/slave select
	//Bit 3 = CPOL = Clock polarity (0 means low polarity)
	//Bit 2 = CPHA = Clock phase
	//Bits 1, 0 = SPR1, SPR0 =  
	SPSR  |=   (1<<SPI2X);           // double speed operation
 222:	70 9a       	sbi	0x0e, 0	; 14
	//port initialization
	DDRB = 0xF7;  //set port B bits 7,6,5,4,2,1,0  as outputs
	DDRD = 0x00;
	tcnt0_init();  //initalize counter timer zero
	spi_init();    //initalize SPI port
	sei();         //enable interrupts before entering loop
 224:	78 94       	sei
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0x28>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
