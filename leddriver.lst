
leddriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  000005e2  2**0
                  ALLOC
  3 .stab         000015f0  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000993  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e6 e4       	ldi	r30, 0x46	; 70
  64:	f5 e0       	ldi	r31, 0x05	; 5
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a8 30       	cpi	r26, 0x08	; 8
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a8 e0       	ldi	r26, 0x08	; 8
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 31       	cpi	r26, 0x11	; 17
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  86:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  8e:	81 b1       	in	r24, 0x01	; 1
  90:	80 67       	ori	r24, 0x70	; 112
  92:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	81 65       	ori	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  9a:	8d b5       	in	r24, 0x2d	; 45
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bd       	out	0x2d, r24	; 45

}//spi_init
  a0:	08 95       	ret

000000a2 <transmit1>:
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
  a6:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
  ae:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b0:	0d b4       	in	r0, 0x2d	; 45
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
  b6:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
  be:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
  c6:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
  ce:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
  d6:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
  de:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
  e6:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
  ee:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <transmit1+0x4e>
    
	//Toggle latch
	PORTA |= (1<<SS);
  f6:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
  f8:	16 98       	cbi	0x02, 6	; 2
}
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <level>:

void level(uint8_t layer){
    switch(layer){
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	f1 f0       	breq	.+60     	; 0x140 <level+0x40>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	40 f0       	brcs	.+16     	; 0x118 <level+0x18>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	f9 f0       	breq	.+62     	; 0x14a <level+0x4a>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	99 f0       	breq	.+38     	; 0x136 <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
 110:	85 b1       	in	r24, 0x05	; 5
 112:	80 67       	ori	r24, 0x70	; 112
 114:	85 b9       	out	0x05, r24	; 5
 116:	08 95       	ret
	PORTA |= (1<<SS);
	PORTA &= ~(1<<SS);
}

void level(uint8_t layer){
    switch(layer){
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <level+0x2a>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	c1 f7       	brne	.-16     	; 0x110 <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8f 78       	andi	r24, 0x8F	; 143
 124:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
 126:	2c 9a       	sbi	0x05, 4	; 5
            return;
 128:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 78       	andi	r24, 0x8F	; 143
 12e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
 130:	85 b1       	in	r24, 0x05	; 5
 132:	85 b9       	out	0x05, r24	; 5
            return;
 134:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 78       	andi	r24, 0x8F	; 143
 13a:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
 13c:	2e 9a       	sbi	0x05, 6	; 5
            return;
 13e:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8f 78       	andi	r24, 0x8F	; 143
 144:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
 146:	2d 9a       	sbi	0x05, 5	; 5
            return;
 148:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 78       	andi	r24, 0x8F	; 143
 14e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 63       	ori	r24, 0x30	; 48
 154:	85 b9       	out	0x05, r24	; 5
            return;
 156:	08 95       	ret

00000158 <patrick_test>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void patrick_test(void){
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
    uint16_t data2 = 0x00FF;
    uint16_t data3 = 0x00FF;
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;

    transmit1(data1,data2,data3,data4,data5);
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	0f ef       	ldi	r16, 0xFF	; 255
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
}
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <level_test>:

void level_test(void){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
    uint16_t data3 = 0x00FF;
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;
    uint8_t layer = 2;

    transmit1(data1,data2,data3,data4,data5);
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	4f ef       	ldi	r20, 0xFF	; 255
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	0f ef       	ldi	r16, 0xFF	; 255
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    level(layer);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 80 00 	call	0x100	; 0x100 <level>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	94 e3       	ldi	r25, 0x34	; 52
 1a0:	ac e0       	ldi	r26, 0x0C	; 12
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	a0 40       	sbci	r26, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <level_test+0x28>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <level_test+0x32>
 1ac:	00 00       	nop
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	94 e3       	ldi	r25, 0x34	; 52
 1b2:	ac e0       	ldi	r26, 0x0C	; 12
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	a0 40       	sbci	r26, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <level_test+0x3a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <level_test+0x44>
 1be:	00 00       	nop
    data1 = ~0x00FF;
    data2 = ~0x00FF;
    data3 = ~0x00FF;
    data4 = ~0x00FF;
    data5 = ~0x00FF;
    transmit1(data1,data2,data3,data4,data5);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	7f ef       	ldi	r23, 0xFF	; 255
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	5f ef       	ldi	r21, 0xFF	; 255
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	3f ef       	ldi	r19, 0xFF	; 255
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	1f ef       	ldi	r17, 0xFF	; 255
 1d4:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    level(layer);
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 80 00 	call	0x100	; 0x100 <level>
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	94 e3       	ldi	r25, 0x34	; 52
 1e2:	ac e0       	ldi	r26, 0x0C	; 12
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	a0 40       	sbci	r26, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <level_test+0x6a>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <level_test+0x74>
 1ee:	00 00       	nop
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	94 e3       	ldi	r25, 0x34	; 52
 1f4:	ac e0       	ldi	r26, 0x0C	; 12
 1f6:	81 50       	subi	r24, 0x01	; 1
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	a0 40       	sbci	r26, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <level_test+0x7c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <level_test+0x86>
 200:	00 00       	nop
    _delay_ms(500);
    _delay_ms(500);
}
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <transmit>:
	
	uint8_t temp = 0;

	temp = (data);
	//load first byte
	SPDR = temp;
 208:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 20a:	0d b4       	in	r0, 0x2d	; 45
 20c:	07 fe       	sbrs	r0, 7
 20e:	fd cf       	rjmp	.-6      	; 0x20a <transmit+0x2>

	temp = (data>>8);
 210:	27 2f       	mov	r18, r23
 212:	38 2f       	mov	r19, r24
 214:	49 2f       	mov	r20, r25
 216:	55 27       	eor	r21, r21
	//load second byte
	SPDR = temp;
 218:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 21a:	0d b4       	in	r0, 0x2d	; 45
 21c:	07 fe       	sbrs	r0, 7
 21e:	fd cf       	rjmp	.-6      	; 0x21a <transmit+0x12>

	temp = (data>>16);
 220:	9c 01       	movw	r18, r24
 222:	44 27       	eor	r20, r20
 224:	55 27       	eor	r21, r21
	//load third byte
	SPDR = temp;
 226:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 228:	0d b4       	in	r0, 0x2d	; 45
 22a:	07 fe       	sbrs	r0, 7
 22c:	fd cf       	rjmp	.-6      	; 0x228 <transmit+0x20>

	temp = (data>>24);
 22e:	69 2f       	mov	r22, r25
 230:	77 27       	eor	r23, r23
 232:	88 27       	eor	r24, r24
 234:	99 27       	eor	r25, r25
	//load fourth byte
	SPDR = temp;
 236:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 238:	0d b4       	in	r0, 0x2d	; 45
 23a:	07 fe       	sbrs	r0, 7
 23c:	fd cf       	rjmp	.-6      	; 0x238 <transmit+0x30>

	//Toggle latch
	PORTA |= (1<<SS);
 23e:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
 240:	16 98       	cbi	0x02, 6	; 2
}
 242:	08 95       	ret

00000244 <test_run>:

void test_run(void){
	//break the data up into 4 bytes
	
	//load first byte
	SPDR = 0xff;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 248:	0d b4       	in	r0, 0x2d	; 45
 24a:	07 fe       	sbrs	r0, 7
 24c:	fd cf       	rjmp	.-6      	; 0x248 <test_run+0x4>
	//PORTB |= 0x80;
	//PORTB &= ~(0x80);
	//

	//load second byte
	SPDR = 0xff;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 252:	0d b4       	in	r0, 0x2d	; 45
 254:	07 fe       	sbrs	r0, 7
 256:	fd cf       	rjmp	.-6      	; 0x252 <test_run+0xe>
	//PORTB |= 0x00;
	//PORTB &= ~(0x80);
	//
	
	//load third byte
	SPDR = 0xff;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 25c:	0d b4       	in	r0, 0x2d	; 45
 25e:	07 fe       	sbrs	r0, 7
 260:	fd cf       	rjmp	.-6      	; 0x25c <test_run+0x18>
	//
	


	//load fourth byte
	SPDR = 0xff;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 266:	0d b4       	in	r0, 0x2d	; 45
 268:	07 fe       	sbrs	r0, 7
 26a:	fd cf       	rjmp	.-6      	; 0x266 <test_run+0x22>
	
	//Toggle latch
	PORTB |= 0x80;
 26c:	2f 9a       	sbi	0x05, 7	; 5
	PORTB &= ~(0x80);
 26e:	2f 98       	cbi	0x05, 7	; 5
}
 270:	08 95       	ret

00000272 <on>:

void on(void){
    uint8_t output = -1; //All on
    transmit(output);
 272:	6f ef       	ldi	r22, 0xFF	; 255
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
	}
 27e:	08 95       	ret

00000280 <off>:

void off(void){
    uint32_t output = 0;
    transmit(output);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	cb 01       	movw	r24, r22
 286:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 28a:	08 95       	ret

0000028c <LED1on>:

void LED1on(void){
    uint32_t output = 0x01000000;
    transmit(output);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 298:	08 95       	ret

0000029a <LED17on>:

void LED17on(void){
    uint32_t output = 0x00000100;
    transmit(output);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 2a6:	08 95       	ret

000002a8 <driver1_count>:

void driver1_count(void){
    static uint16_t count = 0;
    transmit((count<<16));
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	cb 01       	movw	r24, r22
 2ae:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
    }
 2b2:	08 95       	ret

000002b4 <driver2_count>:

void driver2_count(void){
    static uint16_t count = 0;
    transmit(count);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	cb 01       	movw	r24, r22
 2ba:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 2be:	08 95       	ret

000002c0 <shift_LED>:

void shift_LED(void){
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
    static uint8_t first2 = 1;
    static uint8_t first3 = 1;
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    if(LED1 == 0)
 2c4:	80 91 05 01 	lds	r24, 0x0105
 2c8:	90 91 06 01 	lds	r25, 0x0106
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	f9 f4       	brne	.+62     	; 0x30e <__stack+0x10>
    {
        if(first2){
 2d0:	20 91 03 01 	lds	r18, 0x0103
 2d4:	22 23       	and	r18, r18
 2d6:	d9 f1       	breq	.+118    	; 0x34e <__stack+0x50>
            LED2 = 0x0001;
            first2 = 0;
 2d8:	10 92 03 01 	sts	0x0103, r1
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	70 e0       	ldi	r23, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	70 93 10 01 	sts	0x0110, r23
 2e8:	60 93 0f 01 	sts	0x010F, r22
 2ec:	40 91 0d 01 	lds	r20, 0x010D
 2f0:	50 91 0e 01 	lds	r21, 0x010E
 2f4:	20 91 0b 01 	lds	r18, 0x010B
 2f8:	30 91 0c 01 	lds	r19, 0x010C
 2fc:	00 91 09 01 	lds	r16, 0x0109
 300:	10 91 0a 01 	lds	r17, 0x010A
        else{
            LED1 = LED1 << 1;
        }
    }

    transmit1(LED1,LED2,LED3,LED4,LED5);
 304:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret
            }
        }
    }
    else
    {
        if(first1){
 30e:	20 91 04 01 	lds	r18, 0x0104
 312:	22 23       	and	r18, r18
 314:	09 f0       	breq	.+2      	; 0x318 <__stack+0x1a>
 316:	65 c0       	rjmp	.+202    	; 0x3e2 <__stack+0xe4>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	90 93 06 01 	sts	0x0106, r25
 320:	80 93 05 01 	sts	0x0105, r24
 324:	60 91 0f 01 	lds	r22, 0x010F
 328:	70 91 10 01 	lds	r23, 0x0110
 32c:	40 91 0d 01 	lds	r20, 0x010D
 330:	50 91 0e 01 	lds	r21, 0x010E
 334:	20 91 0b 01 	lds	r18, 0x010B
 338:	30 91 0c 01 	lds	r19, 0x010C
 33c:	00 91 09 01 	lds	r16, 0x0109
 340:	10 91 0a 01 	lds	r17, 0x010A
        }
    }

    transmit1(LED1,LED2,LED3,LED4,LED5);
 344:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    if(LED1 == 0)
    {
        if(first2){
 34e:	60 91 0f 01 	lds	r22, 0x010F
 352:	70 91 10 01 	lds	r23, 0x0110
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
 356:	61 15       	cp	r22, r1
 358:	71 05       	cpc	r23, r1
 35a:	11 f6       	brne	.-124    	; 0x2e0 <shift_LED+0x20>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
 35c:	80 91 02 01 	lds	r24, 0x0102
 360:	88 23       	and	r24, r24
 362:	09 f0       	breq	.+2      	; 0x366 <__stack+0x68>
 364:	55 c0       	rjmp	.+170    	; 0x410 <__stack+0x112>
 366:	40 91 0d 01 	lds	r20, 0x010D
 36a:	50 91 0e 01 	lds	r21, 0x010E
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
 36e:	41 15       	cp	r20, r1
 370:	51 05       	cpc	r21, r1
 372:	09 f0       	breq	.+2      	; 0x376 <__stack+0x78>
 374:	51 c0       	rjmp	.+162    	; 0x418 <__stack+0x11a>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
 376:	80 91 01 01 	lds	r24, 0x0101
 37a:	88 23       	and	r24, r24
 37c:	09 f0       	breq	.+2      	; 0x380 <__stack+0x82>
 37e:	61 c0       	rjmp	.+194    	; 0x442 <__stack+0x144>
 380:	80 91 0b 01 	lds	r24, 0x010B
 384:	90 91 0c 01 	lds	r25, 0x010C
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	09 f0       	breq	.+2      	; 0x38e <__stack+0x90>
 38c:	5e c0       	rjmp	.+188    	; 0x44a <__stack+0x14c>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
 38e:	20 91 00 01 	lds	r18, 0x0100
 392:	22 23       	and	r18, r18
 394:	09 f0       	breq	.+2      	; 0x398 <__stack+0x9a>
 396:	69 c0       	rjmp	.+210    	; 0x46a <__stack+0x16c>
 398:	60 91 09 01 	lds	r22, 0x0109
 39c:	70 91 0a 01 	lds	r23, 0x010A
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
 3a0:	61 15       	cp	r22, r1
 3a2:	71 05       	cpc	r23, r1
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <__stack+0xaa>
 3a6:	65 c0       	rjmp	.+202    	; 0x472 <__stack+0x174>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	90 93 06 01 	sts	0x0106, r25
 3b0:	80 93 05 01 	sts	0x0105, r24
                        first1 = first2 = first3 = first4 = first5 = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 00 01 	sts	0x0100, r24
 3ba:	80 93 01 01 	sts	0x0101, r24
 3be:	80 93 02 01 	sts	0x0102, r24
 3c2:	80 93 03 01 	sts	0x0103, r24
 3c6:	80 93 04 01 	sts	0x0104, r24
 3ca:	00 e0       	ldi	r16, 0x00	; 0
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	ab 01       	movw	r20, r22
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
        else{
            LED1 = LED1 << 1;
        }
    }

    transmit1(LED1,LED2,LED3,LED4,LED5);
 3d8:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret
        }
    }
    else
    {
        if(first1){
            first1 = 0;
 3e2:	10 92 04 01 	sts	0x0104, r1
 3e6:	60 91 0f 01 	lds	r22, 0x010F
 3ea:	70 91 10 01 	lds	r23, 0x0110
 3ee:	40 91 0d 01 	lds	r20, 0x010D
 3f2:	50 91 0e 01 	lds	r21, 0x010E
 3f6:	20 91 0b 01 	lds	r18, 0x010B
 3fa:	30 91 0c 01 	lds	r19, 0x010C
 3fe:	00 91 09 01 	lds	r16, 0x0109
 402:	10 91 0a 01 	lds	r17, 0x010A
        else{
            LED1 = LED1 << 1;
        }
    }

    transmit1(LED1,LED2,LED3,LED4,LED5);
 406:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
 410:	10 92 02 01 	sts	0x0102, r1
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	50 93 0e 01 	sts	0x010E, r21
 420:	40 93 0d 01 	sts	0x010D, r20
 424:	20 91 0b 01 	lds	r18, 0x010B
 428:	30 91 0c 01 	lds	r19, 0x010C
 42c:	00 91 09 01 	lds	r16, 0x0109
 430:	10 91 0a 01 	lds	r17, 0x010A
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
        else{
            LED1 = LED1 << 1;
        }
    }

    transmit1(LED1,LED2,LED3,LED4,LED5);
 438:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
 442:	10 92 01 01 	sts	0x0101, r1
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
 44a:	9c 01       	movw	r18, r24
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	30 93 0c 01 	sts	0x010C, r19
 454:	20 93 0b 01 	sts	0x010B, r18
 458:	00 91 09 01 	lds	r16, 0x0109
 45c:	10 91 0a 01 	lds	r17, 0x010A
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	6d cf       	rjmp	.-294    	; 0x344 <__stack+0x46>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
 46a:	10 92 00 01 	sts	0x0100, r1
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	70 e0       	ldi	r23, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
 472:	8b 01       	movw	r16, r22
 474:	00 0f       	add	r16, r16
 476:	11 1f       	adc	r17, r17
 478:	10 93 0a 01 	sts	0x010A, r17
 47c:	00 93 09 01 	sts	0x0109, r16
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	5b cf       	rjmp	.-330    	; 0x344 <__stack+0x46>

0000048e <test1>:
    transmit1(LED1,LED2,LED3,LED4,LED5);
    }

void test1(void){
    static uint32_t output = -1;
    transmit(output);
 48e:	6f ef       	ldi	r22, 0xFF	; 255
 490:	7f ef       	ldi	r23, 0xFF	; 255
 492:	cb 01       	movw	r24, r22
 494:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 498:	08 95       	ret

0000049a <test2p1>:

void test2p1(void){
    uint32_t output = 0x00010000;
    transmit(output);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 4a6:	08 95       	ret

000004a8 <test2p2>:

void test2p2(void){
    uint32_t output = 0x00000001;
    transmit(output);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
}
 4b4:	08 95       	ret

000004b6 <test3>:

void test3(void){
 4b6:	1f 93       	push	r17
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
 4b8:	10 91 08 01 	lds	r17, 0x0108
 4bc:	12 30       	cpi	r17, 0x02	; 2
 4be:	31 f0       	breq	.+12     	; 0x4cc <test3+0x16>
 4c0:	13 30       	cpi	r17, 0x03	; 3
 4c2:	90 f0       	brcs	.+36     	; 0x4e8 <test3+0x32>
 4c4:	13 30       	cpi	r17, 0x03	; 3
 4c6:	11 f0       	breq	.+4      	; 0x4cc <test3+0x16>
 4c8:	14 30       	cpi	r17, 0x04	; 4
 4ca:	29 f4       	brne	.+10     	; 0x4d6 <test3+0x20>
            break;
        case 3:
            transmit(0);
            break;
        case 4:
            transmit(0);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	cb 01       	movw	r24, r22
 4d2:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
            break;
    }
    i++;
 4d6:	81 2f       	mov	r24, r17
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
    i = i%5;
 4da:	65 e0       	ldi	r22, 0x05	; 5
 4dc:	0e 94 95 02 	call	0x52a	; 0x52a <__udivmodqi4>
 4e0:	90 93 08 01 	sts	0x0108, r25
    //transmit(output1);
    //}
    //else{transmit(output2);}
    //i++;
    //
}
 4e4:	1f 91       	pop	r17
 4e6:	08 95       	ret

void test3(void){
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
 4e8:	11 23       	and	r17, r17
 4ea:	49 f0       	breq	.+18     	; 0x4fe <test3+0x48>
 4ec:	11 30       	cpi	r17, 0x01	; 1
 4ee:	99 f7       	brne	.-26     	; 0x4d6 <test3+0x20>
        case 0:
            transmit(output1);
            break;
        case 1:
            transmit(output2);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
            break;
 4fc:	ec cf       	rjmp	.-40     	; 0x4d6 <test3+0x20>
    static uint8_t i = 0;
    static uint32_t output1 = 0x00010000;
    static uint32_t output2 = 0x00000001;
    switch(i){
        case 0:
            transmit(output1);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 04 01 	call	0x208	; 0x208 <transmit>
            break;
 50a:	e5 cf       	rjmp	.-54     	; 0x4d6 <test3+0x20>

0000050c <main>:
int main(){

	//port initialization
	//DDRA &= ~(0x03);  //set port B bits 7,6,5,4,2,1,0  as outputs
    //PORTA |= (0x03);
    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 50c:	84 b1       	in	r24, 0x04	; 4
 50e:	80 67       	ori	r24, 0x70	; 112
 510:	84 b9       	out	0x04, r24	; 4
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 512:	81 b1       	in	r24, 0x01	; 1
 514:	80 67       	ori	r24, 0x70	; 112
 516:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 518:	8c b5       	in	r24, 0x2c	; 44
 51a:	81 65       	ori	r24, 0x51	; 81
 51c:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 51e:	8d b5       	in	r24, 0x2d	; 45
 520:	81 60       	ori	r24, 0x01	; 1
 522:	8d bd       	out	0x2d, r24	; 45
    //PORTB = 0x02;
	//sei();         //enable interrupts before entering loop
    uint8_t input = 0;
	while(1){
       // patrick_test();
        level_test();
 524:	0e 94 bd 00 	call	0x17a	; 0x17a <level_test>
 528:	fd cf       	rjmp	.-6      	; 0x524 <main+0x18>

0000052a <__udivmodqi4>:
 52a:	99 1b       	sub	r25, r25
 52c:	79 e0       	ldi	r23, 0x09	; 9
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__udivmodqi4_ep>

00000530 <__udivmodqi4_loop>:
 530:	99 1f       	adc	r25, r25
 532:	96 17       	cp	r25, r22
 534:	08 f0       	brcs	.+2      	; 0x538 <__udivmodqi4_ep>
 536:	96 1b       	sub	r25, r22

00000538 <__udivmodqi4_ep>:
 538:	88 1f       	adc	r24, r24
 53a:	7a 95       	dec	r23
 53c:	c9 f7       	brne	.-14     	; 0x530 <__udivmodqi4_loop>
 53e:	80 95       	com	r24
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
