
leddriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000320  2**0
                  ALLOC
  3 .stab         000010a4  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008b5  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  c6:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
	DDRB  |=   (1<<SS_N)|(1<<MOSI)|(1<<SCK);          //Turn on SS, MOSI, SCLK, MISO
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
	SPCR  |=   (1<<SPE)|(1<<MSTR);           //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
	//Bit 4 = MSTR = Master/Slave Select = Master/slave select
	//Bit 3 = CPOL = Clock polarity (0 means low polarity)
	//Bit 2 = CPHA = Clock phase
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
}//spi_init
  da:	08 95       	ret

000000dc <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
	ASSR   |=  (1<<AS0);    //ext osc TOSC
  dc:	80 b7       	in	r24, 0x30	; 48
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 bf       	out	0x30, r24	; 48
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
  e2:	87 b7       	in	r24, 0x37	; 55
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	87 bf       	out	0x37, r24	; 55
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	83 bf       	out	0x33, r24	; 51
}
  ee:	08 95       	ret

000000f0 <transmit>:
void transmit(uint32_t data){
	//break the data up into 4 bytes
	
	uint8_t temp = 0;

	temp = (data);
  f0:	36 2f       	mov	r19, r22
	//load first byte
	SPDR = temp;
  f2:	6f b9       	out	0x0f, r22	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <transmit+0x4>

	temp = (data>>8);
  f8:	67 2f       	mov	r22, r23
  fa:	78 2f       	mov	r23, r24
  fc:	89 2f       	mov	r24, r25
  fe:	99 27       	eor	r25, r25
 100:	26 2f       	mov	r18, r22
	//load second byte
	SPDR = temp;
 102:	6f b9       	out	0x0f, r22	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 104:	77 9b       	sbis	0x0e, 7	; 14
 106:	fe cf       	rjmp	.-4      	; 0x104 <transmit+0x14>

	temp = (data);
	//load third byte
	SPDR = temp;
 108:	3f b9       	out	0x0f, r19	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 10a:	77 9b       	sbis	0x0e, 7	; 14
 10c:	fe cf       	rjmp	.-4      	; 0x10a <transmit+0x1a>

	temp = (data>>8);
	//load fourth byte
	SPDR = temp;
 10e:	2f b9       	out	0x0f, r18	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 110:	77 9b       	sbis	0x0e, 7	; 14
 112:	fe cf       	rjmp	.-4      	; 0x110 <transmit+0x20>
	
	//Toggle latch
	PORTB |= 0x80;
 114:	c7 9a       	sbi	0x18, 7	; 24
	PORTB &= ~(0x80);
 116:	c7 98       	cbi	0x18, 7	; 24
}
 118:	08 95       	ret

0000011a <test_run>:

void test_run(void){
	//break the data up into 4 bytes
	
	//load first byte
	SPDR = 0xff;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8f b9       	out	0x0f, r24	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <test_run+0x4>
	PORTB |= 0x80;
	PORTB &= ~(0x80);
	*/

	//load second byte
	SPDR = 0xff;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8f b9       	out	0x0f, r24	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <test_run+0xc>
	PORTB |= 0x00;
	PORTB &= ~(0x80);
	*/
	
	//load third byte
	SPDR = 0xff;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8f b9       	out	0x0f, r24	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 12e:	77 9b       	sbis	0x0e, 7	; 14
 130:	fe cf       	rjmp	.-4      	; 0x12e <test_run+0x14>
	*/
	


	//load fourth byte
	SPDR = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8f b9       	out	0x0f, r24	; 15
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	fe cf       	rjmp	.-4      	; 0x136 <test_run+0x1c>
	
	//Toggle latch
	PORTB |= 0x80;
 13a:	c7 9a       	sbi	0x18, 7	; 24
	PORTB &= ~(0x80);
 13c:	c7 98       	cbi	0x18, 7	; 24
}
 13e:	08 95       	ret

00000140 <on>:

void on(void){
    uint8_t output = -1; //All on
    transmit(output);
 140:	6f ef       	ldi	r22, 0xFF	; 255
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
	}
 14c:	08 95       	ret

0000014e <off>:

void off(void){
    uint32_t output = 0;
    transmit(output);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	cb 01       	movw	r24, r22
 154:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 158:	08 95       	ret

0000015a <LED1on>:

void LED1on(void){
    uint32_t output = 0x01000000;
    transmit(output);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 166:	08 95       	ret

00000168 <LED17on>:

void LED17on(void){
    uint32_t output = 0x00000100;
    transmit(output);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 174:	08 95       	ret

00000176 <driver1_count>:

void driver1_count(void){
    static uint16_t count = 0;
    transmit((count<<16));
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	cb 01       	movw	r24, r22
 17c:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
    }
 180:	08 95       	ret

00000182 <driver2_count>:

void driver2_count(void){
    static uint16_t count = 0;
    transmit(count);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	cb 01       	movw	r24, r22
 188:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
    }
 18c:	08 95       	ret

0000018e <test1>:

void test1(void){
    static uint32_t output = -1;
    transmit(output);
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	7f ef       	ldi	r23, 0xFF	; 255
 192:	cb 01       	movw	r24, r22
 194:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 198:	08 95       	ret

0000019a <test2p1>:

void test2p1(void){
    uint32_t output = 0x00010000;
    transmit(output);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 1a6:	08 95       	ret

000001a8 <test2p2>:

void test2p2(void){
    uint32_t output = 0x00000001;
    transmit(output);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
}
 1b4:	08 95       	ret

000001b6 <test3>:

void test3(void){
    static uint8_t i = 0;
    if((i%2)==0){
    transmit(0x00010000);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
    }
    else{transmit(0x00000001);}
}
 1c2:	08 95       	ret

000001c4 <__vector_16>:
//tcnt0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
	static uint32_t display_count = 0x00000001; //holds count for display 
	uint8_t temp = 0;
	count_7ms++;                //increment count every 7.8125 ms 
 1f2:	80 91 04 01 	lds	r24, 0x0104
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 04 01 	sts	0x0104, r24
	if ((count_7ms % 1)==0){ //?? interrupts equals one half second 
	//	if((temp % 64) == 0){
			transmit(display_count);
 1fc:	e0 90 00 01 	lds	r14, 0x0100
 200:	f0 90 01 01 	lds	r15, 0x0101
 204:	00 91 02 01 	lds	r16, 0x0102
 208:	10 91 03 01 	lds	r17, 0x0103
 20c:	c8 01       	movw	r24, r16
 20e:	b7 01       	movw	r22, r14
 210:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit>
			//transmit(0xFFFFFFFF);
			display_count++;
 214:	08 94       	sec
 216:	e1 1c       	adc	r14, r1
 218:	f1 1c       	adc	r15, r1
 21a:	01 1d       	adc	r16, r1
 21c:	11 1d       	adc	r17, r1
 21e:	e0 92 00 01 	sts	0x0100, r14
 222:	f0 92 01 01 	sts	0x0101, r15
 226:	00 93 02 01 	sts	0x0102, r16
 22a:	10 93 03 01 	sts	0x0103, r17
			//display_count = (display_count << 1); //shift display bit for next time 
			temp++;
//		}
	}
	//if (display_count == 0x00){display_count=0x01;} //display back to 1st positon
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	0f 90       	pop	r0
 250:	0b be       	out	0x3b, r0	; 59
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <main>:
//                                main                                 
/***********************************************************************/
int main(){

	//port initialization
	DDRB = 0xF7;  //set port B bits 7,6,5,4,2,1,0  as outputs
 25c:	87 ef       	ldi	r24, 0xF7	; 247
 25e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 260:	11 ba       	out	0x11, r1	; 17
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
	ASSR   |=  (1<<AS0);    //ext osc TOSC
 262:	80 b7       	in	r24, 0x30	; 48
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 bf       	out	0x30, r24	; 48
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
 268:	87 b7       	in	r24, 0x37	; 55
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	87 bf       	out	0x37, r24	; 55
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	81 60       	ori	r24, 0x01	; 1
 272:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
	DDRB  |=   (1<<SS_N)|(1<<MOSI)|(1<<SCK);          //Turn on SS, MOSI, SCLK, MISO
 274:	87 b3       	in	r24, 0x17	; 23
 276:	87 60       	ori	r24, 0x07	; 7
 278:	87 bb       	out	0x17, r24	; 23
	SPCR  |=   (1<<SPE)|(1<<MSTR);           //set up SPI mode
 27a:	8d b1       	in	r24, 0x0d	; 13
 27c:	80 65       	ori	r24, 0x50	; 80
 27e:	8d b9       	out	0x0d, r24	; 13
	//port initialization
	DDRB = 0xF7;  //set port B bits 7,6,5,4,2,1,0  as outputs
	DDRD = 0x00;
	tcnt0_init();  //initalize counter timer zero
	spi_init();    //initalize SPI port
	sei();         //enable interrupts before entering loop
 280:	78 94       	sei
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x26>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
