Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
                              ledcube.o (__udivmodqi4)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o)
                              ledcube.o (__divmodhi4)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o (exit)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                              ledcube.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                              ledcube.o (__do_clear_bss)
/usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o) (__udivmodhi4)

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00010000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
LOAD ledcube.o
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

<<<<<<< HEAD
.text           0x00000000     0x1d88
=======
.text           0x00000000      0xbc2
>>>>>>> parent of a5971e1... pattern algorithm works. Need to add interrupts for changing frames and to create algorithm for storing. Also do calculations on how much RAM I can use and other methods of storage.
 *(.vectors)
 .vectors       0x00000000       0x50 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 .progmem.gcc_sw_table
                0x00000050       0x96 ledcube.o
 *(.progmem*)
 .progmem.data  0x000000e6      0x2ee ledcube.o
                0x000000e6                R
                0x000001e0                G
                0x000002da                B
                0x000003d4                . = ALIGN (0x2)
                0x000003d4                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000003d4        0x0 linker stubs
 *(.trampolines*)
                0x000003d4                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000003d4                __ctors_start = .
 *(.ctors)
                0x000003d4                __ctors_end = .
                0x000003d4                __dtors_start = .
 *(.dtors)
                0x000003d4                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000003d4        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x000003d4                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000003d4        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000003e0       0x16 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
                0x000003e0                __do_copy_data
 .init4         0x000003f6       0x10 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x000003f6                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000406        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 *(.init9)
 *(.text)
<<<<<<< HEAD
 .text          0x0000040e        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x0000040e                __vector_1
                0x0000040e                __vector_12
                0x0000040e                __bad_interrupt
                0x0000040e                __vector_6
                0x0000040e                __vector_3
                0x0000040e                __vector_11
                0x0000040e                __vector_13
                0x0000040e                __vector_17
                0x0000040e                __vector_19
                0x0000040e                __vector_7
                0x0000040e                __vector_5
                0x0000040e                __vector_4
                0x0000040e                __vector_9
                0x0000040e                __vector_2
                0x0000040e                __vector_15
                0x0000040e                __vector_8
                0x0000040e                __vector_14
                0x0000040e                __vector_10
                0x0000040e                __vector_16
                0x0000040e                __vector_18
 .text          0x00000412     0x195a ledcube.o
                0x00000412                level
                0x0000046a                initialize_interrupts
                0x00000472                spi_init
                0x00000486                transmit1
                0x000004e4                transmit2
                0x00000568                level_test
                0x0000060a                shift_LED
                0x000007fc                hall_test
                0x00000876                red
                0x00000c6c                green
                0x00001090                blue
                0x000014b4                LED_test
                0x00001528                test_led
                0x000015ba                red_led
                0x00001646                blue_led
                0x000016d2                green_led
                0x0000175e                leds
                0x000017aa                test_frame
                0x000017ca                clear_frame
                0x000017ee                test_pattern
                0x00001d48                main
 .text          0x00001d6c        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
 .text          0x00001d6c        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text          0x00001d6c        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text          0x00001d6c        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00001d6c                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00001d6c       0x18 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
                0x00001d6c                __udivmodqi4
 .text.libgcc   0x00001d84        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text.libgcc   0x00001d84        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text.libgcc   0x00001d84        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
                0x00001d84                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00001d84        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                0x00001d84                exit
                0x00001d84                _exit
=======
 .text          0x00000378        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
                0x00000378                __vector_1
                0x00000378                __vector_12
                0x00000378                __bad_interrupt
                0x00000378                __vector_6
                0x00000378                __vector_3
                0x00000378                __vector_11
                0x00000378                __vector_13
                0x00000378                __vector_17
                0x00000378                __vector_19
                0x00000378                __vector_7
                0x00000378                __vector_5
                0x00000378                __vector_4
                0x00000378                __vector_9
                0x00000378                __vector_2
                0x00000378                __vector_15
                0x00000378                __vector_8
                0x00000378                __vector_14
                0x00000378                __vector_10
                0x00000378                __vector_16
                0x00000378                __vector_18
 .text          0x0000037c      0x7dc ledcube.o
                0x0000037c                spi_init
                0x00000390                transmit1
                0x000003ee                transmit2
                0x0000042e                level
                0x00000486                level_test
                0x00000528                shift_LED
                0x0000071a                hall_test
                0x00000794                red_led
                0x00000820                blue_led
                0x000008ac                green_led
                0x00000936                leds
                0x00000982                test_frame
                0x00000a28                main
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o)
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 .text          0x00000b58        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodhi4.o)
                0x00000b58                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000b58       0x18 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
                0x00000b58                __udivmodqi4
 .text.libgcc   0x00000b70       0x26 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o)
                0x00000b70                __divmodhi4
                0x00000b70                _div
 .text.libgcc   0x00000b96        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .text.libgcc   0x00000b96        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000b96        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 .text.libgcc   0x00000b96       0x28 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodhi4.o)
                0x00000b96                __udivmodhi4
                0x00000bbe                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000bbe        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
                0x00000bbe                exit
                0x00000bbe                _exit
>>>>>>> parent of a5971e1... pattern algorithm works. Need to add interrupts for changing frames and to create algorithm for storing. Also do calculations on how much RAM I can use and other methods of storage.
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
<<<<<<< HEAD
 .fini0         0x00001d84        0x4 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 *(.fini0)
                0x00001d88                _etext = .

.data           0x00800100        0x8 load address 0x00001d88
=======
 .fini0         0x00000bbe        0x4 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 *(.fini0)
                0x00000bc2                _etext = .

.data           0x00800100        0x8 load address 0x00000bc2
>>>>>>> parent of a5971e1... pattern algorithm works. Need to add interrupts for changing frames and to create algorithm for storing. Also do calculations on how much RAM I can use and other methods of storage.
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .data          0x00800100        0x7 ledcube.o
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o)
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 .data          0x00800107        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodhi4.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800108                . = ALIGN (0x2)
 *fill*         0x00800107        0x1 00
                0x00800108                _edata = .
                0x00800108                PROVIDE (__data_end, .)

.bss            0x00800108       0x3f
                0x00800108                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800108        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .bss           0x00800108       0x3f ledcube.o
                0x00800108                frame
<<<<<<< HEAD
                0x0080013a                next
 .bss           0x00800147        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
 .bss           0x00800147        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .bss           0x00800147        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .bss           0x00800147        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
                0x00800147                PROVIDE (__bss_end, .)
                0x00001d88                __data_load_start = LOADADDR (.data)
                0x00001d90                __data_load_end = (__data_load_start + SIZEOF (.data))
=======
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodqi4.o)
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_divmodhi4.o)
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_exit.o)
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_copy_data.o)
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_clear_bss.o)
 .bss           0x00800143        0x0 /usr/lib/gcc/avr/4.5.3/avr35/libgcc.a(_udivmodhi4.o)
 *(.bss*)
 *(COMMON)
                0x00800143                PROVIDE (__bss_end, .)
                0x00000bc2                __data_load_start = LOADADDR (.data)
                0x00000bca                __data_load_end = (__data_load_start + SIZEOF (.data))
>>>>>>> parent of a5971e1... pattern algorithm works. Need to add interrupts for changing frames and to create algorithm for storing. Also do calculations on how much RAM I can use and other methods of storage.

.noinit         0x00800147        0x0
                0x00800147                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800147                PROVIDE (__noinit_end, .)
                0x00800147                _end = .
                0x00800147                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

<<<<<<< HEAD
.stab           0x00000000     0x3120
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .stab          0x000006cc     0x2a54 ledcube.o
                               0x2a60 (size before relaxing)

.stabstr        0x00000000      0xca8
 *(.stabstr)
 .stabstr       0x00000000      0xca8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
=======
.stab           0x00000000     0x1824
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
 .stab          0x000006cc     0x1158 ledcube.o
                               0x1164 (size before relaxing)

.stabstr        0x00000000      0xbde
 *(.stabstr)
 .stabstr       0x00000000      0xbde /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr35/crttn167.o
>>>>>>> parent of a5971e1... pattern algorithm works. Need to add interrupts for changing frames and to create algorithm for storing. Also do calculations on how much RAM I can use and other methods of storage.

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ledcube.elf elf32-avr)
LOAD linker stubs
