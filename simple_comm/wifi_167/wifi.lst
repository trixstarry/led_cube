
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001060  000010f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800140  00800140  00001134  2**0
                  ALLOC
  3 .stab         00002b38  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e85  00000000  00000000  00003c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
       8:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
       c:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_3>
      10:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      18:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      20:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      24:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      28:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      2c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      30:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      34:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      38:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      3c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      44:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      48:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      4c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>

00000050 <R>:
      50:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      68:	00 01 00 00 00 00 00 00 00 00 08 00 00 00 00 00     ................
      78:	00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00     ................
      88:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
      98:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
      b0:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
      cc:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
      dc:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
      ec:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
      fc:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     10c:	40 00 00 00 00 00 00 00 00 00 02 00 08 00 00 00     @...............
     11c:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     134:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     144:	00 00 00 00 00 40                                   .....@

0000014a <G>:
     14a:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     162:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     172:	00 00 00 00 02 00 00 00 00 00 00 00 08 00 00 00     ................
     182:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     1aa:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     1c6:	00 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     1d6:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     1e6:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     1f6:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     206:	20 00 00 00 00 00 00 00 00 00 04 00 04 00 00 00      ...............
     216:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     22e:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     23e:	00 00 00 00 00 80                                   ......

00000244 <B>:
     244:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     25c:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     26c:	00 00 00 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
     27c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     2a4:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     2c0:	00 00 04 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     2d0:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     2e0:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     2f0:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     300:	10 00 00 00 00 00 00 00 00 00 08 00 02 00 00 00     ................
     310:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     328:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     338:	00 00 00 00 01 00                                   ......

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	ce ef       	ldi	r28, 0xFE	; 254
     344:	d2 e0       	ldi	r29, 0x02	; 2
     346:	de bf       	out	0x3e, r29	; 62
     348:	cd bf       	out	0x3d, r28	; 61

0000034a <__do_copy_data>:
     34a:	11 e0       	ldi	r17, 0x01	; 1
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b1 e0       	ldi	r27, 0x01	; 1
     350:	e0 e6       	ldi	r30, 0x60	; 96
     352:	f0 e1       	ldi	r31, 0x10	; 16
     354:	02 c0       	rjmp	.+4      	; 0x35a <__do_copy_data+0x10>
     356:	05 90       	lpm	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	a0 34       	cpi	r26, 0x40	; 64
     35c:	b1 07       	cpc	r27, r17
     35e:	d9 f7       	brne	.-10     	; 0x356 <__do_copy_data+0xc>

00000360 <__do_clear_bss>:
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	a0 e4       	ldi	r26, 0x40	; 64
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	01 c0       	rjmp	.+2      	; 0x36a <.do_clear_bss_start>

00000368 <.do_clear_bss_loop>:
     368:	1d 92       	st	X+, r1

0000036a <.do_clear_bss_start>:
     36a:	a3 37       	cpi	r26, 0x73	; 115
     36c:	b1 07       	cpc	r27, r17
     36e:	e1 f7       	brne	.-8      	; 0x368 <.do_clear_bss_loop>
     370:	0e 94 04 06 	call	0xc08	; 0xc08 <main>
     374:	0c 94 2e 08 	jmp	0x105c	; 0x105c <_exit>

00000378 <__bad_interrupt>:
     378:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000037c <level>:
#include "ledcube.h"

uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers

void level(uint8_t layer){
    switch(layer){
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	f1 f0       	breq	.+60     	; 0x3bc <level+0x40>
     380:	83 30       	cpi	r24, 0x03	; 3
     382:	40 f0       	brcs	.+16     	; 0x394 <level+0x18>
     384:	83 30       	cpi	r24, 0x03	; 3
     386:	f9 f0       	breq	.+62     	; 0x3c6 <level+0x4a>
     388:	84 30       	cpi	r24, 0x04	; 4
     38a:	99 f0       	breq	.+38     	; 0x3b2 <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     38c:	85 b1       	in	r24, 0x05	; 5
     38e:	80 67       	ori	r24, 0x70	; 112
     390:	85 b9       	out	0x05, r24	; 5
     392:	08 95       	ret
#include "ledcube.h"

uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers

void level(uint8_t layer){
    switch(layer){
     394:	88 23       	and	r24, r24
     396:	39 f0       	breq	.+14     	; 0x3a6 <level+0x2a>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	c1 f7       	brne	.-16     	; 0x38c <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     39c:	85 b1       	in	r24, 0x05	; 5
     39e:	8f 78       	andi	r24, 0x8F	; 143
     3a0:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     3a2:	2c 9a       	sbi	0x05, 4	; 5
            return;
     3a4:	08 95       	ret
uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers

void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3a6:	85 b1       	in	r24, 0x05	; 5
     3a8:	8f 78       	andi	r24, 0x8F	; 143
     3aa:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     3ac:	85 b1       	in	r24, 0x05	; 5
     3ae:	85 b9       	out	0x05, r24	; 5
            return;
     3b0:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3b2:	85 b1       	in	r24, 0x05	; 5
     3b4:	8f 78       	andi	r24, 0x8F	; 143
     3b6:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     3b8:	2e 9a       	sbi	0x05, 6	; 5
            return;
     3ba:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3bc:	85 b1       	in	r24, 0x05	; 5
     3be:	8f 78       	andi	r24, 0x8F	; 143
     3c0:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     3c2:	2d 9a       	sbi	0x05, 5	; 5
            return;
     3c4:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3c6:	85 b1       	in	r24, 0x05	; 5
     3c8:	8f 78       	andi	r24, 0x8F	; 143
     3ca:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     3cc:	85 b1       	in	r24, 0x05	; 5
     3ce:	80 63       	ori	r24, 0x30	; 48
     3d0:	85 b9       	out	0x05, r24	; 5
            return;
     3d2:	08 95       	ret

000003d4 <transmit2>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void transmit2(uint8_t layer){
     3d4:	1f 93       	push	r17
     3d6:	18 2f       	mov	r17, r24
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
     3d8:	0e 94 be 01 	call	0x37c	; 0x37c <level>
     3dc:	81 2f       	mov	r24, r17
     3de:	90 e0       	ldi	r25, 0x00	; 0
    for(i=5;i-- > 0; ){
     3e0:	44 e0       	ldi	r20, 0x04	; 4
     3e2:	9c 01       	movw	r18, r24
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
        temp = (frame[layer][i]);
     3ec:	28 0f       	add	r18, r24
     3ee:	39 1f       	adc	r19, r25
     3f0:	e4 2f       	mov	r30, r20
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	d9 01       	movw	r26, r18
     3f6:	ae 0f       	add	r26, r30
     3f8:	bf 1f       	adc	r27, r31
     3fa:	aa 0f       	add	r26, r26
     3fc:	bb 1f       	adc	r27, r27
     3fe:	a0 5c       	subi	r26, 0xC0	; 192
     400:	be 4f       	sbci	r27, 0xFE	; 254
     402:	8c 91       	ld	r24, X
        //load first byte
        SPDR = temp;
     404:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     406:	0d b4       	in	r0, 0x2d	; 45
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <transmit2+0x32>

        temp = (frame[layer][i]>>8);
     40c:	d9 01       	movw	r26, r18
     40e:	ae 0f       	add	r26, r30
     410:	bf 1f       	adc	r27, r31
     412:	aa 0f       	add	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	a0 5c       	subi	r26, 0xC0	; 192
     418:	be 4f       	sbci	r27, 0xFE	; 254
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	8c 91       	ld	r24, X
     41e:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
     420:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     422:	0d b4       	in	r0, 0x2d	; 45
     424:	07 fe       	sbrs	r0, 7
     426:	fd cf       	rjmp	.-6      	; 0x422 <transmit2+0x4e>
        frame[layer][i] = 0;
     428:	e2 0f       	add	r30, r18
     42a:	f3 1f       	adc	r31, r19
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	e0 5c       	subi	r30, 0xC0	; 192
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	11 82       	std	Z+1, r1	; 0x01
     436:	10 82       	st	Z, r1

void transmit2(uint8_t layer){
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
    for(i=5;i-- > 0; ){
     438:	44 23       	and	r20, r20
     43a:	11 f0       	breq	.+4      	; 0x440 <transmit2+0x6c>
     43c:	41 50       	subi	r20, 0x01	; 1
     43e:	d8 cf       	rjmp	.-80     	; 0x3f0 <transmit2+0x1c>
        while(bit_is_clear(SPSR,SPIF)){};
        frame[layer][i] = 0;
    }

	//Toggle latch
	TOGGLE_LATCH
     440:	16 9a       	sbi	0x02, 6	; 2
     442:	16 98       	cbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	90 e7       	ldi	r25, 0x70	; 112
     448:	a2 e0       	ldi	r26, 0x02	; 2
     44a:	81 50       	subi	r24, 0x01	; 1
     44c:	90 40       	sbci	r25, 0x00	; 0
     44e:	a0 40       	sbci	r26, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <transmit2+0x76>
     452:	00 c0       	rjmp	.+0      	; 0x454 <transmit2+0x80>
     454:	00 00       	nop
    _delay_ms(100);
    //_delay_us(300);
}
     456:	1f 91       	pop	r17
     458:	08 95       	ret

0000045a <red_led>:

void red_led(uint8_t layer,uint32_t red){
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	7a 01       	movw	r14, r20
     46a:	8b 01       	movw	r16, r22
     46c:	40 e5       	ldi	r20, 0x50	; 80
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	ec 01       	movw	r28, r24
     478:	cc 0f       	add	r28, r28
     47a:	dd 1f       	adc	r29, r29
     47c:	cc 0f       	add	r28, r28
     47e:	dd 1f       	adc	r29, r29
     480:	c8 0f       	add	r28, r24
     482:	d9 1f       	adc	r29, r25
     484:	cc 0f       	add	r28, r28
     486:	dd 1f       	adc	r29, r29
     488:	c0 5c       	subi	r28, 0xC0	; 192
     48a:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
     48c:	d8 01       	movw	r26, r16
     48e:	c7 01       	movw	r24, r14
     490:	02 2e       	mov	r0, r18
     492:	04 c0       	rjmp	.+8      	; 0x49c <red_led+0x42>
     494:	b6 95       	lsr	r27
     496:	a7 95       	ror	r26
     498:	97 95       	ror	r25
     49a:	87 95       	ror	r24
     49c:	0a 94       	dec	r0
     49e:	d2 f7       	brpl	.-12     	; 0x494 <red_led+0x3a>
        if(state){
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	12 c0       	rjmp	.+36     	; 0x4c8 <red_led+0x6e>
	TOGGLE_LATCH
    _delay_ms(100);
    //_delay_us(300);
}

void red_led(uint8_t layer,uint32_t red){
     4a4:	de 01       	movw	r26, r28
     4a6:	ca 01       	movw	r24, r20
     4a8:	75 e0       	ldi	r23, 0x05	; 5
     4aa:	d7 2e       	mov	r13, r23
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
     4ac:	fc 01       	movw	r30, r24
     4ae:	65 91       	lpm	r22, Z+
     4b0:	74 91       	lpm	r23, Z+
     4b2:	ed 91       	ld	r30, X+
     4b4:	fc 91       	ld	r31, X
     4b6:	11 97       	sbiw	r26, 0x01	; 1
     4b8:	e6 2b       	or	r30, r22
     4ba:	f7 2b       	or	r31, r23
     4bc:	ed 93       	st	X+, r30
     4be:	fd 93       	st	X+, r31
     4c0:	da 94       	dec	r13
     4c2:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
     4c4:	dd 20       	and	r13, r13
     4c6:	91 f7       	brne	.-28     	; 0x4ac <red_led+0x52>
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	46 5f       	subi	r20, 0xF6	; 246
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     4d0:	29 31       	cpi	r18, 0x19	; 25
     4d2:	31 05       	cpc	r19, r1
     4d4:	d9 f6       	brne	.-74     	; 0x48c <red_led+0x32>
            }
        }
    }
    
//
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	08 95       	ret

000004e6 <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	7a 01       	movw	r14, r20
     4f6:	8b 01       	movw	r16, r22
     4f8:	44 e4       	ldi	r20, 0x44	; 68
     4fa:	52 e0       	ldi	r21, 0x02	; 2
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ec 01       	movw	r28, r24
     504:	cc 0f       	add	r28, r28
     506:	dd 1f       	adc	r29, r29
     508:	cc 0f       	add	r28, r28
     50a:	dd 1f       	adc	r29, r29
     50c:	c8 0f       	add	r28, r24
     50e:	d9 1f       	adc	r29, r25
     510:	cc 0f       	add	r28, r28
     512:	dd 1f       	adc	r29, r29
     514:	c0 5c       	subi	r28, 0xC0	; 192
     516:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
     518:	d8 01       	movw	r26, r16
     51a:	c7 01       	movw	r24, r14
     51c:	02 2e       	mov	r0, r18
     51e:	04 c0       	rjmp	.+8      	; 0x528 <blue_led+0x42>
     520:	b6 95       	lsr	r27
     522:	a7 95       	ror	r26
     524:	97 95       	ror	r25
     526:	87 95       	ror	r24
     528:	0a 94       	dec	r0
     52a:	d2 f7       	brpl	.-12     	; 0x520 <blue_led+0x3a>
        if(state){
     52c:	80 ff       	sbrs	r24, 0
     52e:	12 c0       	rjmp	.+36     	; 0x554 <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
     530:	de 01       	movw	r26, r28
     532:	ca 01       	movw	r24, r20
     534:	65 e0       	ldi	r22, 0x05	; 5
     536:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
     538:	fc 01       	movw	r30, r24
     53a:	65 91       	lpm	r22, Z+
     53c:	74 91       	lpm	r23, Z+
     53e:	ed 91       	ld	r30, X+
     540:	fc 91       	ld	r31, X
     542:	11 97       	sbiw	r26, 0x01	; 1
     544:	e6 2b       	or	r30, r22
     546:	f7 2b       	or	r31, r23
     548:	ed 93       	st	X+, r30
     54a:	fd 93       	st	X+, r31
     54c:	da 94       	dec	r13
     54e:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     550:	dd 20       	and	r13, r13
     552:	91 f7       	brne	.-28     	; 0x538 <blue_led+0x52>
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	46 5f       	subi	r20, 0xF6	; 246
     55a:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     55c:	29 31       	cpi	r18, 0x19	; 25
     55e:	31 05       	cpc	r19, r1
     560:	d9 f6       	brne	.-74     	; 0x518 <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	08 95       	ret

00000572 <green_led>:

void green_led(uint8_t layer,uint32_t green){
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	7a 01       	movw	r14, r20
     582:	8b 01       	movw	r16, r22
     584:	4a e4       	ldi	r20, 0x4A	; 74
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	ec 01       	movw	r28, r24
     590:	cc 0f       	add	r28, r28
     592:	dd 1f       	adc	r29, r29
     594:	cc 0f       	add	r28, r28
     596:	dd 1f       	adc	r29, r29
     598:	c8 0f       	add	r28, r24
     59a:	d9 1f       	adc	r29, r25
     59c:	cc 0f       	add	r28, r28
     59e:	dd 1f       	adc	r29, r29
     5a0:	c0 5c       	subi	r28, 0xC0	; 192
     5a2:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
     5a4:	d8 01       	movw	r26, r16
     5a6:	c7 01       	movw	r24, r14
     5a8:	02 2e       	mov	r0, r18
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <green_led+0x42>
     5ac:	b6 95       	lsr	r27
     5ae:	a7 95       	ror	r26
     5b0:	97 95       	ror	r25
     5b2:	87 95       	ror	r24
     5b4:	0a 94       	dec	r0
     5b6:	d2 f7       	brpl	.-12     	; 0x5ac <green_led+0x3a>
        if(state){
     5b8:	80 ff       	sbrs	r24, 0
     5ba:	12 c0       	rjmp	.+36     	; 0x5e0 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
     5bc:	de 01       	movw	r26, r28
     5be:	ca 01       	movw	r24, r20
     5c0:	f5 e0       	ldi	r31, 0x05	; 5
     5c2:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
     5c4:	fc 01       	movw	r30, r24
     5c6:	65 91       	lpm	r22, Z+
     5c8:	74 91       	lpm	r23, Z+
     5ca:	ed 91       	ld	r30, X+
     5cc:	fc 91       	ld	r31, X
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	e6 2b       	or	r30, r22
     5d2:	f7 2b       	or	r31, r23
     5d4:	ed 93       	st	X+, r30
     5d6:	fd 93       	st	X+, r31
     5d8:	da 94       	dec	r13
     5da:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     5dc:	dd 20       	and	r13, r13
     5de:	91 f7       	brne	.-28     	; 0x5c4 <green_led+0x52>
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	46 5f       	subi	r20, 0xF6	; 246
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     5e8:	29 31       	cpi	r18, 0x19	; 25
     5ea:	31 05       	cpc	r19, r1
     5ec:	d9 f6       	brne	.-74     	; 0x5a4 <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	08 95       	ret

000005fe <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	bf 92       	push	r11
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	b8 2e       	mov	r11, r24
     616:	38 01       	movw	r6, r16
     618:	49 01       	movw	r8, r18
    red_led(layer,red);
     61a:	0e 94 2d 02 	call	0x45a	; 0x45a <red_led>
    blue_led(layer,blue);
     61e:	8b 2d       	mov	r24, r11
     620:	b4 01       	movw	r22, r8
     622:	a3 01       	movw	r20, r6
     624:	0e 94 73 02 	call	0x4e6	; 0x4e6 <blue_led>
    green_led(layer,green);
     628:	8b 2d       	mov	r24, r11
     62a:	b7 01       	movw	r22, r14
     62c:	a6 01       	movw	r20, r12
     62e:	0e 94 b9 02 	call	0x572	; 0x572 <green_led>
}
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	df 90       	pop	r13
     63c:	cf 90       	pop	r12
     63e:	bf 90       	pop	r11
     640:	9f 90       	pop	r9
     642:	8f 90       	pop	r8
     644:	7f 90       	pop	r7
     646:	6f 90       	pop	r6
     648:	08 95       	ret

0000064a <test_frame>:
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
        switch(i){
            case 0:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     64a:	85 b1       	in	r24, 0x05	; 5
     64c:	8f 78       	andi	r24, 0x8F	; 143
     64e:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     650:	85 b1       	in	r24, 0x05	; 5
     652:	85 b9       	out	0x05, r24	; 5

        //Toggle latch
        TOGGLE_LATCH
            _delay_ms(100);
    }
}
     654:	08 95       	ret

00000656 <test_cube>:

void test_cube(uint8_t *buffer){
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
    uint32_t red = 0;
    uint32_t blue = 0;
    uint32_t green = 0;


    red = (buffer[DATA])|(buffer[DATA+1]<<8)|(buffer[DATA+2]<<16)|((buffer[DATA+3]&MSB1)<<24);
     668:	5b 81       	ldd	r21, Y+3	; 0x03
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	2c 81       	ldd	r18, Y+4	; 0x04
     66e:	92 2f       	mov	r25, r18
     670:	99 27       	eor	r25, r25
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	48 2b       	or	r20, r24
     676:	59 2b       	or	r21, r25
     678:	8a 81       	ldd	r24, Y+2	; 0x02
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	48 2b       	or	r20, r24
     67e:	59 2b       	or	r21, r25
     680:	66 27       	eor	r22, r22
     682:	57 fd       	sbrc	r21, 7
     684:	60 95       	com	r22
     686:	76 2f       	mov	r23, r22
    blue = (buffer[DATA+15]&(~MSB5))|(buffer[DATA+16]<<3)|(buffer[DATA+17]<<11)|((buffer[DATA+18]&MSB6)<<19);
     688:	0a 89       	ldd	r16, Y+18	; 0x12
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	00 0f       	add	r16, r16
     68e:	11 1f       	adc	r17, r17
     690:	00 0f       	add	r16, r16
     692:	11 1f       	adc	r17, r17
     694:	00 0f       	add	r16, r16
     696:	11 1f       	adc	r17, r17
     698:	89 89       	ldd	r24, Y+17	; 0x11
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	87 70       	andi	r24, 0x07	; 7
     69e:	08 2b       	or	r16, r24
     6a0:	19 2b       	or	r17, r25
     6a2:	2b 89       	ldd	r18, Y+19	; 0x13
     6a4:	92 2f       	mov	r25, r18
     6a6:	99 0f       	add	r25, r25
     6a8:	99 0f       	add	r25, r25
     6aa:	99 0f       	add	r25, r25
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	08 2b       	or	r16, r24
     6b0:	19 2b       	or	r17, r25
     6b2:	22 27       	eor	r18, r18
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	20 95       	com	r18
     6b8:	32 2f       	mov	r19, r18
    green = ((buffer[DATA2+1]&(~MSB2)))|(buffer[DATA2+2]<<6)|(buffer[DATA2+3]<<14)|((buffer[DATA2+4]&MSB3)<<22);
     6ba:	cb a0       	ldd	r12, Y+35	; 0x23
     6bc:	dd 24       	eor	r13, r13
     6be:	00 24       	eor	r0, r0
     6c0:	d6 94       	lsr	r13
     6c2:	c7 94       	ror	r12
     6c4:	07 94       	ror	r0
     6c6:	d6 94       	lsr	r13
     6c8:	c7 94       	ror	r12
     6ca:	07 94       	ror	r0
     6cc:	dc 2c       	mov	r13, r12
     6ce:	c0 2c       	mov	r12, r0
     6d0:	8a a1       	ldd	r24, Y+34	; 0x22
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	8f 73       	andi	r24, 0x3F	; 63
     6d6:	c8 2a       	or	r12, r24
     6d8:	d9 2a       	or	r13, r25
     6da:	ec a1       	ldd	r30, Y+36	; 0x24
     6dc:	9e 2f       	mov	r25, r30
     6de:	92 95       	swap	r25
     6e0:	99 0f       	add	r25, r25
     6e2:	99 0f       	add	r25, r25
     6e4:	90 7c       	andi	r25, 0xC0	; 192
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	c8 2a       	or	r12, r24
     6ea:	d9 2a       	or	r13, r25
     6ec:	ee 24       	eor	r14, r14
     6ee:	d7 fc       	sbrc	r13, 7
     6f0:	e0 94       	com	r14
     6f2:	fe 2c       	mov	r15, r14
    leds(0,red,blue,green);
     6f4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <leds>
    //LAYER 1
    red = ((buffer[DATA+3]&(~MSB1)))|(buffer[DATA+4]<<7)|(buffer[DATA+5]<<15)|((buffer[DATA+6]&MSB2)<<23);
     6f8:	4e 81       	ldd	r20, Y+6	; 0x06
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	56 95       	lsr	r21
     6fe:	54 2f       	mov	r21, r20
     700:	44 27       	eor	r20, r20
     702:	57 95       	ror	r21
     704:	47 95       	ror	r20
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	8f 77       	andi	r24, 0x7F	; 127
     70c:	48 2b       	or	r20, r24
     70e:	59 2b       	or	r21, r25
     710:	2f 81       	ldd	r18, Y+7	; 0x07
     712:	92 2f       	mov	r25, r18
     714:	97 95       	ror	r25
     716:	99 27       	eor	r25, r25
     718:	97 95       	ror	r25
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	48 2b       	or	r20, r24
     71e:	59 2b       	or	r21, r25
     720:	66 27       	eor	r22, r22
     722:	57 fd       	sbrc	r21, 7
     724:	60 95       	com	r22
     726:	76 2f       	mov	r23, r22
    blue = (buffer[DATA+18]&(~MSB6))|(buffer[DATA+19]<<2)|(buffer[DATA+20]<<10)|((buffer[DATA+21]&MSB7)<<18);
     728:	0d 89       	ldd	r16, Y+21	; 0x15
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	00 0f       	add	r16, r16
     72e:	11 1f       	adc	r17, r17
     730:	00 0f       	add	r16, r16
     732:	11 1f       	adc	r17, r17
     734:	8c 89       	ldd	r24, Y+20	; 0x14
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	83 70       	andi	r24, 0x03	; 3
     73a:	08 2b       	or	r16, r24
     73c:	19 2b       	or	r17, r25
     73e:	2e 89       	ldd	r18, Y+22	; 0x16
     740:	92 2f       	mov	r25, r18
     742:	99 0f       	add	r25, r25
     744:	99 0f       	add	r25, r25
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 2b       	or	r16, r24
     74a:	19 2b       	or	r17, r25
     74c:	22 27       	eor	r18, r18
     74e:	17 fd       	sbrc	r17, 7
     750:	20 95       	com	r18
     752:	32 2f       	mov	r19, r18
    green = ((buffer[DATA2+4]&(~MSB3)))|(buffer[DATA2+5]<<5)|(buffer[DATA2+6]<<13)|((buffer[DATA2+7]&MSB4)<<21);
     754:	ce a0       	ldd	r12, Y+38	; 0x26
     756:	dd 24       	eor	r13, r13
     758:	cc 0c       	add	r12, r12
     75a:	dd 1c       	adc	r13, r13
     75c:	c2 94       	swap	r12
     75e:	d2 94       	swap	r13
     760:	e0 ef       	ldi	r30, 0xF0	; 240
     762:	de 22       	and	r13, r30
     764:	dc 24       	eor	r13, r12
     766:	ce 22       	and	r12, r30
     768:	dc 24       	eor	r13, r12
     76a:	8d a1       	ldd	r24, Y+37	; 0x25
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	8f 71       	andi	r24, 0x1F	; 31
     770:	c8 2a       	or	r12, r24
     772:	d9 2a       	or	r13, r25
     774:	ef a1       	ldd	r30, Y+39	; 0x27
     776:	9e 2f       	mov	r25, r30
     778:	92 95       	swap	r25
     77a:	99 0f       	add	r25, r25
     77c:	90 7e       	andi	r25, 0xE0	; 224
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	c8 2a       	or	r12, r24
     782:	d9 2a       	or	r13, r25
     784:	ee 24       	eor	r14, r14
     786:	d7 fc       	sbrc	r13, 7
     788:	e0 94       	com	r14
     78a:	fe 2c       	mov	r15, r14
    leds(1,red,blue,green);
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <leds>
    //LAYER 2
    red = (buffer[DATA+6]&(~MSB2))|(buffer[DATA+7]<<6)|(buffer[DATA+8]<<14)|((buffer[DATA+9]&MSB3)<<22);
     792:	49 85       	ldd	r20, Y+9	; 0x09
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	00 24       	eor	r0, r0
     798:	56 95       	lsr	r21
     79a:	47 95       	ror	r20
     79c:	07 94       	ror	r0
     79e:	56 95       	lsr	r21
     7a0:	47 95       	ror	r20
     7a2:	07 94       	ror	r0
     7a4:	54 2f       	mov	r21, r20
     7a6:	40 2d       	mov	r20, r0
     7a8:	88 85       	ldd	r24, Y+8	; 0x08
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	8f 73       	andi	r24, 0x3F	; 63
     7ae:	48 2b       	or	r20, r24
     7b0:	59 2b       	or	r21, r25
     7b2:	2a 85       	ldd	r18, Y+10	; 0x0a
     7b4:	92 2f       	mov	r25, r18
     7b6:	92 95       	swap	r25
     7b8:	99 0f       	add	r25, r25
     7ba:	99 0f       	add	r25, r25
     7bc:	90 7c       	andi	r25, 0xC0	; 192
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	48 2b       	or	r20, r24
     7c2:	59 2b       	or	r21, r25
     7c4:	66 27       	eor	r22, r22
     7c6:	57 fd       	sbrc	r21, 7
     7c8:	60 95       	com	r22
     7ca:	76 2f       	mov	r23, r22
    blue = (buffer[DATA+21]&(~MSB7))|(buffer[DATA+22]<<1)|(buffer[DATA+23]<<9)|((buffer[DATA+24])<<17);
     7cc:	08 8d       	ldd	r16, Y+24	; 0x18
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	00 0f       	add	r16, r16
     7d2:	11 1f       	adc	r17, r17
     7d4:	8f 89       	ldd	r24, Y+23	; 0x17
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	81 70       	andi	r24, 0x01	; 1
     7da:	08 2b       	or	r16, r24
     7dc:	19 2b       	or	r17, r25
     7de:	29 8d       	ldd	r18, Y+25	; 0x19
     7e0:	92 2f       	mov	r25, r18
     7e2:	99 0f       	add	r25, r25
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 2b       	or	r16, r24
     7e8:	19 2b       	or	r17, r25
     7ea:	2a 8d       	ldd	r18, Y+26	; 0x1a
     7ec:	92 2f       	mov	r25, r18
     7ee:	99 27       	eor	r25, r25
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 2b       	or	r16, r24
     7f4:	19 2b       	or	r17, r25
     7f6:	22 27       	eor	r18, r18
     7f8:	17 fd       	sbrc	r17, 7
     7fa:	20 95       	com	r18
     7fc:	32 2f       	mov	r19, r18
    green = ((buffer[DATA2+7]&(~MSB4)))|(buffer[DATA2+8]<<4)|(buffer[DATA2+9]<<12)|((buffer[DATA2+10]&MSB5)<<20);
     7fe:	c9 a4       	ldd	r12, Y+41	; 0x29
     800:	dd 24       	eor	r13, r13
     802:	c2 94       	swap	r12
     804:	d2 94       	swap	r13
     806:	80 ef       	ldi	r24, 0xF0	; 240
     808:	d8 22       	and	r13, r24
     80a:	dc 24       	eor	r13, r12
     80c:	c8 22       	and	r12, r24
     80e:	dc 24       	eor	r13, r12
     810:	88 a5       	ldd	r24, Y+40	; 0x28
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	c8 2a       	or	r12, r24
     818:	d9 2a       	or	r13, r25
     81a:	ea a5       	ldd	r30, Y+42	; 0x2a
     81c:	9e 2f       	mov	r25, r30
     81e:	92 95       	swap	r25
     820:	90 7f       	andi	r25, 0xF0	; 240
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	c8 2a       	or	r12, r24
     826:	d9 2a       	or	r13, r25
     828:	ee 24       	eor	r14, r14
     82a:	d7 fc       	sbrc	r13, 7
     82c:	e0 94       	com	r14
     82e:	fe 2c       	mov	r15, r14
    leds(2,red,blue,green);
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	0e 94 ff 02 	call	0x5fe	; 0x5fe <leds>
    //LAYER 3
    red = ((buffer[DATA+9]&(~MSB3)))|(buffer[DATA+10]<<5)|(buffer[DATA+11]<<13)|((buffer[DATA+12]&MSB4)<<21);
     836:	4c 85       	ldd	r20, Y+12	; 0x0c
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	44 0f       	add	r20, r20
     83c:	55 1f       	adc	r21, r21
     83e:	42 95       	swap	r20
     840:	52 95       	swap	r21
     842:	50 7f       	andi	r21, 0xF0	; 240
     844:	54 27       	eor	r21, r20
     846:	40 7f       	andi	r20, 0xF0	; 240
     848:	54 27       	eor	r21, r20
     84a:	8b 85       	ldd	r24, Y+11	; 0x0b
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	8f 71       	andi	r24, 0x1F	; 31
     850:	48 2b       	or	r20, r24
     852:	59 2b       	or	r21, r25
     854:	2d 85       	ldd	r18, Y+13	; 0x0d
     856:	92 2f       	mov	r25, r18
     858:	92 95       	swap	r25
     85a:	99 0f       	add	r25, r25
     85c:	90 7e       	andi	r25, 0xE0	; 224
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	48 2b       	or	r20, r24
     862:	59 2b       	or	r21, r25
     864:	66 27       	eor	r22, r22
     866:	57 fd       	sbrc	r21, 7
     868:	60 95       	com	r22
     86a:	76 2f       	mov	r23, r22
    blue = (buffer[DATA+25])|(buffer[DATA+26]<<8)|(buffer[DATA+27]<<16)|((buffer[DATA+28]&MSB1)<<24);
     86c:	1c 8d       	ldd	r17, Y+28	; 0x1c
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	2d 8d       	ldd	r18, Y+29	; 0x1d
     872:	92 2f       	mov	r25, r18
     874:	99 27       	eor	r25, r25
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 2b       	or	r16, r24
     87a:	19 2b       	or	r17, r25
     87c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	08 2b       	or	r16, r24
     882:	19 2b       	or	r17, r25
     884:	22 27       	eor	r18, r18
     886:	17 fd       	sbrc	r17, 7
     888:	20 95       	com	r18
     88a:	32 2f       	mov	r19, r18
    green = ((buffer[DATA2+10]&(~MSB5)))|(buffer[DATA2+11]<<3)|(buffer[DATA2+12]<<11)|((buffer[DATA2+13]&MSB6)<<19);
     88c:	cc a4       	ldd	r12, Y+44	; 0x2c
     88e:	dd 24       	eor	r13, r13
     890:	cc 0c       	add	r12, r12
     892:	dd 1c       	adc	r13, r13
     894:	cc 0c       	add	r12, r12
     896:	dd 1c       	adc	r13, r13
     898:	cc 0c       	add	r12, r12
     89a:	dd 1c       	adc	r13, r13
     89c:	8b a5       	ldd	r24, Y+43	; 0x2b
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	87 70       	andi	r24, 0x07	; 7
     8a2:	c8 2a       	or	r12, r24
     8a4:	d9 2a       	or	r13, r25
     8a6:	ed a5       	ldd	r30, Y+45	; 0x2d
     8a8:	9e 2f       	mov	r25, r30
     8aa:	99 0f       	add	r25, r25
     8ac:	99 0f       	add	r25, r25
     8ae:	99 0f       	add	r25, r25
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	c8 2a       	or	r12, r24
     8b4:	d9 2a       	or	r13, r25
     8b6:	ee 24       	eor	r14, r14
     8b8:	d7 fc       	sbrc	r13, 7
     8ba:	e0 94       	com	r14
     8bc:	fe 2c       	mov	r15, r14
    leds(3,red,blue,green);
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <leds>
    //LAYER 4
    red = ((buffer[DATA+12]&(~MSB4)))|(buffer[DATA+13]<<4)|(buffer[DATA+14]<<12)|((buffer[DATA+15]&MSB5)<<20);
     8c4:	4f 85       	ldd	r20, Y+15	; 0x0f
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	42 95       	swap	r20
     8ca:	52 95       	swap	r21
     8cc:	50 7f       	andi	r21, 0xF0	; 240
     8ce:	54 27       	eor	r21, r20
     8d0:	40 7f       	andi	r20, 0xF0	; 240
     8d2:	54 27       	eor	r21, r20
     8d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	48 2b       	or	r20, r24
     8dc:	59 2b       	or	r21, r25
     8de:	28 89       	ldd	r18, Y+16	; 0x10
     8e0:	92 2f       	mov	r25, r18
     8e2:	92 95       	swap	r25
     8e4:	90 7f       	andi	r25, 0xF0	; 240
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	48 2b       	or	r20, r24
     8ea:	59 2b       	or	r21, r25
     8ec:	66 27       	eor	r22, r22
     8ee:	57 fd       	sbrc	r21, 7
     8f0:	60 95       	com	r22
     8f2:	76 2f       	mov	r23, r22
    blue = ((buffer[DATA+28]&(~MSB1)))|(buffer[DATA+29]<<7)|(buffer[DATA2]<<15)|((buffer[DATA2+1]&MSB2)<<23);
     8f4:	0f 8d       	ldd	r16, Y+31	; 0x1f
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	16 95       	lsr	r17
     8fa:	10 2f       	mov	r17, r16
     8fc:	00 27       	eor	r16, r16
     8fe:	17 95       	ror	r17
     900:	07 95       	ror	r16
     902:	8e 8d       	ldd	r24, Y+30	; 0x1e
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	8f 77       	andi	r24, 0x7F	; 127
     908:	08 2b       	or	r16, r24
     90a:	19 2b       	or	r17, r25
     90c:	29 a1       	ldd	r18, Y+33	; 0x21
     90e:	92 2f       	mov	r25, r18
     910:	97 95       	ror	r25
     912:	99 27       	eor	r25, r25
     914:	97 95       	ror	r25
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 2b       	or	r16, r24
     91a:	19 2b       	or	r17, r25
     91c:	22 27       	eor	r18, r18
     91e:	17 fd       	sbrc	r17, 7
     920:	20 95       	com	r18
     922:	32 2f       	mov	r19, r18
    green = ((buffer[DATA2+13]&(~MSB6)))|(buffer[DATA2+14]<<2)|(buffer[DATA2+15]<<10)|((buffer[DATA2+15]&MSB7)<<18);
     924:	cf a4       	ldd	r12, Y+47	; 0x2f
     926:	dd 24       	eor	r13, r13
     928:	cc 0c       	add	r12, r12
     92a:	dd 1c       	adc	r13, r13
     92c:	cc 0c       	add	r12, r12
     92e:	dd 1c       	adc	r13, r13
     930:	8e a5       	ldd	r24, Y+46	; 0x2e
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	83 70       	andi	r24, 0x03	; 3
     936:	c8 2a       	or	r12, r24
     938:	d9 2a       	or	r13, r25
     93a:	e8 a9       	ldd	r30, Y+48	; 0x30
     93c:	9e 2f       	mov	r25, r30
     93e:	99 0f       	add	r25, r25
     940:	99 0f       	add	r25, r25
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	c8 2a       	or	r12, r24
     946:	d9 2a       	or	r13, r25
     948:	ee 24       	eor	r14, r14
     94a:	d7 fc       	sbrc	r13, 7
     94c:	e0 94       	com	r14
     94e:	fe 2c       	mov	r15, r14
    leds(4,red,blue,green);
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	0e 94 ff 02 	call	0x5fe	; 0x5fe <leds>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
        switch(i){
     95a:	22 30       	cpi	r18, 0x02	; 2
     95c:	09 f4       	brne	.+2      	; 0x960 <test_cube+0x30a>
     95e:	6b c0       	rjmp	.+214    	; 0xa36 <test_cube+0x3e0>
     960:	23 30       	cpi	r18, 0x03	; 3
     962:	08 f0       	brcs	.+2      	; 0x966 <test_cube+0x310>
     964:	52 c0       	rjmp	.+164    	; 0xa0a <test_cube+0x3b4>
     966:	21 30       	cpi	r18, 0x01	; 1
     968:	09 f4       	brne	.+2      	; 0x96c <test_cube+0x316>
     96a:	60 c0       	rjmp	.+192    	; 0xa2c <test_cube+0x3d6>
            case 0:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     96c:	85 b1       	in	r24, 0x05	; 5
     96e:	8f 78       	andi	r24, 0x8F	; 143
     970:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     972:	85 b1       	in	r24, 0x05	; 5
     974:	85 b9       	out	0x05, r24	; 5
                break;
            default:
                PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
        }
        //level(i);
        for(j=5;j-- > 0; ){
     976:	44 e0       	ldi	r20, 0x04	; 4
     978:	c9 01       	movw	r24, r18
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
            temp = (frame[i][j]);
     982:	82 0f       	add	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	e4 2f       	mov	r30, r20
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	dc 01       	movw	r26, r24
     98c:	ae 0f       	add	r26, r30
     98e:	bf 1f       	adc	r27, r31
     990:	aa 0f       	add	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	a0 5c       	subi	r26, 0xC0	; 192
     996:	be 4f       	sbci	r27, 0xFE	; 254
     998:	5c 91       	ld	r21, X
            //load first byte
            SPDR = temp;
     99a:	5e bd       	out	0x2e, r21	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
     99c:	0d b4       	in	r0, 0x2d	; 45
     99e:	07 fe       	sbrs	r0, 7
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <test_cube+0x346>

            temp = (frame[i][j]>>8);
     9a2:	dc 01       	movw	r26, r24
     9a4:	ae 0f       	add	r26, r30
     9a6:	bf 1f       	adc	r27, r31
     9a8:	aa 0f       	add	r26, r26
     9aa:	bb 1f       	adc	r27, r27
     9ac:	a0 5c       	subi	r26, 0xC0	; 192
     9ae:	be 4f       	sbci	r27, 0xFE	; 254
     9b0:	11 96       	adiw	r26, 0x01	; 1
     9b2:	5c 91       	ld	r21, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
            //load second byte
            SPDR = temp;
     9b6:	5e bd       	out	0x2e, r21	; 46
            //temp = 0x0F & display_count;
            while(bit_is_clear(SPSR,SPIF)){};
     9b8:	0d b4       	in	r0, 0x2d	; 45
     9ba:	07 fe       	sbrs	r0, 7
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <test_cube+0x362>
            frame[i][j] = 0;
     9be:	e8 0f       	add	r30, r24
     9c0:	f9 1f       	adc	r31, r25
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	e0 5c       	subi	r30, 0xC0	; 192
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	11 82       	std	Z+1, r1	; 0x01
     9cc:	10 82       	st	Z, r1
                break;
            default:
                PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
        }
        //level(i);
        for(j=5;j-- > 0; ){
     9ce:	44 23       	and	r20, r20
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <test_cube+0x380>
     9d2:	41 50       	subi	r20, 0x01	; 1
     9d4:	d8 cf       	rjmp	.-80     	; 0x986 <test_cube+0x330>
            while(bit_is_clear(SPSR,SPIF)){};
            frame[i][j] = 0;
        }

        //Toggle latch
        TOGGLE_LATCH
     9d6:	16 9a       	sbi	0x02, 6	; 2
     9d8:	16 98       	cbi	0x02, 6	; 2
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	90 e7       	ldi	r25, 0x70	; 112
     9de:	a2 e0       	ldi	r26, 0x02	; 2
     9e0:	81 50       	subi	r24, 0x01	; 1
     9e2:	90 40       	sbci	r25, 0x00	; 0
     9e4:	a0 40       	sbci	r26, 0x00	; 0
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <test_cube+0x38a>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <test_cube+0x394>
     9ea:	00 00       	nop
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
    leds(4,red,blue,green);
    //test_frame();
    uint8_t i = 0;
    uint8_t j = 0;
    uint8_t temp = 0;
    for(i=0;i<5;i++){
     9f0:	25 30       	cpi	r18, 0x05	; 5
     9f2:	31 05       	cpc	r19, r1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <test_cube+0x3a2>
     9f6:	b1 cf       	rjmp	.-158    	; 0x95a <test_cube+0x304>

        //Toggle latch
        TOGGLE_LATCH
        _delay_ms(100);
    }
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
        switch(i){
     a0a:	23 30       	cpi	r18, 0x03	; 3
     a0c:	41 f0       	breq	.+16     	; 0xa1e <test_cube+0x3c8>
     a0e:	24 30       	cpi	r18, 0x04	; 4
     a10:	09 f0       	breq	.+2      	; 0xa14 <test_cube+0x3be>
     a12:	ac cf       	rjmp	.-168    	; 0x96c <test_cube+0x316>
            case 3:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
                PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
                break;
            case 4:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     a14:	85 b1       	in	r24, 0x05	; 5
     a16:	8f 78       	andi	r24, 0x8F	; 143
     a18:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     a1a:	2e 9a       	sbi	0x05, 6	; 5
                break;
     a1c:	ac cf       	rjmp	.-168    	; 0x976 <test_cube+0x320>
            case 2:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
                PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
                break;
            case 3:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     a1e:	85 b1       	in	r24, 0x05	; 5
     a20:	8f 78       	andi	r24, 0x8F	; 143
     a22:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     a24:	85 b1       	in	r24, 0x05	; 5
     a26:	80 63       	ori	r24, 0x30	; 48
     a28:	85 b9       	out	0x05, r24	; 5
                break;
     a2a:	a5 cf       	rjmp	.-182    	; 0x976 <test_cube+0x320>
            case 0:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
                PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
                break;
            case 1:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     a2c:	85 b1       	in	r24, 0x05	; 5
     a2e:	8f 78       	andi	r24, 0x8F	; 143
     a30:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     a32:	2c 9a       	sbi	0x05, 4	; 5
                break;
     a34:	a0 cf       	rjmp	.-192    	; 0x976 <test_cube+0x320>
            case 2:
                PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     a36:	85 b1       	in	r24, 0x05	; 5
     a38:	8f 78       	andi	r24, 0x8F	; 143
     a3a:	85 b9       	out	0x05, r24	; 5
                PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     a3c:	2d 9a       	sbi	0x05, 5	; 5
                break;
     a3e:	9b cf       	rjmp	.-202    	; 0x976 <test_cube+0x320>

00000a40 <Transmit>:
        _delay_ms(100);
    }
}

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     a40:	0e 94 0a 08 	call	0x1014	; 0x1014 <mirf_send>
		//_delay_ms(10);
}
     a44:	08 95       	ret

00000a46 <Receive>:


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
        //uint64_t i = 0;
		while (!mirf_data_ready()){
     a4c:	0e 94 38 07 	call	0xe70	; 0xe70 <mirf_data_ready>
     a50:	88 23       	and	r24, r24
     a52:	e1 f3       	breq	.-8      	; 0xa4c <Receive+0x6>
            //    return -1;
           // }
            //led1_on();
            //i++;
        }
		mirf_get_data(buffer);
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 58 07 	call	0xeb0	; 0xeb0 <mirf_get_data>
        //leds(4,buffer[0],buffer[1],buffer[2]);
        //test_frame();

        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <test_Transmit>:

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
     a62:	e6 2f       	mov	r30, r22
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	e8 0f       	add	r30, r24
     a6a:	f9 1f       	adc	r31, r25
     a6c:	20 81       	ld	r18, Z
     a6e:	32 2f       	mov	r19, r18
     a70:	3f 5f       	subi	r19, 0xFF	; 255
     a72:	30 83       	st	Z, r19
    if (buffer[len-1] < ' ' || buffer[len-1] > 'z')
     a74:	2f 51       	subi	r18, 0x1F	; 31
     a76:	2b 35       	cpi	r18, 0x5B	; 91
     a78:	10 f0       	brcs	.+4      	; 0xa7e <test_Transmit+0x1c>
    {
        buffer[len-1] = ' ';
     a7a:	20 e2       	ldi	r18, 0x20	; 32
     a7c:	20 83       	st	Z, r18
        _delay_ms(100);
    }
}

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     a7e:	0e 94 0a 08 	call	0x1014	; 0x1014 <mirf_send>
    if (buffer[len-1] < ' ' || buffer[len-1] > 'z')
    {
        buffer[len-1] = ' ';
    }
    Transmit(buffer,len);
}
     a82:	08 95       	ret

00000a84 <test_protocol>:
void test_protocol(uint8_t *buffer, uint8_t len){
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
     a8c:	16 2f       	mov	r17, r22
    if(Receive(buffer,len) == 1){
     a8e:	0e 94 23 05 	call	0xa46	; 0xa46 <Receive>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	21 f0       	breq	.+8      	; 0xa9e <test_protocol+0x1a>
    }
    //Transmit(buffer,len);
    else{
      //LED1_ON;
    }
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	08 95       	ret
        _delay_ms(100);
    }
}

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     a9e:	ce 01       	movw	r24, r28
     aa0:	61 2f       	mov	r22, r17
     aa2:	0e 94 0a 08 	call	0x1014	; 0x1014 <mirf_send>
    }
    //Transmit(buffer,len);
    else{
      //LED1_ON;
    }
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	08 95       	ret

00000aae <init>:

void init(){
    //DDRA |= (1<<PB0)|(1<<PB1);
    //PORTB |= (1<<PB0)|(1<<PB1);
	// Initialize AVR for use with mirf
	mirf_init();
     aae:	0e 94 26 07 	call	0xe4c	; 0xe4c <mirf_init>
     ab2:	8f e7       	ldi	r24, 0x7F	; 127
     ab4:	98 e3       	ldi	r25, 0x38	; 56
     ab6:	a1 e0       	ldi	r26, 0x01	; 1
     ab8:	81 50       	subi	r24, 0x01	; 1
     aba:	90 40       	sbci	r25, 0x00	; 0
     abc:	a0 40       	sbci	r26, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <init+0xa>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <init+0x14>
     ac2:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    //PORTB |= (1<<PB0)|(1<<PB1);
}
     ac4:	08 95       	ret

00000ac6 <init2>:
void init2(uint8_t *buffer){
     ac6:	bc 01       	movw	r22, r24
	mirf_read_register (STATUS, buffer, 1);
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	41 e0       	ldi	r20, 0x01	; 1
     acc:	0e 94 c9 07 	call	0xf92	; 0xf92 <mirf_read_register>
	
	// Configure mirf
	mirf_config();
     ad0:	0e 94 b9 07 	call	0xf72	; 0xf72 <mirf_config>
	// Test transmitting
    //PORTA |= (0<<PA0)|(1<<PA1);
}
     ad4:	08 95       	ret

00000ad6 <transmit_led>:

void transmit_led(uint8_t data){
    SPI_Transmit(data);
     ad6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
}
     ada:	08 95       	ret

00000adc <led1_on>:


void led1_on(){
    transmit_led(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x01);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
	//Toggle latch
	PORTA |= (1<<SS);
     b18:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     b1a:	16 98       	cbi	0x02, 6	; 2
}
     b1c:	08 95       	ret

00000b1e <led_off>:
void led_off(){
    transmit_led(0x00);
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
	//Toggle latch
	PORTA |= (1<<SS);
     b5a:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     b5c:	16 98       	cbi	0x02, 6	; 2
    
}
     b5e:	08 95       	ret

00000b60 <led2_on>:
void led2_on(){
    transmit_led(0x00);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x02);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x02);
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
	//Toggle latch
	PORTA |= (1<<SS);
     b9c:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     b9e:	16 98       	cbi	0x02, 6	; 2
}
     ba0:	08 95       	ret

00000ba2 <led3_on>:
void led3_on(){
    transmit_led(0x00);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x00);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
    transmit_led(0x03);
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	0e 94 6b 05 	call	0xad6	; 0xad6 <transmit_led>
	//Toggle latch
	PORTA |= (1<<SS);
     bde:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     be0:	16 98       	cbi	0x02, 6	; 2
}
     be2:	08 95       	ret

00000be4 <test_xbee_pins>:

void test_xbee_pins(){

    PORTA |= ((1<<PA0));
     be4:	10 9a       	sbi	0x02, 0	; 2
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	94 e3       	ldi	r25, 0x34	; 52
     bea:	ac e0       	ldi	r26, 0x0C	; 12
     bec:	81 50       	subi	r24, 0x01	; 1
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	a0 40       	sbci	r26, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <test_xbee_pins+0x8>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <test_xbee_pins+0x12>
     bf6:	00 00       	nop
    //PORTA |= ((1<<PA1));
    //PORTA |= ((1<<PA0)|(1<<PA1));
    _delay_ms(500);
    PORTA &= ~((1<<PA0)|(1<<PA1));
     bf8:	82 b1       	in	r24, 0x02	; 2
     bfa:	8c 7f       	andi	r24, 0xFC	; 252
     bfc:	82 b9       	out	0x02, r24	; 2

}
     bfe:	08 95       	ret

00000c00 <sensors>:

uint8_t sensors(){
    return (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     c00:	83 b1       	in	r24, 0x03	; 3
     c02:	80 95       	com	r24
}
     c04:	8f 70       	andi	r24, 0x0F	; 15
     c06:	08 95       	ret

00000c08 <main>:


int main (void)
{
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	c1 54       	subi	r28, 0x41	; 65
     c1c:	d0 40       	sbci	r29, 0x00	; 0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
     c28:	84 b1       	in	r24, 0x04	; 4
     c2a:	80 67       	ori	r24, 0x70	; 112
     c2c:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
     c2e:	85 b1       	in	r24, 0x05	; 5
     c30:	8f 60       	ori	r24, 0x0F	; 15
     c32:	85 b9       	out	0x05, r24	; 5
    init();
     c34:	0e 94 57 05 	call	0xaae	; 0xaae <init>
    //LED1_ON;
    //LED2_ON;
    uint8_t temp_buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    uint8_t buffer [64] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
     c38:	8e 01       	movw	r16, r28
     c3a:	0f 5f       	subi	r16, 0xFF	; 255
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	d8 01       	movw	r26, r16
     c40:	e0 e0       	ldi	r30, 0x00	; 0
     c42:	f1 e0       	ldi	r31, 0x01	; 1
     c44:	80 e4       	ldi	r24, 0x40	; 64
     c46:	01 90       	ld	r0, Z+
     c48:	0d 92       	st	X+, r0
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <main+0x3e>
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F'};
    uint8_t i = 0;
	sei();
     c4e:	78 94       	sei
    init2(buffer);
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 63 05 	call	0xac6	; 0xac6 <init2>
    buffer[0] = 'a';
     c56:	81 e6       	ldi	r24, 0x61	; 97
     c58:	89 83       	std	Y+1, r24	; 0x01
   // while(1){};
   //led1_off();
   //led2_off();
   //rx_powerup();
   //_delay_ms(1);
   led1_on();
     c5a:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     c5e:	8f e7       	ldi	r24, 0x7F	; 127
     c60:	98 e3       	ldi	r25, 0x38	; 56
     c62:	a1 e0       	ldi	r26, 0x01	; 1
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	a0 40       	sbci	r26, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <main+0x5c>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <main+0x66>
     c6e:	00 00       	nop
   _delay_ms(50);
   led_off();
     c70:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     c74:	8f e7       	ldi	r24, 0x7F	; 127
     c76:	98 e3       	ldi	r25, 0x38	; 56
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	90 40       	sbci	r25, 0x00	; 0
     c7e:	a0 40       	sbci	r26, 0x00	; 0
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0x72>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <main+0x7c>
     c84:	00 00       	nop
   _delay_ms(50);
   led1_on();
     c86:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     c8a:	8f e7       	ldi	r24, 0x7F	; 127
     c8c:	98 e3       	ldi	r25, 0x38	; 56
     c8e:	a1 e0       	ldi	r26, 0x01	; 1
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	a0 40       	sbci	r26, 0x00	; 0
     c96:	e1 f7       	brne	.-8      	; 0xc90 <main+0x88>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <main+0x92>
     c9a:	00 00       	nop
   _delay_ms(50);
   led_off();
     c9c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     ca0:	8f e7       	ldi	r24, 0x7F	; 127
     ca2:	98 e3       	ldi	r25, 0x38	; 56
     ca4:	a1 e0       	ldi	r26, 0x01	; 1
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	90 40       	sbci	r25, 0x00	; 0
     caa:	a0 40       	sbci	r26, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <main+0x9e>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <main+0xa8>
     cb0:	00 00       	nop
   _delay_ms(50);
   led1_on();
     cb2:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     cb6:	8f e7       	ldi	r24, 0x7F	; 127
     cb8:	98 e3       	ldi	r25, 0x38	; 56
     cba:	a1 e0       	ldi	r26, 0x01	; 1
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	90 40       	sbci	r25, 0x00	; 0
     cc0:	a0 40       	sbci	r26, 0x00	; 0
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <main+0xb4>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <main+0xbe>
     cc6:	00 00       	nop
   _delay_ms(50);
   led_off();
     cc8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     ccc:	8f e7       	ldi	r24, 0x7F	; 127
     cce:	98 e3       	ldi	r25, 0x38	; 56
     cd0:	a1 e0       	ldi	r26, 0x01	; 1
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	90 40       	sbci	r25, 0x00	; 0
     cd6:	a0 40       	sbci	r26, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0xca>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <main+0xd4>
     cdc:	00 00       	nop
   _delay_ms(50);
   led1_on();
     cde:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     ce2:	8f e7       	ldi	r24, 0x7F	; 127
     ce4:	98 e3       	ldi	r25, 0x38	; 56
     ce6:	a1 e0       	ldi	r26, 0x01	; 1
     ce8:	81 50       	subi	r24, 0x01	; 1
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	a0 40       	sbci	r26, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <main+0xe0>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <main+0xea>
     cf2:	00 00       	nop
   _delay_ms(50);
   led_off();
     cf4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     cf8:	8f e7       	ldi	r24, 0x7F	; 127
     cfa:	98 e3       	ldi	r25, 0x38	; 56
     cfc:	a1 e0       	ldi	r26, 0x01	; 1
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	a0 40       	sbci	r26, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <main+0xf6>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <main+0x100>
     d08:	00 00       	nop
   _delay_ms(50);
   led1_on();
     d0a:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     d0e:	8f e7       	ldi	r24, 0x7F	; 127
     d10:	98 e3       	ldi	r25, 0x38	; 56
     d12:	a1 e0       	ldi	r26, 0x01	; 1
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	a0 40       	sbci	r26, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main+0x10c>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <main+0x116>
     d1e:	00 00       	nop
   _delay_ms(50);
   led_off();
     d20:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
            if(buffer[0] == ID_SELF){
                data[0] = buffer[0];
                data[1] = buffer[1];
                data[2] = buffer[2];
                buffer[0] = ID_SELF;
                buffer[1] = ACK;
     d24:	91 e1       	ldi	r25, 0x11	; 17
     d26:	d9 2e       	mov	r13, r25
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <main+0x150>
        //_delay_ms(500);
        //led_off();
        //_delay_ms(500);
        //_delay_ms(50);
        if(Receive(buffer,BUFFER_SIZE) == 1){
            if(buffer[0] == ID_SELF){
     d2a:	29 81       	ldd	r18, Y+1	; 0x01
     d2c:	21 30       	cpi	r18, 0x01	; 1
     d2e:	41 f1       	breq	.+80     	; 0xd80 <main+0x178>
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	90 e7       	ldi	r25, 0x70	; 112
     d34:	a2 e0       	ldi	r26, 0x02	; 2
     d36:	81 50       	subi	r24, 0x01	; 1
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	a0 40       	sbci	r26, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <main+0x12e>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <main+0x138>
     d40:	00 00       	nop
            led2_on();
            _delay_ms(50);
            led_off();
        }
        _delay_ms(100);
        led_off();
     d42:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     d46:	8f e7       	ldi	r24, 0x7F	; 127
     d48:	98 e3       	ldi	r25, 0x38	; 56
     d4a:	a1 e0       	ldi	r26, 0x01	; 1
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	a0 40       	sbci	r26, 0x00	; 0
     d52:	e1 f7       	brne	.-8      	; 0xd4c <main+0x144>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <main+0x14e>
     d56:	00 00       	nop
        //test_Transmit(buffer,BUFFER_SIZE);
        //_delay_ms(500);
        //led_off();
        //_delay_ms(500);
        //_delay_ms(50);
        if(Receive(buffer,BUFFER_SIZE) == 1){
     d58:	c8 01       	movw	r24, r16
     d5a:	60 e2       	ldi	r22, 0x20	; 32
     d5c:	0e 94 23 05 	call	0xa46	; 0xa46 <Receive>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	19 f3       	breq	.-58     	; 0xd2a <main+0x122>
            //            led2_on();
            //            led_off();
            //            }
        }
        else{
            led2_on();
     d64:	0e 94 b0 05 	call	0xb60	; 0xb60 <led2_on>
     d68:	8f e7       	ldi	r24, 0x7F	; 127
     d6a:	98 e3       	ldi	r25, 0x38	; 56
     d6c:	a1 e0       	ldi	r26, 0x01	; 1
     d6e:	81 50       	subi	r24, 0x01	; 1
     d70:	90 40       	sbci	r25, 0x00	; 0
     d72:	a0 40       	sbci	r26, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <main+0x166>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <main+0x170>
     d78:	00 00       	nop
            _delay_ms(50);
            led_off();
     d7a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     d7e:	d8 cf       	rjmp	.-80     	; 0xd30 <main+0x128>
        //_delay_ms(500);
        //_delay_ms(50);
        if(Receive(buffer,BUFFER_SIZE) == 1){
            if(buffer[0] == ID_SELF){
                data[0] = buffer[0];
                data[1] = buffer[1];
     d80:	ea 80       	ldd	r14, Y+2	; 0x02
                data[2] = buffer[2];
     d82:	fb 80       	ldd	r15, Y+3	; 0x03
                buffer[0] = ID_SELF;
                buffer[1] = ACK;
     d84:	da 82       	std	Y+2, r13	; 0x02
    PORTA &= ~((1<<PA0)|(1<<PA1));

}

uint8_t sensors(){
    return (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     d86:	83 b1       	in	r24, 0x03	; 3
     d88:	80 95       	com	r24
     d8a:	8f 70       	andi	r24, 0x0F	; 15
                data[0] = buffer[0];
                data[1] = buffer[1];
                data[2] = buffer[2];
                buffer[0] = ID_SELF;
                buffer[1] = ACK;
                buffer[2] = sensors();
     d8c:	8b 83       	std	Y+3, r24	; 0x03
        _delay_ms(100);
    }
}

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     d8e:	c8 01       	movw	r24, r16
     d90:	60 e2       	ldi	r22, 0x20	; 32
     d92:	22 96       	adiw	r28, 0x02	; 2
     d94:	2f af       	std	Y+63, r18	; 0x3f
     d96:	22 97       	sbiw	r28, 0x02	; 2
     d98:	0e 94 0a 08 	call	0x1014	; 0x1014 <mirf_send>
                data[2] = buffer[2];
                buffer[0] = ID_SELF;
                buffer[1] = ACK;
                buffer[2] = sensors();
                Transmit(buffer,BUFFER_SIZE);
                buffer[0] = data[0];
     d9c:	22 96       	adiw	r28, 0x02	; 2
     d9e:	2f ad       	ldd	r18, Y+63	; 0x3f
     da0:	22 97       	sbiw	r28, 0x02	; 2
     da2:	29 83       	std	Y+1, r18	; 0x01
                buffer[1] = data[1];
     da4:	ea 82       	std	Y+2, r14	; 0x02
                buffer[2] = data[2];
     da6:	fb 82       	std	Y+3, r15	; 0x03
                led1_on();
     da8:	0e 94 6e 05 	call	0xadc	; 0xadc <led1_on>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	94 e3       	ldi	r25, 0x34	; 52
     db0:	ac e0       	ldi	r26, 0x0C	; 12
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	a0 40       	sbci	r26, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x1aa>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <main+0x1b4>
     dbc:	00 00       	nop
                _delay_ms(500);
                led_off();
     dbe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <led_off>
     dc2:	b6 cf       	rjmp	.-148    	; 0xd30 <main+0x128>

00000dc4 <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
     dc4:	81 b1       	in	r24, 0x01	; 1
     dc6:	80 67       	ori	r24, 0x70	; 112
     dc8:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
     dca:	8c b5       	in	r24, 0x2c	; 44
     dcc:	80 65       	ori	r24, 0x50	; 80
     dce:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
     dd0:	8d b5       	in	r24, 0x2d	; 45
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	8d bd       	out	0x2d, r24	; 45


}
     dd6:	08 95       	ret

00000dd8 <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
     dd8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
     dda:	0d b4       	in	r0, 0x2d	; 45
     ddc:	07 fe       	sbrs	r0, 7
     dde:	fd cf       	rjmp	.-6      	; 0xdda <SPI_Transmit+0x2>
	return SPDR;
     de0:	8e b5       	in	r24, 0x2e	; 46
}
     de2:	08 95       	ret

00000de4 <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
     de4:	66 23       	and	r22, r22
     de6:	61 f0       	breq	.+24     	; 0xe00 <SPI_Transmit_All+0x1c>
     de8:	e8 2f       	mov	r30, r24
     dea:	f9 2f       	mov	r31, r25
     dec:	80 e0       	ldi	r24, 0x00	; 0
        SPI_Transmit(data[i]);
     dee:	91 91       	ld	r25, Z+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
     df0:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
     df2:	0d b4       	in	r0, 0x2d	; 45
     df4:	07 fe       	sbrs	r0, 7
     df6:	fd cf       	rjmp	.-6      	; 0xdf2 <SPI_Transmit_All+0xe>
	return SPDR;
     df8:	9e b5       	in	r25, 0x2e	; 46
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	86 17       	cp	r24, r22
     dfe:	b8 f3       	brcs	.-18     	; 0xdee <SPI_Transmit_All+0xa>
     e00:	08 95       	ret

00000e02 <SPI_Receive>:
        SPI_Transmit(data[i]);
    }
}

char SPI_Receive(void){
    SPDR = 0xFF;
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	8e bd       	out	0x2e, r24	; 46
    while(bit_is_clear(SPSR,SPIF)){};
     e06:	0d b4       	in	r0, 0x2d	; 45
     e08:	07 fe       	sbrs	r0, 7
     e0a:	fd cf       	rjmp	.-6      	; 0xe06 <SPI_Receive+0x4>
    return SPDR;
     e0c:	8e b5       	in	r24, 0x2e	; 46
}
     e0e:	08 95       	ret

00000e10 <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
     e10:	e8 2f       	mov	r30, r24
     e12:	f9 2f       	mov	r31, r25
     e14:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
     e16:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
     e18:	0d b4       	in	r0, 0x2d	; 45
     e1a:	07 fe       	sbrs	r0, 7
     e1c:	fd cf       	rjmp	.-6      	; 0xe18 <SPI_Receive_All+0x8>
        data[i] = SPDR;
     e1e:	9e b5       	in	r25, 0x2e	; 46
     e20:	91 93       	st	Z+, r25
     e22:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
     e24:	c1 f7       	brne	.-16     	; 0xe16 <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
     e26:	08 95       	ret

00000e28 <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
     e28:	44 23       	and	r20, r20
     e2a:	79 f0       	breq	.+30     	; 0xe4a <SPI_Transceive+0x22>
     e2c:	a8 2f       	mov	r26, r24
     e2e:	b9 2f       	mov	r27, r25
     e30:	e6 2f       	mov	r30, r22
     e32:	f7 2f       	mov	r31, r23
     e34:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
     e36:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
     e38:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
     e3a:	0d b4       	in	r0, 0x2d	; 45
     e3c:	07 fe       	sbrs	r0, 7
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <SPI_Transceive+0x12>
	return SPDR;
     e40:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
     e42:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	84 17       	cp	r24, r20
     e48:	b0 f3       	brcs	.-20     	; 0xe36 <SPI_Transceive+0xe>
     e4a:	08 95       	ret

00000e4c <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRA |= ((1<<CSN)|(1<<CE));
     e4c:	81 b1       	in	r24, 0x01	; 1
     e4e:	83 60       	ori	r24, 0x03	; 3
     e50:	81 b9       	out	0x01, r24	; 1
    mirf_CE_lo;
     e52:	11 98       	cbi	0x02, 1	; 2
    mirf_CSN_hi;
     e54:	10 9a       	sbi	0x02, 0	; 2
// Initialize PCINT4 for ATtiny2313
//      GIMSK |= (1<<PCIE);
//      PCMSK |= (1<<PCINT4);

// Initialize PCINT3 for ATtiny167
    PCICR |= (1<<PCIE0);
     e56:	e8 e6       	ldi	r30, 0x68	; 104
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT3);
     e60:	eb e6       	ldi	r30, 0x6B	; 107
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
     e6a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <spi_init>
}
     e6e:	08 95       	ret

00000e70 <mirf_data_ready>:
    }
}
extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     e70:	80 91 72 01 	lds	r24, 0x0172
     e74:	88 23       	and	r24, r24
     e76:	11 f0       	breq	.+4      	; 0xe7c <mirf_data_ready+0xc>
     e78:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     e7a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
     e7c:	10 98       	cbi	0x02, 0	; 2
    status = SPI_Receive();               // Read status register
     e7e:	0e 94 01 07 	call	0xe02	; 0xe02 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
     e82:	10 9a       	sbi	0x02, 0	; 2
    return status & (1<<RX_DR);
     e84:	80 74       	andi	r24, 0x40	; 64
     e86:	08 95       	ret

00000e88 <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	0f 92       	push	r0
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
     e92:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
     e94:	8f 71       	andi	r24, 0x1F	; 31
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	69 83       	std	Y+1, r22	; 0x01
     e9a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    SPI_Transmit(value);
     e9e:	69 81       	ldd	r22, Y+1	; 0x01
     ea0:	86 2f       	mov	r24, r22
     ea2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    mirf_CSN_hi;
     ea6:	10 9a       	sbi	0x02, 0	; 2
}
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
     eb6:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
     eb8:	81 e6       	ldi	r24, 0x61	; 97
     eba:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
     ebe:	ce 01       	movw	r24, r28
     ec0:	be 01       	movw	r22, r28
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	0e 94 14 07 	call	0xe28	; 0xe28 <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
     ec8:	10 9a       	sbi	0x02, 0	; 2
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	60 e4       	ldi	r22, 0x40	; 64
     ece:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <rx_powerup>:
    }
}

void rx_powerup(void){
    uint8_t status;
    if (PTX) {
     ed8:	80 91 72 01 	lds	r24, 0x0172
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <rx_powerup+0xa>
     ee0:	08 95       	ret
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
     ee2:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Transmit(0x00);               // Read status register
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
        mirf_CSN_hi;                                // Pull up chip select
     eea:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
     eec:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	6b e4       	ldi	r22, 0x4B	; 75
     ef2:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
     ef6:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
     ef8:	10 92 72 01 	sts	0x0172, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	60 e3       	ldi	r22, 0x30	; 48
     f00:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
     f04:	08 95       	ret

00000f06 <__vector_3>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT0_vect)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
     f28:	80 91 72 01 	lds	r24, 0x0172
     f2c:	88 23       	and	r24, r24
     f2e:	81 f0       	breq	.+32     	; 0xf50 <__vector_3+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
     f30:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
     f32:	0e 94 01 07 	call	0xe02	; 0xe02 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
     f36:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
     f38:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	6b e4       	ldi	r22, 0x4B	; 75
     f3e:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
     f42:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
     f44:	10 92 72 01 	sts	0x0172, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
     f48:	87 e0       	ldi	r24, 0x07	; 7
     f4a:	60 e3       	ldi	r22, 0x30	; 48
     f4c:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
    }
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	62 e0       	ldi	r22, 0x02	; 2
     f76:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
     f7a:	81 e1       	ldi	r24, 0x11	; 17
     f7c:	60 e2       	ldi	r22, 0x20	; 32
     f7e:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
    //mirf_set_TADDR(0xB3B4B5B6F1);



    // Start receiver 
    PTX = 0;        // Start in receiving mode
     f82:	10 92 72 01 	sts	0x0172, r1
    RX_POWERUP;     // Power up in receiving mode
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	6b e4       	ldi	r22, 0x4B	; 75
     f8a:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
     f8e:	11 9a       	sbi	0x02, 1	; 2
}
     f90:	08 95       	ret

00000f92 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     fa2:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
     fa4:	8f 71       	andi	r24, 0x1F	; 31
     fa6:	49 83       	std	Y+1, r20	; 0x01
     fa8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    SPI_Transceive(value,value,len);
     fac:	c8 01       	movw	r24, r16
     fae:	b8 01       	movw	r22, r16
     fb0:	49 81       	ldd	r20, Y+1	; 0x01
     fb2:	0e 94 14 07 	call	0xe28	; 0xe28 <SPI_Transceive>
    mirf_CSN_hi;
     fb6:	10 9a       	sbi	0x02, 0	; 2
}
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
     fd4:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
     fd6:	8f 71       	andi	r24, 0x1F	; 31
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	49 83       	std	Y+1, r20	; 0x01
     fdc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    SPI_Transmit_All(value,len);
     fe0:	c8 01       	movw	r24, r16
     fe2:	49 81       	ldd	r20, Y+1	; 0x01
     fe4:	64 2f       	mov	r22, r20
     fe6:	0e 94 f2 06 	call	0xde4	; 0xde4 <SPI_Transmit_All>
    mirf_CSN_hi;
     fea:	10 9a       	sbi	0x02, 0	; 2
}
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
     ff8:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
     ffa:	80 e1       	ldi	r24, 0x10	; 16
     ffc:	45 e0       	ldi	r20, 0x05	; 5
     ffe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <mirf_write_register>
}
    1002:	08 95       	ret

00001004 <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    1004:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    1006:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P0,adr,5);
    1008:	8a e0       	ldi	r24, 0x0A	; 10
    100a:	45 e0       	ldi	r20, 0x05	; 5
    100c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <mirf_write_register>
    mirf_CE_hi;
    1010:	11 9a       	sbi	0x02, 1	; 2
}
    1012:	08 95       	ret

00001014 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ec 01       	movw	r28, r24
    101c:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
    101e:	80 91 72 01 	lds	r24, 0x0172
    1022:	88 23       	and	r24, r24
    1024:	e1 f7       	brne	.-8      	; 0x101e <mirf_send+0xa>

    mirf_CE_lo;
    1026:	11 98       	cbi	0x02, 1	; 2

    PTX = 1;                        // Set to transmitter mode
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 72 01 	sts	0x0172, r24
    TX_POWERUP;                     // Power up
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	6a e4       	ldi	r22, 0x4A	; 74
    1032:	0e 94 44 07 	call	0xe88	; 0xe88 <mirf_config_register>
    //mirf_set_TADDR(0x7878787878);
    
    mirf_CSN_lo;                    // Pull down chip select
    1036:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
    1038:	81 ee       	ldi	r24, 0xE1	; 225
    103a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    103e:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    1040:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
    1042:	80 ea       	ldi	r24, 0xA0	; 160
    1044:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <SPI_Transmit>
    SPI_Transmit_All(value,len);   // Write payload
    1048:	ce 01       	movw	r24, r28
    104a:	61 2f       	mov	r22, r17
    104c:	0e 94 f2 06 	call	0xde4	; 0xde4 <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
    1050:	10 9a       	sbi	0x02, 0	; 2
    
    mirf_CE_hi;                     // Start transmission
    1052:	11 9a       	sbi	0x02, 1	; 2
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	08 95       	ret

0000105c <_exit>:
    105c:	f8 94       	cli

0000105e <__stop_program>:
    105e:	ff cf       	rjmp	.-2      	; 0x105e <__stop_program>
