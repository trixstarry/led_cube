
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008e  0080008e  00000504  2**0
                  ALLOC
  3 .stab         00001e90  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b4e  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	55 c1       	rjmp	.+682    	; 0x2c2 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e4       	ldi	r30, 0x42	; 66
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ae 38       	cpi	r26, 0x8E	; 142
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	ae e8       	ldi	r26, 0x8E	; 142
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 38       	cpi	r26, 0x8F	; 143
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	4a d0       	rcall	.+148    	; 0xea <main>
  56:	f3 c1       	rjmp	.+998    	; 0x43e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <Transmit>:
#include "mirf.h"
#include "nRF24L01.h"
#include "usart.h"

void Transmit(uint8_t *buffer,uint8_t buffersize){
    mirf_send(buffer,buffersize);
  5a:	b6 d1       	rcall	.+876    	; 0x3c8 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	8f e0       	ldi	r24, 0x0F	; 15
  5e:	97 e2       	ldi	r25, 0x27	; 39
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <Transmit+0x6>
  64:	00 c0       	rjmp	.+0      	; 0x66 <Transmit+0xc>
  66:	00 00       	nop
    _delay_ms(5);
}
  68:	08 95       	ret

0000006a <Receive>:

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
  6a:	0f 93       	push	r16
  6c:	1f 93       	push	r17
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	8c 01       	movw	r16, r24
    uint64_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  74:	c0 e0       	ldi	r28, 0x00	; 0
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	0b c0       	rjmp	.+22     	; 0x90 <Receive+0x26>
  7a:	8f e1       	ldi	r24, 0x1F	; 31
  7c:	9e e4       	ldi	r25, 0x4E	; 78
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <Receive+0x14>
  82:	00 c0       	rjmp	.+0      	; 0x84 <Receive+0x1a>
  84:	00 00       	nop
  86:	21 96       	adiw	r28, 0x01	; 1
        _delay_ms (10);
        if(i > 500){
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	c6 3f       	cpi	r28, 0xF6	; 246
  8c:	d9 07       	cpc	r29, r25
  8e:	59 f0       	breq	.+22     	; 0xa6 <Receive+0x3c>
}

int8_t Receive(uint8_t *buffer,uint8_t buffersize){
    uint64_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
  90:	d1 d0       	rcall	.+418    	; 0x234 <mirf_data_ready>
  92:	88 23       	and	r24, r24
  94:	91 f3       	breq	.-28     	; 0x7a <Receive+0x10>
    //transmit_string("data is ready but i want to see\n");
    //for(i = 0; i < 7;i++){
    //    USART_Transmit(test[i]);
    //}
    //_delay_ms(50);
    mirf_get_data(buffer);
  96:	c8 01       	movw	r24, r16
  98:	eb d0       	rcall	.+470    	; 0x270 <mirf_get_data>
    //for(i = 0; i < (buffersize); i++)
    //{
        //USART_Transmit(buffer[i]);
    //}
    //USART_Transmit('\n');
    return 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
}
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	1f 91       	pop	r17
  a2:	0f 91       	pop	r16
  a4:	08 95       	ret
    uint64_t i = 0;
//char test [7] = {'d','a','t','a',' ','i','s',' ','\n'};
    while (!mirf_data_ready()){
        _delay_ms (10);
        if(i > 500){
            return -1;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
    //{
        //USART_Transmit(buffer[i]);
    //}
    //USART_Transmit('\n');
    return 1;
}
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	08 95       	ret

000000b2 <test_Transmit>:

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
  b2:	e6 2f       	mov	r30, r22
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	20 81       	ld	r18, Z
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	20 83       	st	Z, r18
    if (buffer[len-1] < ' ' || buffer[15] > 'z')
  c2:	20 32       	cpi	r18, 0x20	; 32
  c4:	30 f0       	brcs	.+12     	; 0xd2 <test_Transmit+0x20>
  c6:	dc 01       	movw	r26, r24
  c8:	1f 96       	adiw	r26, 0x0f	; 15
  ca:	2c 91       	ld	r18, X
  cc:	1f 97       	sbiw	r26, 0x0f	; 15
  ce:	2b 37       	cpi	r18, 0x7B	; 123
  d0:	10 f0       	brcs	.+4      	; 0xd6 <test_Transmit+0x24>
    {
        buffer[len-1] = ' ';
  d2:	20 e2       	ldi	r18, 0x20	; 32
  d4:	20 83       	st	Z, r18
    }
    Transmit(buffer,len);
  d6:	c1 df       	rcall	.-126    	; 0x5a <Transmit>
    
}
  d8:	08 95       	ret

000000da <test_protocol>:
  da:	ef e0       	ldi	r30, 0x0F	; 15
  dc:	f7 e2       	ldi	r31, 0x27	; 39
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <test_protocol+0x4>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__stack+0x5>
  e4:	00 00       	nop
    _delay_ms(5);
    ////transmit_string("Rx_Powerup\r\n");
    //rx_powerup();
    //_delay_ms(1);
    //transmit_string("rxing\r\n");
    if(Receive(buffer,len)==1){
  e6:	c1 df       	rcall	.-126    	; 0x6a <Receive>
    }
    else{
        //transmit_string("rx bad\r\n");
    }
    //transmit_string ("test_protocol_done\r\n");
}
  e8:	08 95       	ret

000000ea <main>:

int main (void)
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	c0 52       	subi	r28, 0x20	; 32
  f8:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MY_UBBR);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	84 d1       	rcall	.+776    	; 0x408 <USART_Init>
//    {
//        _delay_ms(100);
//        //transmit_string ("Device Started!\r\n");
//    }
	
	char buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
 100:	8e 01       	movw	r16, r28
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	d8 01       	movw	r26, r16
 108:	ee e6       	ldi	r30, 0x6E	; 110
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	81 50       	subi	r24, 0x01	; 1
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x24>
                        'q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6'};
	//uint8_t buffersize = BUFFER_SIZE;
	// Initialize AVR for use with mirf

	mirf_init();
 116:	80 d0       	rcall	.+256    	; 0x218 <mirf_init>
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	98 e3       	ldi	r25, 0x38	; 56
 11c:	a1 e0       	ldi	r26, 0x01	; 1
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x34>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x3e>
 128:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    sei();
 12a:	78 94       	sei
	mirf_read_register (STATUS, buffer, 1);
 12c:	87 e0       	ldi	r24, 0x07	; 7
 12e:	b8 01       	movw	r22, r16
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	08 d1       	rcall	.+528    	; 0x344 <mirf_read_register>
	// Configure mirf
	mirf_config();
 134:	fa d0       	rcall	.+500    	; 0x32a <mirf_config>
	// Test transmitting
	buffer[0] = 'a';
 136:	81 e6       	ldi	r24, 0x61	; 97
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	90 e7       	ldi	r25, 0x70	; 112
 13e:	a2 e0       	ldi	r26, 0x02	; 2
 140:	81 50       	subi	r24, 0x01	; 1
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	a0 40       	sbci	r26, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x56>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x60>
 14a:	00 00       	nop
    //rx_powerup();
    _delay_ms(100);
	
    transmit_string ("\r\ns");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	6a d1       	rcall	.+724    	; 0x426 <transmit_string>
 152:	03 c0       	rjmp	.+6      	; 0x15a <main+0x70>
    transmit_string("r");
    if(Receive(buffer,BUFFER_SIZE)==1){
        transmit_string("k");
    }
    else{
        transmit_string("b");
 154:	8c e6       	ldi	r24, 0x6C	; 108
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	66 d1       	rcall	.+716    	; 0x426 <transmit_string>
    _delay_ms(100);
	
    transmit_string ("\r\ns");
	while (1)
	{
        transmit_string ("l");
 15a:	84 e6       	ldi	r24, 0x64	; 100
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	63 d1       	rcall	.+710    	; 0x426 <transmit_string>
        //Receive(buffer,BUFFER_SIZE);
        //test_Transmit(buffer,BUFFER_SIZE);
       //Transmit(buffer,BUFFER_SIZE);
        ////transmit_string("Did i send?\r\n");
        //_delay_ms(100);
    transmit_string("t");
 160:	86 e6       	ldi	r24, 0x66	; 102
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	60 d1       	rcall	.+704    	; 0x426 <transmit_string>

    //Transmit(buffer,BUFFER_SIZE);
    mirf_send (buffer, BUFFER_SIZE);
 166:	c8 01       	movw	r24, r16
 168:	60 e2       	ldi	r22, 0x20	; 32
 16a:	2e d1       	rcall	.+604    	; 0x3c8 <mirf_send>
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	98 e3       	ldi	r25, 0x38	; 56
 170:	a1 e0       	ldi	r26, 0x01	; 1
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	a0 40       	sbci	r26, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x88>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x92>
 17c:	00 00       	nop
    _delay_ms(50);
    ////transmit_string("Rx_Powerup\r\n");
    //rx_powerup();
    //_delay_ms(1);
    transmit_string("r");
 17e:	88 e6       	ldi	r24, 0x68	; 104
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	51 d1       	rcall	.+674    	; 0x426 <transmit_string>
    if(Receive(buffer,BUFFER_SIZE)==1){
 184:	c8 01       	movw	r24, r16
 186:	60 e2       	ldi	r22, 0x20	; 32
 188:	70 df       	rcall	.-288    	; 0x6a <Receive>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	19 f7       	brne	.-58     	; 0x154 <main+0x6a>
        transmit_string("k");
 18e:	8a e6       	ldi	r24, 0x6A	; 106
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	49 d1       	rcall	.+658    	; 0x426 <transmit_string>
 194:	e2 cf       	rjmp	.-60     	; 0x15a <main+0x70>

00000196 <spi_init>:
#define USCK		PB7

void spi_init()
// Initialize pins for spi communication
{
    DDR_SPI &= ~(1<<DI);
 196:	bd 98       	cbi	0x17, 5	; 23
	PORT_SPI |= (1<<DI); 
 198:	c5 9a       	sbi	0x18, 5	; 24
	DDR_SPI |= (1<<USCK)|(1<<DO); 
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	80 6c       	ori	r24, 0xC0	; 192
 19e:	87 bb       	out	0x17, r24	; 23
	USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK); 
 1a0:	8a e1       	ldi	r24, 0x1A	; 26
 1a2:	8d b9       	out	0x0d, r24	; 13
	
	// For disabling SPI
	//DDRB &= ~((1<<USCK)|(1<<DI)|(1<<DO)); 
	//USICR = 0; 
}
 1a4:	08 95       	ret

000001a6 <spi>:

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 1a6:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	8e b9       	out	0x0e, r24	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1ac:	8b e1       	ldi	r24, 0x1B	; 27
 1ae:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1b0:	76 9b       	sbis	0x0e, 6	; 14
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <spi+0x8>
	return USIDR; 
 1b4:	8f b1       	in	r24, 0x0f	; 15
} 
 1b6:	08 95       	ret

000001b8 <spi_transfer_sync>:

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 1b8:	44 23       	and	r20, r20
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <spi_transfer_sync+0x28>
 1bc:	a8 2f       	mov	r26, r24
 1be:	b9 2f       	mov	r27, r25
 1c0:	e6 2f       	mov	r30, r22
 1c2:	f7 2f       	mov	r31, r23
 1c4:	90 e0       	ldi	r25, 0x00	; 0
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 1c6:	30 e4       	ldi	r19, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1c8:	8b e1       	ldi	r24, 0x1B	; 27
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 1ca:	2d 91       	ld	r18, X+
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 1cc:	2f b9       	out	0x0f, r18	; 15
	USISR = (1<<USIOIF); 
 1ce:	3e b9       	out	0x0e, r19	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1d0:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1d2:	76 9b       	sbis	0x0e, 6	; 14
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <spi_transfer_sync+0x18>
	return USIDR; 
 1d6:	2f b1       	in	r18, 0x0f	; 15
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 1d8:	21 93       	st	Z+, r18

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 1da:	9f 5f       	subi	r25, 0xFF	; 255
 1dc:	94 17       	cp	r25, r20
 1de:	a8 f3       	brcs	.-22     	; 0x1ca <spi_transfer_sync+0x12>
 1e0:	08 95       	ret

000001e2 <spi_transmit_sync>:

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 1e2:	66 23       	and	r22, r22
 1e4:	79 f0       	breq	.+30     	; 0x204 <spi_transmit_sync+0x22>
 1e6:	e8 2f       	mov	r30, r24
 1e8:	f9 2f       	mov	r31, r25
 1ea:	90 e0       	ldi	r25, 0x00	; 0
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 1ec:	30 e4       	ldi	r19, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1ee:	8b e1       	ldi	r24, 0x1B	; 27
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		spi(dataout[i]);
 1f0:	21 91       	ld	r18, Z+
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 1f2:	2f b9       	out	0x0f, r18	; 15
	USISR = (1<<USIOIF); 
 1f4:	3e b9       	out	0x0e, r19	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1f6:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1f8:	76 9b       	sbis	0x0e, 6	; 14
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <spi_transmit_sync+0x14>
	return USIDR; 
 1fc:	2f b1       	in	r18, 0x0f	; 15

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 1fe:	9f 5f       	subi	r25, 0xFF	; 255
 200:	96 17       	cp	r25, r22
 202:	b0 f3       	brcs	.-20     	; 0x1f0 <spi_transmit_sync+0xe>
 204:	08 95       	ret

00000206 <spi_fast_shift>:
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 206:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); 
 208:	80 e4       	ldi	r24, 0x40	; 64
 20a:	8e b9       	out	0x0e, r24	; 14
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 20c:	8b e1       	ldi	r24, 0x1B	; 27
 20e:	8d b9       	out	0x0d, r24	; 13
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 210:	76 9b       	sbis	0x0e, 6	; 14
 212:	fd cf       	rjmp	.-6      	; 0x20e <spi_fast_shift+0x8>
	return USIDR; 
 214:	8f b1       	in	r24, 0x0f	; 15

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	return spi(data);
}
 216:	08 95       	ret

00000218 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 218:	87 b3       	in	r24, 0x17	; 23
 21a:	8c 60       	ori	r24, 0x0C	; 12
 21c:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<PB4); //Enable the interrupt pin as an input set to high since the IRQ is active low
 21e:	c4 9a       	sbi	0x18, 4	; 24
    mirf_CE_lo;
 220:	c3 98       	cbi	0x18, 3	; 24
    mirf_CSN_hi;
 222:	c2 9a       	sbi	0x18, 2	; 24
    PCMSK2 = (1<<PCINT22);
    PCICR  = (1<<PCIE2);
#endif // __AVR_ATmega168__    */

// Initialize PCINT4
	GIMSK |= (1<<PCIE);
 224:	8b b7       	in	r24, 0x3b	; 59
 226:	80 62       	ori	r24, 0x20	; 32
 228:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PCINT4);
 22a:	80 b5       	in	r24, 0x20	; 32
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	80 bd       	out	0x20, r24	; 32

    // Initialize spi module
    spi_init();
 230:	b2 df       	rcall	.-156    	; 0x196 <spi_init>
}
 232:	08 95       	ret

00000234 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 234:	80 91 8e 00 	lds	r24, 0x008E
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <mirf_data_ready+0xc>
 23c:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = spi_fast_shift(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 23e:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 240:	c2 98       	cbi	0x18, 2	; 24
    status = spi_fast_shift(NOP);               // Read status register
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	e0 df       	rcall	.-64     	; 0x206 <spi_fast_shift>
    mirf_CSN_hi;                                // Pull up chip select
 246:	c2 9a       	sbi	0x18, 2	; 24
    return status & (1<<RX_DR);
 248:	80 74       	andi	r24, 0x40	; 64
 24a:	08 95       	ret

0000024c <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	0f 92       	push	r0
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 256:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 258:	8f 71       	andi	r24, 0x1F	; 31
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	69 83       	std	Y+1, r22	; 0x01
 25e:	d3 df       	rcall	.-90     	; 0x206 <spi_fast_shift>
    spi_fast_shift(value);
 260:	69 81       	ldd	r22, Y+1	; 0x01
 262:	86 2f       	mov	r24, r22
 264:	d0 df       	rcall	.-96     	; 0x206 <spi_fast_shift>
    mirf_CSN_hi;
 266:	c2 9a       	sbi	0x18, 2	; 24
}
 268:	0f 90       	pop	r0
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 276:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 278:	81 e6       	ldi	r24, 0x61	; 97
 27a:	c5 df       	rcall	.-118    	; 0x206 <spi_fast_shift>
    spi_transfer_sync(data,data,mirf_PAYLOAD); // Read payload
 27c:	ce 01       	movw	r24, r28
 27e:	be 01       	movw	r22, r28
 280:	40 e2       	ldi	r20, 0x20	; 32
 282:	9a df       	rcall	.-204    	; 0x1b8 <spi_transfer_sync>
    mirf_CSN_hi;                               // Pull up chip select
 284:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 286:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_RX );     // Write cmd to flush tx fifo
 288:	82 ee       	ldi	r24, 0xE2	; 226
 28a:	bd df       	rcall	.-134    	; 0x206 <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 28c:	c2 9a       	sbi	0x18, 2	; 24
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	60 e4       	ldi	r22, 0x40	; 64
 292:	dc df       	rcall	.-72     	; 0x24c <mirf_config_register>
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <rx_powerup>:
    }
}

void rx_powerup(void){
    uint8_t status;
    if (PTX) {
 29a:	80 91 8e 00 	lds	r24, 0x008E
 29e:	88 23       	and	r24, r24
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <rx_powerup+0xa>
 2a2:	08 95       	ret
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 2a4:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	ae df       	rcall	.-164    	; 0x206 <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 2aa:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 2ac:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	6b e4       	ldi	r22, 0x4B	; 75
 2b2:	cc df       	rcall	.-104    	; 0x24c <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 2b4:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 2b6:	10 92 8e 00 	sts	0x008E, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	60 e3       	ldi	r22, 0x30	; 48
 2be:	c6 df       	rcall	.-116    	; 0x24c <mirf_config_register>
 2c0:	08 95       	ret

000002c2 <__vector_11>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
    //transmit_string("interupted\n");
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 2e4:	80 91 8e 00 	lds	r24, 0x008E
 2e8:	88 23       	and	r24, r24
 2ea:	71 f0       	breq	.+28     	; 0x308 <__vector_11+0x46>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 2ec:	c2 98       	cbi	0x18, 2	; 24
        status = spi_fast_shift(NOP);               // Read status register
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	8a df       	rcall	.-236    	; 0x206 <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 2f2:	c2 9a       	sbi	0x18, 2	; 24

        mirf_CE_lo;                             // Deactivate transreceiver
 2f4:	c3 98       	cbi	0x18, 3	; 24
        RX_POWERUP;                             // Power up in receiving mode
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	6b e4       	ldi	r22, 0x4B	; 75
 2fa:	a8 df       	rcall	.-176    	; 0x24c <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 2fc:	c3 9a       	sbi	0x18, 3	; 24
        PTX = 0;                                // Set to receiving mode
 2fe:	10 92 8e 00 	sts	0x008E, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	60 e3       	ldi	r22, 0x30	; 48
 306:	a2 df       	rcall	.-188    	; 0x24c <mirf_config_register>
    }
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	8e df       	rcall	.-228    	; 0x24c <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 330:	81 e1       	ldi	r24, 0x11	; 17
 332:	60 e2       	ldi	r22, 0x20	; 32
 334:	8b df       	rcall	.-234    	; 0x24c <mirf_config_register>
    //mirf_set_RADDR_P1(0xB3B4B5B6F1);
    //mirf_set_TADDR(0xB3B4B5B6F1);
    //mirf_set_TADDR(0x7878787878);

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 336:	10 92 8e 00 	sts	0x008E, r1
    RX_POWERUP;     // Power up in receiving mode
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	6b e4       	ldi	r22, 0x4B	; 75
 33e:	86 df       	rcall	.-244    	; 0x24c <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 340:	c3 9a       	sbi	0x18, 3	; 24
}
 342:	08 95       	ret

00000344 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	0f 92       	push	r0
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 354:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 356:	8f 71       	andi	r24, 0x1F	; 31
 358:	49 83       	std	Y+1, r20	; 0x01
 35a:	55 df       	rcall	.-342    	; 0x206 <spi_fast_shift>
    spi_transfer_sync(value,value,len);
 35c:	c8 01       	movw	r24, r16
 35e:	b8 01       	movw	r22, r16
 360:	49 81       	ldd	r20, Y+1	; 0x01
 362:	2a df       	rcall	.-428    	; 0x1b8 <spi_transfer_sync>
    mirf_CSN_hi;
 364:	c2 9a       	sbi	0x18, 2	; 24
}
 366:	0f 90       	pop	r0
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	0f 92       	push	r0
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 382:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 384:	8f 71       	andi	r24, 0x1F	; 31
 386:	80 62       	ori	r24, 0x20	; 32
 388:	49 83       	std	Y+1, r20	; 0x01
 38a:	3d df       	rcall	.-390    	; 0x206 <spi_fast_shift>
    spi_transmit_sync(value,len);
 38c:	c8 01       	movw	r24, r16
 38e:	49 81       	ldd	r20, Y+1	; 0x01
 390:	64 2f       	mov	r22, r20
 392:	27 df       	rcall	.-434    	; 0x1e2 <spi_transmit_sync>
    mirf_CSN_hi;
 394:	c2 9a       	sbi	0x18, 2	; 24
}
 396:	0f 90       	pop	r0
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 3a2:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	45 e0       	ldi	r20, 0x05	; 5
 3a8:	e4 df       	rcall	.-56     	; 0x372 <mirf_write_register>
}
 3aa:	08 95       	ret

000003ac <mirf_set_RADDR>:
    mirf_CE_hi;
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 3ac:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 3ae:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P0,adr,5);
 3b0:	8a e0       	ldi	r24, 0x0A	; 10
 3b2:	45 e0       	ldi	r20, 0x05	; 5
 3b4:	de df       	rcall	.-68     	; 0x372 <mirf_write_register>
    mirf_CE_hi;
 3b6:	c3 9a       	sbi	0x18, 3	; 24
}
 3b8:	08 95       	ret

000003ba <mirf_set_RADDR_P1>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR_P1(uint8_t * adr) 
// Sets the receiving address
{
 3ba:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 3bc:	c3 98       	cbi	0x18, 3	; 24
    mirf_write_register(RX_ADDR_P1,adr,5);
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	45 e0       	ldi	r20, 0x05	; 5
 3c2:	d7 df       	rcall	.-82     	; 0x372 <mirf_write_register>
    mirf_CE_hi;
 3c4:	c3 9a       	sbi	0x18, 3	; 24
}
 3c6:	08 95       	ret

000003c8 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	16 2f       	mov	r17, r22
    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    while (PTX) {}                  // Wait until last paket is send
 3d2:	80 91 8e 00 	lds	r24, 0x008E
 3d6:	88 23       	and	r24, r24
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <mirf_send+0xa>

    //USART_Transmit('h');
    mirf_CE_lo;
 3da:	c3 98       	cbi	0x18, 3	; 24

    PTX = 1;                        // Set to transmitter mode
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 93 8e 00 	sts	0x008E, r24
    TX_POWERUP;                     // Power up
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	6a e4       	ldi	r22, 0x4A	; 74
 3e6:	32 df       	rcall	.-412    	; 0x24c <mirf_config_register>
    
    //USART_Transmit('h');
    mirf_CSN_lo;                    // Pull down chip select
 3e8:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
 3ea:	81 ee       	ldi	r24, 0xE1	; 225
 3ec:	0c df       	rcall	.-488    	; 0x206 <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 3ee:	c2 9a       	sbi	0x18, 2	; 24
    mirf_CSN_lo;                    // Pull down chip select
 3f0:	c2 98       	cbi	0x18, 2	; 24
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 3f2:	80 ea       	ldi	r24, 0xA0	; 160
 3f4:	08 df       	rcall	.-496    	; 0x206 <spi_fast_shift>
    //USART_Transmit('h');
    //spi_transmit_sync(testbuffer,16);
    spi_transmit_sync(value,len);   // Write payload
 3f6:	ce 01       	movw	r24, r28
 3f8:	61 2f       	mov	r22, r17
 3fa:	f3 de       	rcall	.-538    	; 0x1e2 <spi_transmit_sync>
    mirf_CSN_hi;                    // Pull up chip select
 3fc:	c2 9a       	sbi	0x18, 2	; 24
    //USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
 3fe:	c3 9a       	sbi	0x18, 3	; 24
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	08 95       	ret

00000408 <USART_Init>:
//                            usart_init

void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
 408:	92 b9       	out	0x02, r25	; 2
	UBRRL = (unsigned char)baud;
 40a:	89 b9       	out	0x09, r24	; 9
	if (SET_U2X)
	{
		UCSRA |= (1<<U2X);
	}
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 40c:	88 e1       	ldi	r24, 0x18	; 24
 40e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<USBS)|(3<<UCSZ0);
 410:	8e e0       	ldi	r24, 0x0E	; 14
 412:	83 b9       	out	0x03, r24	; 3
}
 414:	08 95       	ret

00000416 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 416:	5d 9b       	sbis	0x0b, 5	; 11
 418:	fe cf       	rjmp	.-4      	; 0x416 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
 41a:	8c b9       	out	0x0c, r24	; 12
}
 41c:	08 95       	ret

0000041e <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
 41e:	5f 9b       	sbis	0x0b, 7	; 11
 420:	fe cf       	rjmp	.-4      	; 0x41e <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
 422:	8c b1       	in	r24, 0x0c	; 12
}
 424:	08 95       	ret

00000426 <transmit_string>:

void transmit_string(char *ptr)
{
 426:	fc 01       	movw	r30, r24
	while(*ptr)
 428:	80 81       	ld	r24, Z
 42a:	88 23       	and	r24, r24
 42c:	39 f0       	breq	.+14     	; 0x43c <transmit_string+0x16>
	while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	return UDR;
}

void transmit_string(char *ptr)
 42e:	31 96       	adiw	r30, 0x01	; 1
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 430:	5d 9b       	sbis	0x0b, 5	; 11
 432:	fe cf       	rjmp	.-4      	; 0x430 <transmit_string+0xa>
	/* Put data into buffer, sends the data */
	UDR = data;
 434:	8c b9       	out	0x0c, r24	; 12
	return UDR;
}

void transmit_string(char *ptr)
{
	while(*ptr)
 436:	81 91       	ld	r24, Z+
 438:	88 23       	and	r24, r24
 43a:	d1 f7       	brne	.-12     	; 0x430 <transmit_string+0xa>
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
