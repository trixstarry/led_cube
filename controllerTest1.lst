
controllerTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b64  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007a7  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e4 ee       	ldi	r30, 0xE4	; 228
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	02 c0       	rjmp	.+4      	; 0x6c <.do_copy_data_start>

00000068 <.do_copy_data_loop>:
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0

0000006c <.do_copy_data_start>:
  6c:	a0 30       	cpi	r26, 0x00	; 0
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <.do_copy_data_loop>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e0       	ldi	r26, 0x00	; 0
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a0 30       	cpi	r26, 0x00	; 0
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  86:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <init>:

//	init
//******************************************************************************
void init()
{
	DDRB	= ~(1<<PB0);	// Outputs except PB0
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	84 b9       	out	0x04, r24	; 4
	PORTB	= (1<<PB3);		// initial value
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	85 b9       	out	0x05, r24	; 5
	// Set MOSI and SCK output 
	//DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
	// Enable SPI, Master, set clock rate clk/8
	//SPCR	|= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	//SPSR	|= (1<<SPI2X);
}
  96:	08 95       	ret

00000098 <spi_init>:

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  98:	81 b1       	in	r24, 0x01	; 1
  9a:	80 67       	ori	r24, 0x70	; 112
  9c:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	81 65       	ori	r24, 0x51	; 81
  a2:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  a4:	8d b5       	in	r24, 0x2d	; 45
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	8d bd       	out	0x2d, r24	; 45


}
  aa:	08 95       	ret

000000ac <SPI_MasterTransmit>:
//	SPI_MasterTransmit
//******************************************************************************
void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
  ac:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
  ae:	0d b4       	in	r0, 0x2d	; 45
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <SPI_MasterTransmit+0x2>
	return SPDR;
  b4:	8e b5       	in	r24, 0x2e	; 46
}
  b6:	08 95       	ret

000000b8 <main>:

//	init
//******************************************************************************
void init()
{
	DDRB	= ~(1<<PB0);	// Outputs except PB0
  b8:	8e ef       	ldi	r24, 0xFE	; 254
  ba:	84 b9       	out	0x04, r24	; 4
	PORTB	= (1<<PB3);		// initial value
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	85 b9       	out	0x05, r24	; 5
	//SPSR	|= (1<<SPI2X);
}

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	80 67       	ori	r24, 0x70	; 112
  c4:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	81 65       	ori	r24, 0x51	; 81
  ca:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  cc:	8d b5       	in	r24, 0x2d	; 45
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8d bd       	out	0x2d, r24	; 45
//	SPI_MasterTransmit
//******************************************************************************
void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
  d2:	81 e6       	ldi	r24, 0x61	; 97
  d4:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
  d6:	0d b4       	in	r0, 0x2d	; 45
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <main+0x1e>
	return SPDR;
  dc:	9e b5       	in	r25, 0x2e	; 46
  de:	fa cf       	rjmp	.-12     	; 0xd4 <main+0x1c>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
