
controllerTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c78  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000080b  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
   8:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
   c:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  10:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  14:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  18:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  1c:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  20:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  24:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  28:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  2c:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  30:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  34:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  38:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  3c:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  40:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  44:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  48:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>
  4c:	0c 94 32 00 	jmp	0x64	; 0x64 <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000064 <__bad_interrupt>:
  64:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000068 <init>:

//	init
//******************************************************************************
void init()
{
	DDRB	= ~(1<<PB0);	// Outputs except PB0
  68:	8e ef       	ldi	r24, 0xFE	; 254
  6a:	84 b9       	out	0x04, r24	; 4
	PORTB	= (1<<PB3);		// initial value
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	85 b9       	out	0x05, r24	; 5
	// Set MOSI and SCK output 
	//DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
	// Enable SPI, Master, set clock rate clk/8
	//SPCR	|= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	//SPSR	|= (1<<SPI2X);
}
  70:	08 95       	ret

00000072 <interrupt_init>:

void interrupt_init(){
    EICRA |= (1<<ISC11)|(1<<ISC10); //rising edge
  72:	e9 e6       	ldi	r30, 0x69	; 105
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	8c 60       	ori	r24, 0x0C	; 12
  7a:	80 83       	st	Z, r24
                                    //0 0 The low level of INTn generates an interrupt request.
                                    //0 1 Any logical change on INTn generates an interrupt request.
                                    //1 0 The falling edge of INTn generates an interrupt request.
                                    //1 1 The rising edge of INTn generates an interrupt request.
    EIMSK |= (1<<INT1);
  7c:	e9 9a       	sbi	0x1d, 1	; 29
}
  7e:	08 95       	ret

00000080 <spi_init>:

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  80:	81 b1       	in	r24, 0x01	; 1
  82:	80 67       	ori	r24, 0x70	; 112
  84:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	81 65       	ori	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  8c:	8d b5       	in	r24, 0x2d	; 45
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8d bd       	out	0x2d, r24	; 45


}
  92:	08 95       	ret

00000094 <SPI_MasterTransmit>:
//	SPI_MasterTransmit
//******************************************************************************
void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
  94:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <SPI_MasterTransmit+0x2>
	return SPDR;
  9c:	8e b5       	in	r24, 0x2e	; 46
}
  9e:	08 95       	ret

000000a0 <ISR>:

ISR(INT1_vect){

    //TURN ON A LED
    //PORTA |= (1<<PA7);
}
  a0:	08 95       	ret

000000a2 <main>:

//	init
//******************************************************************************
void init()
{
	DDRB	= ~(1<<PB0);	// Outputs except PB0
  a2:	8e ef       	ldi	r24, 0xFE	; 254
  a4:	84 b9       	out	0x04, r24	; 4
	PORTB	= (1<<PB3);		// initial value
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	85 b9       	out	0x05, r24	; 5
    EIMSK |= (1<<INT1);
}

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  aa:	81 b1       	in	r24, 0x01	; 1
  ac:	80 67       	ori	r24, 0x70	; 112
  ae:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  b0:	8c b5       	in	r24, 0x2c	; 44
  b2:	81 65       	ori	r24, 0x51	; 81
  b4:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  b6:	8d b5       	in	r24, 0x2d	; 45
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8d bd       	out	0x2d, r24	; 45
	//SPCR	|= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	//SPSR	|= (1<<SPI2X);
}

void interrupt_init(){
    EICRA |= (1<<ISC11)|(1<<ISC10); //rising edge
  bc:	80 91 69 00 	lds	r24, 0x0069
  c0:	8c 60       	ori	r24, 0x0C	; 12
  c2:	80 93 69 00 	sts	0x0069, r24
                                    //0 0 The low level of INTn generates an interrupt request.
                                    //0 1 Any logical change on INTn generates an interrupt request.
                                    //1 0 The falling edge of INTn generates an interrupt request.
                                    //1 1 The rising edge of INTn generates an interrupt request.
    EIMSK |= (1<<INT1);
  c6:	e9 9a       	sbi	0x1d, 1	; 29
//	SPI_MasterTransmit
//******************************************************************************
void SPI_MasterTransmit(char cData)
{
	// Start transmission
	SPDR = cData;
  c8:	81 e6       	ldi	r24, 0x61	; 97
  ca:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
  cc:	0d b4       	in	r0, 0x2d	; 45
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0x2a>
	return SPDR;
  d2:	9e b5       	in	r25, 0x2e	; 46
			counter1++;
		}
		counter2++;
*/
		SPI_MasterTransmit('a');
	}
  d4:	fa cf       	rjmp	.-12     	; 0xca <main+0x28>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
