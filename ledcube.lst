
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000246c  00002500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800128  00800128  00002528  2**0
                  ALLOC
  3 .stab         0000489c  00000000  00000000  00002528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001042  00000000  00000000  00006dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__ctors_end>
       4:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       c:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__vector_3>
      10:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      14:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      18:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      1c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      20:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      24:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__vector_9>
      28:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      2c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      30:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      34:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      38:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      3c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      40:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      44:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      4c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      50:	33 06       	cpc	r3, r19
      52:	1c 06       	cpc	r1, r28
      54:	05 06       	cpc	r0, r21
      56:	ee 05       	cpc	r30, r14
      58:	d7 05       	cpc	r29, r7
      5a:	c0 05       	cpc	r28, r0
      5c:	a9 05       	cpc	r26, r9
      5e:	92 05       	cpc	r25, r2
      60:	7b 05       	cpc	r23, r11
      62:	64 05       	cpc	r22, r4
      64:	4d 05       	cpc	r20, r13
      66:	4a 05       	cpc	r20, r10
      68:	33 05       	cpc	r19, r3
      6a:	1c 05       	cpc	r17, r12
      6c:	05 05       	cpc	r16, r5
      6e:	02 05       	cpc	r16, r2
      70:	ff 04       	cpc	r15, r15
      72:	e8 04       	cpc	r14, r8
      74:	d1 04       	cpc	r13, r1
      76:	ba 04       	cpc	r11, r10
      78:	b7 04       	cpc	r11, r7
      7a:	a0 04       	cpc	r10, r0
      7c:	89 04       	cpc	r8, r9
      7e:	72 04       	cpc	r7, r2
      80:	4a 06       	cpc	r4, r26
      82:	45 08       	sbc	r4, r5
      84:	2e 08       	sbc	r2, r14
      86:	17 08       	sbc	r1, r7
      88:	00 08       	sbc	r0, r0
      8a:	e9 07       	cpc	r30, r25
      8c:	d2 07       	cpc	r29, r18
      8e:	bb 07       	cpc	r27, r27
      90:	a4 07       	cpc	r26, r20
      92:	8d 07       	cpc	r24, r29
      94:	76 07       	cpc	r23, r22
      96:	5f 07       	cpc	r21, r31
      98:	5c 07       	cpc	r21, r28
      9a:	45 07       	cpc	r20, r21
      9c:	2e 07       	cpc	r18, r30
      9e:	17 07       	cpc	r17, r23
      a0:	14 07       	cpc	r17, r20
      a2:	11 07       	cpc	r17, r17
      a4:	fa 06       	cpc	r15, r26
      a6:	e3 06       	cpc	r14, r19
      a8:	cc 06       	cpc	r12, r28
      aa:	c9 06       	cpc	r12, r25
      ac:	b2 06       	cpc	r11, r18
      ae:	9b 06       	cpc	r9, r27
      b0:	84 06       	cpc	r8, r20
      b2:	5c 08       	sbc	r5, r12
      b4:	57 0a       	sbc	r5, r23
      b6:	40 0a       	sbc	r4, r16
      b8:	29 0a       	sbc	r2, r25
      ba:	12 0a       	sbc	r1, r18
      bc:	fb 09       	sbc	r31, r11
      be:	e4 09       	sbc	r30, r4
      c0:	cd 09       	sbc	r28, r13
      c2:	b6 09       	sbc	r27, r6
      c4:	9f 09       	sbc	r25, r15
      c6:	88 09       	sbc	r24, r8
      c8:	71 09       	sbc	r23, r1
      ca:	6e 09       	sbc	r22, r14
      cc:	57 09       	sbc	r21, r7
      ce:	40 09       	sbc	r20, r0
      d0:	29 09       	sbc	r18, r9
      d2:	26 09       	sbc	r18, r6
      d4:	23 09       	sbc	r18, r3
      d6:	0c 09       	sbc	r16, r12
      d8:	f5 08       	sbc	r15, r5
      da:	de 08       	sbc	r13, r14
      dc:	db 08       	sbc	r13, r11
      de:	c4 08       	sbc	r12, r4
      e0:	ad 08       	sbc	r10, r13
      e2:	96 08       	sbc	r9, r6
      e4:	6e 0a       	sbc	r6, r30

000000e6 <R>:
      e6:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      fe:	00 01 00 00 00 00 00 00 00 00 08 00 00 00 00 00     ................
     10e:	00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00     ................
     11e:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     12e:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     146:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
     162:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
     172:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
     182:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     1a2:	40 00 00 00 00 00 00 00 00 00 02 00 08 00 00 00     @...............
     1b2:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     1ca:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     1da:	00 00 00 00 00 40                                   .....@

000001e0 <G>:
     1e0:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     1f8:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     208:	00 00 00 00 02 00 00 00 00 00 00 00 08 00 00 00     ................
     218:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     228:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     240:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     25c:	00 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     26c:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     27c:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     29c:	20 00 00 00 00 00 00 00 00 00 04 00 04 00 00 00      ...............
     2ac:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     2c4:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     2d4:	00 00 00 00 00 80                                   ......

000002da <B>:
     2da:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     2f2:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     302:	00 00 00 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
     312:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     322:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     33a:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     356:	00 00 04 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     366:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     376:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     386:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     396:	10 00 00 00 00 00 00 00 00 00 08 00 02 00 00 00     ................
     3a6:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     3be:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     3ce:	00 00 00 00 01 00                                   ......

000003d4 <__ctors_end>:
     3d4:	11 24       	eor	r1, r1
     3d6:	1f be       	out	0x3f, r1	; 63
     3d8:	ce ef       	ldi	r28, 0xFE	; 254
     3da:	d2 e0       	ldi	r29, 0x02	; 2
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	cd bf       	out	0x3d, r28	; 61

000003e0 <__do_copy_data>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	ec e6       	ldi	r30, 0x6C	; 108
     3e8:	f4 e2       	ldi	r31, 0x24	; 36
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__do_copy_data+0x10>
     3ec:	05 90       	lpm	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	a8 32       	cpi	r26, 0x28	; 40
     3f2:	b1 07       	cpc	r27, r17
     3f4:	d9 f7       	brne	.-10     	; 0x3ec <__do_copy_data+0xc>

000003f6 <__do_clear_bss>:
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	a8 e2       	ldi	r26, 0x28	; 40
     3fa:	b1 e0       	ldi	r27, 0x01	; 1
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <.do_clear_bss_start>

000003fe <.do_clear_bss_loop>:
     3fe:	1d 92       	st	X+, r1

00000400 <.do_clear_bss_start>:
     400:	aa 36       	cpi	r26, 0x6A	; 106
     402:	b1 07       	cpc	r27, r17
     404:	e1 f7       	brne	.-8      	; 0x3fe <.do_clear_bss_loop>
     406:	0e 94 24 10 	call	0x2048	; 0x2048 <main>
     40a:	0c 94 34 12 	jmp	0x2468	; 0x2468 <_exit>

0000040e <__bad_interrupt>:
     40e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000412 <initialize_interrupts>:
uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers
uint8_t buffer[32] = {0x01,0x02,0x04,' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',};
uint8_t next = 0;

void initialize_interrupts(void){
    TIMSK1 = (1<<TOIE1);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 6f 00 	sts	0x006F, r24
    }
     418:	08 95       	ret

0000041a <init>:

void init(){
    //DDRA |= (1<<PB0)|(1<<PB1);
    //PORTB |= (1<<PB0)|(1<<PB1);
	// Initialize AVR for use with mirf
	mirf_init();
     41a:	0e 94 a0 10 	call	0x2140	; 0x2140 <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41e:	8f e7       	ldi	r24, 0x7F	; 127
     420:	98 e3       	ldi	r25, 0x38	; 56
     422:	a1 e0       	ldi	r26, 0x01	; 1
     424:	81 50       	subi	r24, 0x01	; 1
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	a0 40       	sbci	r26, 0x00	; 0
     42a:	e1 f7       	brne	.-8      	; 0x424 <init+0xa>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <init+0x14>
     42e:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    //PORTB |= (1<<PB0)|(1<<PB1);
}
     430:	08 95       	ret

00000432 <init2>:
void init2(){
	//mirf_read_register (STATUS, buffer, 1);
	
	// Configure mirf
	mirf_config();
     432:	0e 94 39 11 	call	0x2272	; 0x2272 <mirf_config>
	// Test transmitting
    //PORTA |= (0<<PA0)|(1<<PA1);
}
     436:	08 95       	ret

00000438 <Transmit>:


void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
     438:	0e 94 92 11 	call	0x2324	; 0x2324 <mirf_send>
		//_delay_ms(10);
}
     43c:	08 95       	ret

0000043e <Receive>:


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
        //uint64_t i = 0;
		while (!mirf_data_ready()){
     444:	0e 94 b3 10 	call	0x2166	; 0x2166 <mirf_data_ready>
     448:	88 23       	and	r24, r24
     44a:	e1 f3       	breq	.-8      	; 0x444 <Receive+0x6>
            //    return -1;
           // }
            //led1_on();
            //i++;
        }
		mirf_get_data(buffer);
     44c:	ce 01       	movw	r24, r28
     44e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <mirf_get_data>
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <level>:

void level(uint8_t layer){
    switch(layer){
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	f1 f0       	breq	.+60     	; 0x49a <level+0x40>
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	40 f0       	brcs	.+16     	; 0x472 <level+0x18>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	f9 f0       	breq	.+62     	; 0x4a4 <level+0x4a>
     466:	84 30       	cpi	r24, 0x04	; 4
     468:	99 f0       	breq	.+38     	; 0x490 <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     46a:	85 b1       	in	r24, 0x05	; 5
     46c:	80 67       	ori	r24, 0x70	; 112
     46e:	85 b9       	out	0x05, r24	; 5
     470:	08 95       	ret
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}

void level(uint8_t layer){
    switch(layer){
     472:	88 23       	and	r24, r24
     474:	39 f0       	breq	.+14     	; 0x484 <level+0x2a>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	c1 f7       	brne	.-16     	; 0x46a <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	8f 78       	andi	r24, 0x8F	; 143
     47e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     480:	2c 9a       	sbi	0x05, 4	; 5
            return;
     482:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     484:	85 b1       	in	r24, 0x05	; 5
     486:	8f 78       	andi	r24, 0x8F	; 143
     488:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     48a:	85 b1       	in	r24, 0x05	; 5
     48c:	85 b9       	out	0x05, r24	; 5
            return;
     48e:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     490:	85 b1       	in	r24, 0x05	; 5
     492:	8f 78       	andi	r24, 0x8F	; 143
     494:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     496:	2e 9a       	sbi	0x05, 6	; 5
            return;
     498:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     49a:	85 b1       	in	r24, 0x05	; 5
     49c:	8f 78       	andi	r24, 0x8F	; 143
     49e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     4a0:	2d 9a       	sbi	0x05, 5	; 5
            return;
     4a2:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     4a4:	85 b1       	in	r24, 0x05	; 5
     4a6:	8f 78       	andi	r24, 0x8F	; 143
     4a8:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     4aa:	85 b1       	in	r24, 0x05	; 5
     4ac:	80 63       	ori	r24, 0x30	; 48
     4ae:	85 b9       	out	0x05, r24	; 5
            return;
     4b0:	08 95       	ret

000004b2 <transmit1>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
     4b6:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
     4be:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
     4c6:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4c8:	0d b4       	in	r0, 0x2d	; 45
     4ca:	07 fe       	sbrs	r0, 7
     4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
     4ce:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4d0:	0d b4       	in	r0, 0x2d	; 45
     4d2:	07 fe       	sbrs	r0, 7
     4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
     4d6:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4d8:	0d b4       	in	r0, 0x2d	; 45
     4da:	07 fe       	sbrs	r0, 7
     4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
     4de:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4e0:	0d b4       	in	r0, 0x2d	; 45
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
     4e6:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
     4ee:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4f0:	0d b4       	in	r0, 0x2d	; 45
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
     4f6:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4f8:	0d b4       	in	r0, 0x2d	; 45
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
     4fe:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     500:	0d b4       	in	r0, 0x2d	; 45
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <transmit1+0x4e>

	//Toggle latch
	TOGGLE_LATCH
     506:	16 9a       	sbi	0x02, 6	; 2
     508:	16 98       	cbi	0x02, 6	; 2
}
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <transmit2>:

void transmit2(uint8_t layer){
     510:	1f 93       	push	r17
     512:	18 2f       	mov	r17, r24
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
     514:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
     518:	81 2f       	mov	r24, r17
     51a:	90 e0       	ldi	r25, 0x00	; 0
    for(i=5;i-- > 0; ){
     51c:	44 e0       	ldi	r20, 0x04	; 4
     51e:	9c 01       	movw	r18, r24
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	22 0f       	add	r18, r18
     526:	33 1f       	adc	r19, r19
        temp = (frame[layer][i]);
     528:	28 0f       	add	r18, r24
     52a:	39 1f       	adc	r19, r25
     52c:	e4 2f       	mov	r30, r20
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	d9 01       	movw	r26, r18
     532:	ae 0f       	add	r26, r30
     534:	bf 1f       	adc	r27, r31
     536:	aa 0f       	add	r26, r26
     538:	bb 1f       	adc	r27, r27
     53a:	a8 5d       	subi	r26, 0xD8	; 216
     53c:	be 4f       	sbci	r27, 0xFE	; 254
     53e:	8c 91       	ld	r24, X
        //load first byte
        SPDR = temp;
     540:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <transmit2+0x32>

        temp = (frame[layer][i]>>8);
     548:	d9 01       	movw	r26, r18
     54a:	ae 0f       	add	r26, r30
     54c:	bf 1f       	adc	r27, r31
     54e:	aa 0f       	add	r26, r26
     550:	bb 1f       	adc	r27, r27
     552:	a8 5d       	subi	r26, 0xD8	; 216
     554:	be 4f       	sbci	r27, 0xFE	; 254
     556:	11 96       	adiw	r26, 0x01	; 1
     558:	8c 91       	ld	r24, X
     55a:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
     55c:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     55e:	0d b4       	in	r0, 0x2d	; 45
     560:	07 fe       	sbrs	r0, 7
     562:	fd cf       	rjmp	.-6      	; 0x55e <transmit2+0x4e>
        frame[layer][i] = 0;
     564:	e2 0f       	add	r30, r18
     566:	f3 1f       	adc	r31, r19
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	e8 5d       	subi	r30, 0xD8	; 216
     56e:	fe 4f       	sbci	r31, 0xFE	; 254
     570:	11 82       	std	Z+1, r1	; 0x01
     572:	10 82       	st	Z, r1

void transmit2(uint8_t layer){
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
    for(i=5;i-- > 0; ){
     574:	44 23       	and	r20, r20
     576:	11 f0       	breq	.+4      	; 0x57c <transmit2+0x6c>
     578:	41 50       	subi	r20, 0x01	; 1
     57a:	d8 cf       	rjmp	.-80     	; 0x52c <transmit2+0x1c>
        while(bit_is_clear(SPSR,SPIF)){};
        frame[layer][i] = 0;
    }

	//Toggle latch
	TOGGLE_LATCH
     57c:	16 9a       	sbi	0x02, 6	; 2
     57e:	16 98       	cbi	0x02, 6	; 2
     580:	8f ec       	ldi	r24, 0xCF	; 207
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <transmit2+0x74>
     588:	00 c0       	rjmp	.+0      	; 0x58a <transmit2+0x7a>
     58a:	00 00       	nop
    _delay_ms(1);
    //_delay_us(300);
}
     58c:	1f 91       	pop	r17
     58e:	08 95       	ret

00000590 <level_test>:


void level_test(void){
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	ff 24       	eor	r15, r15
     598:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     59a:	8f 2d       	mov	r24, r15
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	e1 f0       	breq	.+56     	; 0x5da <level_test+0x4a>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	e0 f4       	brcc	.+56     	; 0x5de <level_test+0x4e>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <level_test+0x1c>
     5aa:	41 c0       	rjmp	.+130    	; 0x62e <level_test+0x9e>
            case 0:
                level(i);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
                transmit1(on,on,on,on,on);
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	9f ef       	ldi	r25, 0xFF	; 255
     5b6:	6f ef       	ldi	r22, 0xFF	; 255
     5b8:	7f ef       	ldi	r23, 0xFF	; 255
     5ba:	4f ef       	ldi	r20, 0xFF	; 255
     5bc:	5f ef       	ldi	r21, 0xFF	; 255
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	3f ef       	ldi	r19, 0xFF	; 255
     5c2:	0f ef       	ldi	r16, 0xFF	; 255
     5c4:	1f ef       	ldi	r17, 0xFF	; 255
     5c6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>

void level_test(void){
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
     5ca:	8f 2d       	mov	r24, r15
     5cc:	85 30       	cpi	r24, 0x05	; 5
     5ce:	d0 f4       	brcc	.+52     	; 0x604 <level_test+0x74>
    _delay_ms(1);
    //_delay_us(300);
}


void level_test(void){
     5d0:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     5d2:	8f 2d       	mov	r24, r15
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	21 f7       	brne	.-56     	; 0x5a2 <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	18 c0       	rjmp	.+48     	; 0x60e <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	a9 f0       	breq	.+42     	; 0x60c <level_test+0x7c>
     5e2:	84 30       	cpi	r24, 0x04	; 4
     5e4:	19 f7       	brne	.-58     	; 0x5ac <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
                transmit1(on,on,on,on,on);
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	6f ef       	ldi	r22, 0xFF	; 255
     5f2:	7f ef       	ldi	r23, 0xFF	; 255
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	5f ef       	ldi	r21, 0xFF	; 255
     5f8:	2f ef       	ldi	r18, 0xFF	; 255
     5fa:	3f ef       	ldi	r19, 0xFF	; 255
     5fc:	0f ef       	ldi	r16, 0xFF	; 255
     5fe:	1f ef       	ldi	r17, 0xFF	; 255
     600:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>
                break;
        }
    }
}
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
                transmit1(on,on,on,on,on);
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	6f ef       	ldi	r22, 0xFF	; 255
     618:	7f ef       	ldi	r23, 0xFF	; 255
     61a:	4f ef       	ldi	r20, 0xFF	; 255
     61c:	5f ef       	ldi	r21, 0xFF	; 255
     61e:	2f ef       	ldi	r18, 0xFF	; 255
     620:	3f ef       	ldi	r19, 0xFF	; 255
     622:	0f ef       	ldi	r16, 0xFF	; 255
     624:	1f ef       	ldi	r17, 0xFF	; 255
     626:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>
    _delay_ms(1);
    //_delay_us(300);
}


void level_test(void){
     62a:	f3 94       	inc	r15
     62c:	d2 cf       	rjmp	.-92     	; 0x5d2 <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	ee cf       	rjmp	.-36     	; 0x60e <level_test+0x7e>

00000632 <shift_LED>:
        }
    }
}


void shift_LED(void){
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
     638:	f0 90 60 01 	lds	r15, 0x0160
     63c:	8f 2d       	mov	r24, r15
     63e:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
    //level(0);


    if(LED1 == 0)
     642:	00 91 25 01 	lds	r16, 0x0125
     646:	10 91 26 01 	lds	r17, 0x0126
     64a:	01 15       	cp	r16, r1
     64c:	11 05       	cpc	r17, r1
     64e:	e1 f4       	brne	.+56     	; 0x688 <shift_LED+0x56>
    {
        if(first2){
     650:	80 91 23 01 	lds	r24, 0x0123
     654:	88 23       	and	r24, r24
     656:	09 f4       	brne	.+2      	; 0x65a <shift_LED+0x28>
     658:	4b c0       	rjmp	.+150    	; 0x6f0 <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
     65a:	10 92 23 01 	sts	0x0123, r1
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	30 93 68 01 	sts	0x0168, r19
     66a:	20 93 67 01 	sts	0x0167, r18
     66e:	e0 91 61 01 	lds	r30, 0x0161
     672:	f0 91 62 01 	lds	r31, 0x0162
     676:	60 91 63 01 	lds	r22, 0x0163
     67a:	70 91 64 01 	lds	r23, 0x0164
     67e:	40 91 65 01 	lds	r20, 0x0165
     682:	50 91 66 01 	lds	r21, 0x0166
     686:	1b c0       	rjmp	.+54     	; 0x6be <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
     688:	80 91 24 01 	lds	r24, 0x0124
     68c:	88 23       	and	r24, r24
     68e:	09 f0       	breq	.+2      	; 0x692 <shift_LED+0x60>
     690:	7c c0       	rjmp	.+248    	; 0x78a <shift_LED+0x158>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
     692:	00 0f       	add	r16, r16
     694:	11 1f       	adc	r17, r17
     696:	10 93 26 01 	sts	0x0126, r17
     69a:	00 93 25 01 	sts	0x0125, r16
     69e:	e0 91 61 01 	lds	r30, 0x0161
     6a2:	f0 91 62 01 	lds	r31, 0x0162
     6a6:	60 91 63 01 	lds	r22, 0x0163
     6aa:	70 91 64 01 	lds	r23, 0x0164
     6ae:	40 91 65 01 	lds	r20, 0x0165
     6b2:	50 91 66 01 	lds	r21, 0x0166
     6b6:	20 91 67 01 	lds	r18, 0x0167
     6ba:	30 91 68 01 	lds	r19, 0x0168
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
     6be:	cf 01       	movw	r24, r30
     6c0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>
     6c4:	8f e7       	ldi	r24, 0x7F	; 127
     6c6:	98 e3       	ldi	r25, 0x38	; 56
     6c8:	a1 e0       	ldi	r26, 0x01	; 1
     6ca:	81 50       	subi	r24, 0x01	; 1
     6cc:	90 40       	sbci	r25, 0x00	; 0
     6ce:	a0 40       	sbci	r26, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <shift_LED+0x98>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <shift_LED+0xa2>
     6d4:	00 00       	nop
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	94 e3       	ldi	r25, 0x34	; 52
     6da:	ac e0       	ldi	r26, 0x0C	; 12
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	a0 40       	sbci	r26, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <shift_LED+0xaa>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <shift_LED+0xb4>
     6e6:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
     6f0:	20 91 67 01 	lds	r18, 0x0167
     6f4:	30 91 68 01 	lds	r19, 0x0168
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
     6f8:	21 15       	cp	r18, r1
     6fa:	31 05       	cpc	r19, r1
     6fc:	09 f0       	breq	.+2      	; 0x700 <shift_LED+0xce>
     6fe:	b1 cf       	rjmp	.-158    	; 0x662 <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
     700:	80 91 22 01 	lds	r24, 0x0122
     704:	88 23       	and	r24, r24
     706:	09 f0       	breq	.+2      	; 0x70a <shift_LED+0xd8>
     708:	53 c0       	rjmp	.+166    	; 0x7b0 <shift_LED+0x17e>
     70a:	40 91 65 01 	lds	r20, 0x0165
     70e:	50 91 66 01 	lds	r21, 0x0166
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
     712:	41 15       	cp	r20, r1
     714:	51 05       	cpc	r21, r1
     716:	09 f0       	breq	.+2      	; 0x71a <shift_LED+0xe8>
     718:	4f c0       	rjmp	.+158    	; 0x7b8 <shift_LED+0x186>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
     71a:	80 91 21 01 	lds	r24, 0x0121
     71e:	88 23       	and	r24, r24
     720:	09 f0       	breq	.+2      	; 0x724 <shift_LED+0xf2>
     722:	5b c0       	rjmp	.+182    	; 0x7da <shift_LED+0x1a8>
     724:	00 91 63 01 	lds	r16, 0x0163
     728:	10 91 64 01 	lds	r17, 0x0164
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
     72c:	01 15       	cp	r16, r1
     72e:	11 05       	cpc	r17, r1
     730:	09 f0       	breq	.+2      	; 0x734 <shift_LED+0x102>
     732:	57 c0       	rjmp	.+174    	; 0x7e2 <shift_LED+0x1b0>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
     734:	80 91 20 01 	lds	r24, 0x0120
     738:	88 23       	and	r24, r24
     73a:	09 f0       	breq	.+2      	; 0x73e <shift_LED+0x10c>
     73c:	62 c0       	rjmp	.+196    	; 0x802 <shift_LED+0x1d0>
     73e:	e0 91 61 01 	lds	r30, 0x0161
     742:	f0 91 62 01 	lds	r31, 0x0162
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
     746:	30 97       	sbiw	r30, 0x00	; 0
     748:	09 f0       	breq	.+2      	; 0x74c <shift_LED+0x11a>
     74a:	5f c0       	rjmp	.+190    	; 0x80a <shift_LED+0x1d8>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	30 93 26 01 	sts	0x0126, r19
     754:	20 93 25 01 	sts	0x0125, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 20 01 	sts	0x0120, r24
     75e:	80 93 21 01 	sts	0x0121, r24
     762:	80 93 22 01 	sts	0x0122, r24
     766:	80 93 23 01 	sts	0x0123, r24
     76a:	80 93 24 01 	sts	0x0124, r24
                        layer++;
     76e:	8f 2d       	mov	r24, r15
     770:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
     772:	65 e0       	ldi	r22, 0x05	; 5
     774:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodqi4>
     778:	90 93 60 01 	sts	0x0160, r25
     77c:	9f 01       	movw	r18, r30
     77e:	af 01       	movw	r20, r30
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	01 e0       	ldi	r16, 0x01	; 1
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	9a cf       	rjmp	.-204    	; 0x6be <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
     78a:	10 92 24 01 	sts	0x0124, r1
     78e:	e0 91 61 01 	lds	r30, 0x0161
     792:	f0 91 62 01 	lds	r31, 0x0162
     796:	60 91 63 01 	lds	r22, 0x0163
     79a:	70 91 64 01 	lds	r23, 0x0164
     79e:	40 91 65 01 	lds	r20, 0x0165
     7a2:	50 91 66 01 	lds	r21, 0x0166
     7a6:	20 91 67 01 	lds	r18, 0x0167
     7aa:	30 91 68 01 	lds	r19, 0x0168
     7ae:	87 cf       	rjmp	.-242    	; 0x6be <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
     7b0:	10 92 22 01 	sts	0x0122, r1
     7b4:	41 e0       	ldi	r20, 0x01	; 1
     7b6:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
     7b8:	44 0f       	add	r20, r20
     7ba:	55 1f       	adc	r21, r21
     7bc:	50 93 66 01 	sts	0x0166, r21
     7c0:	40 93 65 01 	sts	0x0165, r20
     7c4:	e0 91 61 01 	lds	r30, 0x0161
     7c8:	f0 91 62 01 	lds	r31, 0x0162
     7cc:	60 91 63 01 	lds	r22, 0x0163
     7d0:	70 91 64 01 	lds	r23, 0x0164
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	72 cf       	rjmp	.-284    	; 0x6be <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
     7da:	10 92 21 01 	sts	0x0121, r1
     7de:	01 e0       	ldi	r16, 0x01	; 1
     7e0:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
     7e2:	b8 01       	movw	r22, r16
     7e4:	66 0f       	add	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	70 93 64 01 	sts	0x0164, r23
     7ec:	60 93 63 01 	sts	0x0163, r22
     7f0:	e0 91 61 01 	lds	r30, 0x0161
     7f4:	f0 91 62 01 	lds	r31, 0x0162
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	5e cf       	rjmp	.-324    	; 0x6be <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
     802:	10 92 20 01 	sts	0x0120, r1
     806:	e1 e0       	ldi	r30, 0x01	; 1
     808:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	f0 93 62 01 	sts	0x0162, r31
     812:	e0 93 61 01 	sts	0x0161, r30
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	4d cf       	rjmp	.-358    	; 0x6be <shift_LED+0x8c>

00000824 <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     828:	83 b1       	in	r24, 0x03	; 3
     82a:	80 95       	com	r24
     82c:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	d1 f0       	breq	.+52     	; 0x866 <hall_test+0x42>
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	40 f5       	brcc	.+80     	; 0x886 <hall_test+0x62>
     836:	88 23       	and	r24, r24
     838:	81 f1       	breq	.+96     	; 0x89a <hall_test+0x76>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	61 f1       	breq	.+88     	; 0x896 <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
                transmit1(C1P2,0,0,0,0);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     85c:	83 b1       	in	r24, 0x03	; 3
     85e:	80 95       	com	r24
     860:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	31 f7       	brne	.-52     	; 0x832 <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
     866:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     868:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
                transmit1(0,0,C1P3,C1P2,0);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	51 e0       	ldi	r21, 0x01	; 1
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	32 e0       	ldi	r19, 0x02	; 2
     87c:	00 e0       	ldi	r16, 0x00	; 0
     87e:	10 e0       	ldi	r17, 0x00	; 0
     880:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>
                break;
     884:	d1 cf       	rjmp	.-94     	; 0x828 <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     886:	84 30       	cpi	r24, 0x04	; 4
     888:	21 f0       	breq	.+8      	; 0x892 <hall_test+0x6e>
     88a:	88 30       	cpi	r24, 0x08	; 8
     88c:	c1 f6       	brne	.-80     	; 0x83e <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	eb cf       	rjmp	.-42     	; 0x868 <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	e9 cf       	rjmp	.-46     	; 0x868 <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	e7 cf       	rjmp	.-50     	; 0x868 <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	e5 cf       	rjmp	.-54     	; 0x868 <hall_test+0x44>

0000089e <red>:

}
}

void red(uint8_t position){
    switch(position){
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	89 31       	cpi	r24, 0x19	; 25
     8a4:	91 05       	cpc	r25, r1
     8a6:	a8 f0       	brcs	.+42     	; 0x8d2 <red+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P9;
            break;
        default:
            frame[0][0] = 0x0000;
     8a8:	10 92 29 01 	sts	0x0129, r1
     8ac:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     8b0:	10 92 2b 01 	sts	0x012B, r1
     8b4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     8b8:	10 92 2d 01 	sts	0x012D, r1
     8bc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     8c0:	10 92 2f 01 	sts	0x012F, r1
     8c4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     8c8:	10 92 31 01 	sts	0x0131, r1
     8cc:	10 92 30 01 	sts	0x0130, r1
     8d0:	08 95       	ret

}
}

void red(uint8_t position){
    switch(position){
     8d2:	88 5d       	subi	r24, 0xD8	; 216
     8d4:	9f 4f       	sbci	r25, 0xFF	; 255
     8d6:	fc 01       	movw	r30, r24
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	05 90       	lpm	r0, Z+
     8de:	f4 91       	lpm	r31, Z+
     8e0:	e0 2d       	mov	r30, r0
     8e2:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P3;
            break;
        case 24:
            frame[0][0] = 0x0000;
     8e4:	10 92 29 01 	sts	0x0129, r1
     8e8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     8ec:	10 92 2b 01 	sts	0x012B, r1
     8f0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     8f4:	10 92 2d 01 	sts	0x012D, r1
     8f8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     8fc:	10 92 2f 01 	sts	0x012F, r1
     900:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P4;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e2       	ldi	r25, 0x20	; 32
     908:	90 93 31 01 	sts	0x0131, r25
     90c:	80 93 30 01 	sts	0x0130, r24
            break;
     910:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     912:	10 92 29 01 	sts	0x0129, r1
     916:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     91a:	10 92 2b 01 	sts	0x012B, r1
     91e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     922:	10 92 2d 01 	sts	0x012D, r1
     926:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     92a:	10 92 2f 01 	sts	0x012F, r1
     92e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P3;
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	90 93 31 01 	sts	0x0131, r25
     93a:	80 93 30 01 	sts	0x0130, r24
            break;
     93e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P16;
     940:	80 e2       	ldi	r24, 0x20	; 32
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 29 01 	sts	0x0129, r25
     948:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
     94c:	10 92 2b 01 	sts	0x012B, r1
     950:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     954:	10 92 2d 01 	sts	0x012D, r1
     958:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     95c:	10 92 2f 01 	sts	0x012F, r1
     960:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     964:	10 92 31 01 	sts	0x0131, r1
     968:	10 92 30 01 	sts	0x0130, r1
            break;
     96c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P12;
            break;
        case 21:
            frame[0][0] = C1P10;
     96e:	88 e0       	ldi	r24, 0x08	; 8
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	e8 cf       	rjmp	.-48     	; 0x944 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P13;
            break;
        case 20:
            frame[0][0] = 0x0000;
     974:	10 92 29 01 	sts	0x0129, r1
     978:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     97c:	10 92 2b 01 	sts	0x012B, r1
     980:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     984:	10 92 2d 01 	sts	0x012D, r1
     988:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     98c:	10 92 2f 01 	sts	0x012F, r1
     990:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P12;
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 31 01 	sts	0x0131, r25
     99c:	80 93 30 01 	sts	0x0130, r24
            break;
     9a0:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P14;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     9a2:	10 92 29 01 	sts	0x0129, r1
     9a6:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     9aa:	10 92 2b 01 	sts	0x012B, r1
     9ae:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     9b2:	10 92 2d 01 	sts	0x012D, r1
     9b6:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     9ba:	10 92 2f 01 	sts	0x012F, r1
     9be:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P13;
     9c2:	80 e4       	ldi	r24, 0x40	; 64
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 31 01 	sts	0x0131, r25
     9ca:	80 93 30 01 	sts	0x0130, r24
            break;
     9ce:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     9d0:	10 92 29 01 	sts	0x0129, r1
     9d4:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     9d8:	10 92 2b 01 	sts	0x012B, r1
     9dc:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     9e0:	10 92 2d 01 	sts	0x012D, r1
     9e4:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P14;
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 2f 01 	sts	0x012F, r25
     9f0:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     9f4:	10 92 31 01 	sts	0x0131, r1
     9f8:	10 92 30 01 	sts	0x0130, r1
            break;
     9fc:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P3;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	a0 cf       	rjmp	.-192    	; 0x944 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P3;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P7;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9d cf       	rjmp	.-198    	; 0x944 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P6;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     a0a:	10 92 29 01 	sts	0x0129, r1
     a0e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a12:	10 92 2b 01 	sts	0x012B, r1
     a16:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a1a:	10 92 2d 01 	sts	0x012D, r1
     a1e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P3;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	90 93 2f 01 	sts	0x012F, r25
     a2a:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a2e:	10 92 31 01 	sts	0x0131, r1
     a32:	10 92 30 01 	sts	0x0130, r1
            break;
     a36:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P11;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     a38:	10 92 29 01 	sts	0x0129, r1
     a3c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a40:	10 92 2b 01 	sts	0x012B, r1
     a44:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a48:	10 92 2d 01 	sts	0x012D, r1
     a4c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P6;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	98 e0       	ldi	r25, 0x08	; 8
     a54:	90 93 2f 01 	sts	0x012F, r25
     a58:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a5c:	10 92 31 01 	sts	0x0131, r1
     a60:	10 92 30 01 	sts	0x0130, r1
            break;
     a64:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     a66:	10 92 29 01 	sts	0x0129, r1
     a6a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     a6e:	10 92 2b 01 	sts	0x012B, r1
     a72:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     a76:	10 92 2d 01 	sts	0x012D, r1
     a7a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P11;
     a7e:	80 e1       	ldi	r24, 0x10	; 16
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 2f 01 	sts	0x012F, r25
     a86:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     a8a:	10 92 31 01 	sts	0x0131, r1
     a8e:	10 92 30 01 	sts	0x0130, r1
            break;
     a92:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P6;
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	98 e0       	ldi	r25, 0x08	; 8
     a98:	55 cf       	rjmp	.-342    	; 0x944 <red+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P7;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     a9a:	10 92 29 01 	sts	0x0129, r1
     a9e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P14;
     aa2:	80 e8       	ldi	r24, 0x80	; 128
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 2b 01 	sts	0x012B, r25
     aaa:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     aae:	10 92 2d 01 	sts	0x012D, r1
     ab2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     ab6:	10 92 2f 01 	sts	0x012F, r1
     aba:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     abe:	10 92 31 01 	sts	0x0131, r1
     ac2:	10 92 30 01 	sts	0x0130, r1
            break;
     ac6:	08 95       	ret
            frame[0][2] = C3P8;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     ac8:	10 92 29 01 	sts	0x0129, r1
     acc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     ad0:	10 92 2b 01 	sts	0x012B, r1
     ad4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     ad8:	10 92 2d 01 	sts	0x012D, r1
     adc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P7;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 2f 01 	sts	0x012F, r25
     ae8:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     aec:	10 92 31 01 	sts	0x0131, r1
     af0:	10 92 30 01 	sts	0x0130, r1
            break;
     af4:	08 95       	ret
            frame[0][2] = C3P3;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     af6:	10 92 29 01 	sts	0x0129, r1
     afa:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     afe:	10 92 2b 01 	sts	0x012B, r1
     b02:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P8;
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e2       	ldi	r25, 0x20	; 32
     b0a:	90 93 2d 01 	sts	0x012D, r25
     b0e:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     b12:	10 92 2f 01 	sts	0x012F, r1
     b16:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b1a:	10 92 31 01 	sts	0x0131, r1
     b1e:	10 92 30 01 	sts	0x0130, r1
            break;
     b22:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     b24:	10 92 29 01 	sts	0x0129, r1
     b28:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     b2c:	10 92 2b 01 	sts	0x012B, r1
     b30:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P3;
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e1       	ldi	r25, 0x10	; 16
     b38:	90 93 2d 01 	sts	0x012D, r25
     b3c:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     b40:	10 92 2f 01 	sts	0x012F, r1
     b44:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b48:	10 92 31 01 	sts	0x0131, r1
     b4c:	10 92 30 01 	sts	0x0130, r1
            break;
     b50:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     b52:	10 92 29 01 	sts	0x0129, r1
     b56:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P3;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	90 93 2b 01 	sts	0x012B, r25
     b62:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     b66:	10 92 2d 01 	sts	0x012D, r1
     b6a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     b6e:	10 92 2f 01 	sts	0x012F, r1
     b72:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     b76:	10 92 31 01 	sts	0x0131, r1
     b7a:	10 92 30 01 	sts	0x0130, r1
            break;
     b7e:	08 95       	ret
            frame[0][2] = C3P9;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
     b80:	10 92 29 01 	sts	0x0129, r1
     b84:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P11;
     b88:	80 e1       	ldi	r24, 0x10	; 16
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 2b 01 	sts	0x012B, r25
     b90:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     b94:	10 92 2d 01 	sts	0x012D, r1
     b98:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     b9c:	10 92 2f 01 	sts	0x012F, r1
     ba0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     ba4:	10 92 31 01 	sts	0x0131, r1
     ba8:	10 92 30 01 	sts	0x0130, r1
            break;
     bac:	08 95       	ret
            frame[0][2] = C3P14;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     bae:	10 92 29 01 	sts	0x0129, r1
     bb2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     bb6:	10 92 2b 01 	sts	0x012B, r1
     bba:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P9;
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 2d 01 	sts	0x012D, r25
     bc6:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     bca:	10 92 2f 01 	sts	0x012F, r1
     bce:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     bd2:	10 92 31 01 	sts	0x0131, r1
     bd6:	10 92 30 01 	sts	0x0130, r1
            break;
     bda:	08 95       	ret
            frame[0][2] = C3P15;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
     bdc:	10 92 29 01 	sts	0x0129, r1
     be0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     be4:	10 92 2b 01 	sts	0x012B, r1
     be8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P14;
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	90 93 2d 01 	sts	0x012D, r25
     bf4:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     bf8:	10 92 2f 01 	sts	0x012F, r1
     bfc:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c00:	10 92 31 01 	sts	0x0131, r1
     c04:	10 92 30 01 	sts	0x0130, r1
            break;
     c08:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
     c0a:	10 92 29 01 	sts	0x0129, r1
     c0e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     c12:	10 92 2b 01 	sts	0x012B, r1
     c16:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P15;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	90 93 2d 01 	sts	0x012D, r25
     c22:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     c26:	10 92 2f 01 	sts	0x012F, r1
     c2a:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c2e:	10 92 31 01 	sts	0x0131, r1
     c32:	10 92 30 01 	sts	0x0130, r1
            break;
     c36:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
     c38:	10 92 29 01 	sts	0x0129, r1
     c3c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P7;
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e1       	ldi	r25, 0x10	; 16
     c44:	90 93 2b 01 	sts	0x012B, r25
     c48:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     c4c:	10 92 2d 01 	sts	0x012D, r1
     c50:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     c54:	10 92 2f 01 	sts	0x012F, r1
     c58:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c5c:	10 92 31 01 	sts	0x0131, r1
     c60:	10 92 30 01 	sts	0x0130, r1
            break;
     c64:	08 95       	ret
}

void red(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
     c66:	10 92 29 01 	sts	0x0129, r1
     c6a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P8;
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 2b 01 	sts	0x012B, r25
     c76:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     c7a:	10 92 2d 01 	sts	0x012D, r1
     c7e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     c82:	10 92 2f 01 	sts	0x012F, r1
     c86:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     c8a:	10 92 31 01 	sts	0x0131, r1
     c8e:	10 92 30 01 	sts	0x0130, r1
            break;
     c92:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P4;
            break;
        case 25:
            frame[0][0] = 0x0000;
     c94:	10 92 29 01 	sts	0x0129, r1
     c98:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     c9c:	10 92 2b 01 	sts	0x012B, r1
     ca0:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     ca4:	10 92 2d 01 	sts	0x012D, r1
     ca8:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     cac:	10 92 2f 01 	sts	0x012F, r1
     cb0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P9;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e4       	ldi	r25, 0x40	; 64
     cb8:	90 93 31 01 	sts	0x0131, r25
     cbc:	80 93 30 01 	sts	0x0130, r24
            break;
     cc0:	08 95       	ret

00000cc2 <green>:


}

void green(uint8_t position){
    switch(position){
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	89 31       	cpi	r24, 0x19	; 25
     cc8:	91 05       	cpc	r25, r1
     cca:	a8 f0       	brcs	.+42     	; 0xcf6 <green+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P8;
            break;
        default:
            frame[0][0] = 0x0000;
     ccc:	10 92 29 01 	sts	0x0129, r1
     cd0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     cd4:	10 92 2b 01 	sts	0x012B, r1
     cd8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     cdc:	10 92 2d 01 	sts	0x012D, r1
     ce0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     ce4:	10 92 2f 01 	sts	0x012F, r1
     ce8:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     cec:	10 92 31 01 	sts	0x0131, r1
     cf0:	10 92 30 01 	sts	0x0130, r1
     cf4:	08 95       	ret


}

void green(uint8_t position){
    switch(position){
     cf6:	8f 5b       	subi	r24, 0xBF	; 191
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	fc 01       	movw	r30, r24
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	05 90       	lpm	r0, Z+
     d02:	f4 91       	lpm	r31, Z+
     d04:	e0 2d       	mov	r30, r0
     d06:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P2;
            break;
        case 24:
            frame[0][0] = 0x0000;
     d08:	10 92 29 01 	sts	0x0129, r1
     d0c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     d10:	10 92 2b 01 	sts	0x012B, r1
     d14:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d18:	10 92 2d 01 	sts	0x012D, r1
     d1c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d20:	10 92 2f 01 	sts	0x012F, r1
     d24:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P5;
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e1       	ldi	r25, 0x10	; 16
     d2c:	90 93 31 01 	sts	0x0131, r25
     d30:	80 93 30 01 	sts	0x0130, r24
            break;
     d34:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     d36:	10 92 29 01 	sts	0x0129, r1
     d3a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     d3e:	10 92 2b 01 	sts	0x012B, r1
     d42:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d46:	10 92 2d 01 	sts	0x012D, r1
     d4a:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d4e:	10 92 2f 01 	sts	0x012F, r1
     d52:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P2;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	90 93 31 01 	sts	0x0131, r25
     d5e:	80 93 30 01 	sts	0x0130, r24
            break;
     d62:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P15;
     d64:	80 e4       	ldi	r24, 0x40	; 64
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	90 93 29 01 	sts	0x0129, r25
     d6c:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
     d70:	10 92 2b 01 	sts	0x012B, r1
     d74:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     d78:	10 92 2d 01 	sts	0x012D, r1
     d7c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     d80:	10 92 2f 01 	sts	0x012F, r1
     d84:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     d88:	10 92 31 01 	sts	0x0131, r1
     d8c:	10 92 30 01 	sts	0x0130, r1
            break;
     d90:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P11;
            break;
        case 21:
            frame[0][0] = C1P11;
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	e8 cf       	rjmp	.-48     	; 0xd68 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P14;
            break;
        case 20:
            frame[0][0] = 0x0000;
     d98:	10 92 29 01 	sts	0x0129, r1
     d9c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     da0:	10 92 2b 01 	sts	0x012B, r1
     da4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     da8:	10 92 2d 01 	sts	0x012D, r1
     dac:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     db0:	10 92 2f 01 	sts	0x012F, r1
     db4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P11;
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	90 93 31 01 	sts	0x0131, r25
     dc0:	80 93 30 01 	sts	0x0130, r24
            break;
     dc4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P15;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     dc6:	10 92 29 01 	sts	0x0129, r1
     dca:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     dce:	10 92 2b 01 	sts	0x012B, r1
     dd2:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     dd6:	10 92 2d 01 	sts	0x012D, r1
     dda:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     dde:	10 92 2f 01 	sts	0x012F, r1
     de2:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P14;
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 31 01 	sts	0x0131, r25
     dee:	80 93 30 01 	sts	0x0130, r24
            break;
     df2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     df4:	10 92 29 01 	sts	0x0129, r1
     df8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     dfc:	10 92 2b 01 	sts	0x012B, r1
     e00:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e04:	10 92 2d 01 	sts	0x012D, r1
     e08:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P15;
     e0c:	80 e4       	ldi	r24, 0x40	; 64
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	90 93 2f 01 	sts	0x012F, r25
     e14:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e18:	10 92 31 01 	sts	0x0131, r1
     e1c:	10 92 30 01 	sts	0x0130, r1
            break;
     e20:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P2;
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	a0 cf       	rjmp	.-192    	; 0xd68 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P2;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P8;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e8       	ldi	r25, 0x80	; 128
     e2c:	9d cf       	rjmp	.-198    	; 0xd68 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P5;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     e2e:	10 92 29 01 	sts	0x0129, r1
     e32:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e36:	10 92 2b 01 	sts	0x012B, r1
     e3a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e3e:	10 92 2d 01 	sts	0x012D, r1
     e42:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P2;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	90 93 2f 01 	sts	0x012F, r25
     e4e:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e52:	10 92 31 01 	sts	0x0131, r1
     e56:	10 92 30 01 	sts	0x0130, r1
            break;
     e5a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P12;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     e5c:	10 92 29 01 	sts	0x0129, r1
     e60:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e64:	10 92 2b 01 	sts	0x012B, r1
     e68:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e6c:	10 92 2d 01 	sts	0x012D, r1
     e70:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P5;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e1       	ldi	r25, 0x10	; 16
     e78:	90 93 2f 01 	sts	0x012F, r25
     e7c:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     e80:	10 92 31 01 	sts	0x0131, r1
     e84:	10 92 30 01 	sts	0x0130, r1
            break;
     e88:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     e8a:	10 92 29 01 	sts	0x0129, r1
     e8e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     e92:	10 92 2b 01 	sts	0x012B, r1
     e96:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     e9a:	10 92 2d 01 	sts	0x012D, r1
     e9e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P12;
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 2f 01 	sts	0x012F, r25
     eaa:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     eae:	10 92 31 01 	sts	0x0131, r1
     eb2:	10 92 30 01 	sts	0x0130, r1
            break;
     eb6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P5;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e1       	ldi	r25, 0x10	; 16
     ebc:	55 cf       	rjmp	.-342    	; 0xd68 <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P8;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     ebe:	10 92 29 01 	sts	0x0129, r1
     ec2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P15;
     ec6:	80 e4       	ldi	r24, 0x40	; 64
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 2b 01 	sts	0x012B, r25
     ece:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     ed2:	10 92 2d 01 	sts	0x012D, r1
     ed6:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     eda:	10 92 2f 01 	sts	0x012F, r1
     ede:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     ee2:	10 92 31 01 	sts	0x0131, r1
     ee6:	10 92 30 01 	sts	0x0130, r1
            break;
     eea:	08 95       	ret
            frame[0][2] = C3P7;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     eec:	10 92 29 01 	sts	0x0129, r1
     ef0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     ef4:	10 92 2b 01 	sts	0x012B, r1
     ef8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
     efc:	10 92 2d 01 	sts	0x012D, r1
     f00:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P8;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e8       	ldi	r25, 0x80	; 128
     f08:	90 93 2f 01 	sts	0x012F, r25
     f0c:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
     f10:	10 92 31 01 	sts	0x0131, r1
     f14:	10 92 30 01 	sts	0x0130, r1
            break;
     f18:	08 95       	ret
            frame[0][2] = C3P4;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     f1a:	10 92 29 01 	sts	0x0129, r1
     f1e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     f22:	10 92 2b 01 	sts	0x012B, r1
     f26:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P7;
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e4       	ldi	r25, 0x40	; 64
     f2e:	90 93 2d 01 	sts	0x012D, r25
     f32:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     f36:	10 92 2f 01 	sts	0x012F, r1
     f3a:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     f3e:	10 92 31 01 	sts	0x0131, r1
     f42:	10 92 30 01 	sts	0x0130, r1
            break;
     f46:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     f48:	10 92 29 01 	sts	0x0129, r1
     f4c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     f50:	10 92 2b 01 	sts	0x012B, r1
     f54:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P4;
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	98 e0       	ldi	r25, 0x08	; 8
     f5c:	90 93 2d 01 	sts	0x012D, r25
     f60:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     f64:	10 92 2f 01 	sts	0x012F, r1
     f68:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     f6c:	10 92 31 01 	sts	0x0131, r1
     f70:	10 92 30 01 	sts	0x0130, r1
            break;
     f74:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     f76:	10 92 29 01 	sts	0x0129, r1
     f7a:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P2;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	90 93 2b 01 	sts	0x012B, r25
     f86:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     f8a:	10 92 2d 01 	sts	0x012D, r1
     f8e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     f92:	10 92 2f 01 	sts	0x012F, r1
     f96:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     f9a:	10 92 31 01 	sts	0x0131, r1
     f9e:	10 92 30 01 	sts	0x0130, r1
            break;
     fa2:	08 95       	ret
            frame[0][2] = C3P10;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
     fa4:	10 92 29 01 	sts	0x0129, r1
     fa8:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P12;
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 2b 01 	sts	0x012B, r25
     fb4:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
     fb8:	10 92 2d 01 	sts	0x012D, r1
     fbc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
     fc0:	10 92 2f 01 	sts	0x012F, r1
     fc4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     fc8:	10 92 31 01 	sts	0x0131, r1
     fcc:	10 92 30 01 	sts	0x0130, r1
            break;
     fd0:	08 95       	ret
            frame[0][2] = C3P13;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     fd2:	10 92 29 01 	sts	0x0129, r1
     fd6:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
     fda:	10 92 2b 01 	sts	0x012B, r1
     fde:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P10;
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 2d 01 	sts	0x012D, r25
     fea:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
     fee:	10 92 2f 01 	sts	0x012F, r1
     ff2:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
     ff6:	10 92 31 01 	sts	0x0131, r1
     ffa:	10 92 30 01 	sts	0x0130, r1
            break;
     ffe:	08 95       	ret
            frame[0][2] = C3P16;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
    1000:	10 92 29 01 	sts	0x0129, r1
    1004:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1008:	10 92 2b 01 	sts	0x012B, r1
    100c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P13;
    1010:	80 e1       	ldi	r24, 0x10	; 16
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 2d 01 	sts	0x012D, r25
    1018:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    101c:	10 92 2f 01 	sts	0x012F, r1
    1020:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1024:	10 92 31 01 	sts	0x0131, r1
    1028:	10 92 30 01 	sts	0x0130, r1
            break;
    102c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
    102e:	10 92 29 01 	sts	0x0129, r1
    1032:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1036:	10 92 2b 01 	sts	0x012B, r1
    103a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P16;
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 2d 01 	sts	0x012D, r25
    1046:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    104a:	10 92 2f 01 	sts	0x012F, r1
    104e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1052:	10 92 31 01 	sts	0x0131, r1
    1056:	10 92 30 01 	sts	0x0130, r1
            break;
    105a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
    105c:	10 92 29 01 	sts	0x0129, r1
    1060:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P6;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e2       	ldi	r25, 0x20	; 32
    1068:	90 93 2b 01 	sts	0x012B, r25
    106c:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    1070:	10 92 2d 01 	sts	0x012D, r1
    1074:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1078:	10 92 2f 01 	sts	0x012F, r1
    107c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1080:	10 92 31 01 	sts	0x0131, r1
    1084:	10 92 30 01 	sts	0x0130, r1
            break;
    1088:	08 95       	ret
}

void green(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    108a:	10 92 29 01 	sts	0x0129, r1
    108e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P9;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	90 93 2b 01 	sts	0x012B, r25
    109a:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    109e:	10 92 2d 01 	sts	0x012D, r1
    10a2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    10a6:	10 92 2f 01 	sts	0x012F, r1
    10aa:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    10ae:	10 92 31 01 	sts	0x0131, r1
    10b2:	10 92 30 01 	sts	0x0130, r1
            break;
    10b6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P5;
            break;
        case 25:
            frame[0][0] = 0x0000;
    10b8:	10 92 29 01 	sts	0x0129, r1
    10bc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    10c0:	10 92 2b 01 	sts	0x012B, r1
    10c4:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    10c8:	10 92 2d 01 	sts	0x012D, r1
    10cc:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    10d0:	10 92 2f 01 	sts	0x012F, r1
    10d4:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P8;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	90 93 31 01 	sts	0x0131, r25
    10e0:	80 93 30 01 	sts	0x0130, r24
            break;
    10e4:	08 95       	ret

000010e6 <blue>:
    }

}

void blue(uint8_t position){
    switch(position){
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	89 31       	cpi	r24, 0x19	; 25
    10ec:	91 05       	cpc	r25, r1
    10ee:	a8 f0       	brcs	.+42     	; 0x111a <blue+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P7;
            break;
        default:
            frame[0][0] = 0x0000;
    10f0:	10 92 29 01 	sts	0x0129, r1
    10f4:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    10f8:	10 92 2b 01 	sts	0x012B, r1
    10fc:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1100:	10 92 2d 01 	sts	0x012D, r1
    1104:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1108:	10 92 2f 01 	sts	0x012F, r1
    110c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1110:	10 92 31 01 	sts	0x0131, r1
    1114:	10 92 30 01 	sts	0x0130, r1
    1118:	08 95       	ret
    }

}

void blue(uint8_t position){
    switch(position){
    111a:	86 5a       	subi	r24, 0xA6	; 166
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	fc 01       	movw	r30, r24
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	05 90       	lpm	r0, Z+
    1126:	f4 91       	lpm	r31, Z+
    1128:	e0 2d       	mov	r30, r0
    112a:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P1;
            break;
        case 24:
            frame[0][0] = 0x0000;
    112c:	10 92 29 01 	sts	0x0129, r1
    1130:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1134:	10 92 2b 01 	sts	0x012B, r1
    1138:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    113c:	10 92 2d 01 	sts	0x012D, r1
    1140:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1144:	10 92 2f 01 	sts	0x012F, r1
    1148:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P6;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	98 e0       	ldi	r25, 0x08	; 8
    1150:	90 93 31 01 	sts	0x0131, r25
    1154:	80 93 30 01 	sts	0x0130, r24
            break;
    1158:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
    115a:	10 92 29 01 	sts	0x0129, r1
    115e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1162:	10 92 2b 01 	sts	0x012B, r1
    1166:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    116a:	10 92 2d 01 	sts	0x012D, r1
    116e:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1172:	10 92 2f 01 	sts	0x012F, r1
    1176:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P1;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	94 e0       	ldi	r25, 0x04	; 4
    117e:	90 93 31 01 	sts	0x0131, r25
    1182:	80 93 30 01 	sts	0x0130, r24
            break;
    1186:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P14;
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	90 93 29 01 	sts	0x0129, r25
    1190:	80 93 28 01 	sts	0x0128, r24
            frame[0][1] = 0x0000;
    1194:	10 92 2b 01 	sts	0x012B, r1
    1198:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    119c:	10 92 2d 01 	sts	0x012D, r1
    11a0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    11a4:	10 92 2f 01 	sts	0x012F, r1
    11a8:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    11ac:	10 92 31 01 	sts	0x0131, r1
    11b0:	10 92 30 01 	sts	0x0130, r1
            break;
    11b4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P10;
            break;
        case 21:
            frame[0][0] = C1P12;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	e8 cf       	rjmp	.-48     	; 0x118c <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P15;
            break;
        case 20:
            frame[0][0] = 0x0000;
    11bc:	10 92 29 01 	sts	0x0129, r1
    11c0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    11c4:	10 92 2b 01 	sts	0x012B, r1
    11c8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    11cc:	10 92 2d 01 	sts	0x012D, r1
    11d0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    11d4:	10 92 2f 01 	sts	0x012F, r1
    11d8:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P10;
    11dc:	88 e0       	ldi	r24, 0x08	; 8
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 31 01 	sts	0x0131, r25
    11e4:	80 93 30 01 	sts	0x0130, r24
            break;
    11e8:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P16;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
    11ea:	10 92 29 01 	sts	0x0129, r1
    11ee:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    11f2:	10 92 2b 01 	sts	0x012B, r1
    11f6:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    11fa:	10 92 2d 01 	sts	0x012D, r1
    11fe:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    1202:	10 92 2f 01 	sts	0x012F, r1
    1206:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P15;
    120a:	80 e1       	ldi	r24, 0x10	; 16
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 31 01 	sts	0x0131, r25
    1212:	80 93 30 01 	sts	0x0130, r24
            break;
    1216:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
    1218:	10 92 29 01 	sts	0x0129, r1
    121c:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1220:	10 92 2b 01 	sts	0x012B, r1
    1224:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1228:	10 92 2d 01 	sts	0x012D, r1
    122c:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P16;
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	90 93 2f 01 	sts	0x012F, r25
    1238:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    123c:	10 92 31 01 	sts	0x0131, r1
    1240:	10 92 30 01 	sts	0x0130, r1
            break;
    1244:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P1;
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	a0 cf       	rjmp	.-192    	; 0x118c <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P1;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P9;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e4       	ldi	r25, 0x40	; 64
    1250:	9d cf       	rjmp	.-198    	; 0x118c <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P4;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
    1252:	10 92 29 01 	sts	0x0129, r1
    1256:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    125a:	10 92 2b 01 	sts	0x012B, r1
    125e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1262:	10 92 2d 01 	sts	0x012D, r1
    1266:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P1;
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	90 93 2f 01 	sts	0x012F, r25
    1272:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    1276:	10 92 31 01 	sts	0x0131, r1
    127a:	10 92 30 01 	sts	0x0130, r1
            break;
    127e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P13;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
    1280:	10 92 29 01 	sts	0x0129, r1
    1284:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1288:	10 92 2b 01 	sts	0x012B, r1
    128c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1290:	10 92 2d 01 	sts	0x012D, r1
    1294:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P4;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e2       	ldi	r25, 0x20	; 32
    129c:	90 93 2f 01 	sts	0x012F, r25
    12a0:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    12a4:	10 92 31 01 	sts	0x0131, r1
    12a8:	10 92 30 01 	sts	0x0130, r1
            break;
    12ac:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
    12ae:	10 92 29 01 	sts	0x0129, r1
    12b2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    12b6:	10 92 2b 01 	sts	0x012B, r1
    12ba:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    12be:	10 92 2d 01 	sts	0x012D, r1
    12c2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P13;
    12c6:	84 e0       	ldi	r24, 0x04	; 4
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	90 93 2f 01 	sts	0x012F, r25
    12ce:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    12d2:	10 92 31 01 	sts	0x0131, r1
    12d6:	10 92 30 01 	sts	0x0130, r1
            break;
    12da:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P4;
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e2       	ldi	r25, 0x20	; 32
    12e0:	55 cf       	rjmp	.-342    	; 0x118c <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P9;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
    12e2:	10 92 29 01 	sts	0x0129, r1
    12e6:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P16;
    12ea:	80 e2       	ldi	r24, 0x20	; 32
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 2b 01 	sts	0x012B, r25
    12f2:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    12f6:	10 92 2d 01 	sts	0x012D, r1
    12fa:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    12fe:	10 92 2f 01 	sts	0x012F, r1
    1302:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1306:	10 92 31 01 	sts	0x0131, r1
    130a:	10 92 30 01 	sts	0x0130, r1
            break;
    130e:	08 95       	ret
            frame[0][2] = C3P6;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
    1310:	10 92 29 01 	sts	0x0129, r1
    1314:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1318:	10 92 2b 01 	sts	0x012B, r1
    131c:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    1320:	10 92 2d 01 	sts	0x012D, r1
    1324:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = C4P9;
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e4       	ldi	r25, 0x40	; 64
    132c:	90 93 2f 01 	sts	0x012F, r25
    1330:	80 93 2e 01 	sts	0x012E, r24
            frame[0][4] = 0x0000;
    1334:	10 92 31 01 	sts	0x0131, r1
    1338:	10 92 30 01 	sts	0x0130, r1
            break;
    133c:	08 95       	ret
            frame[0][2] = C3P5;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
    133e:	10 92 29 01 	sts	0x0129, r1
    1342:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1346:	10 92 2b 01 	sts	0x012B, r1
    134a:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P6;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e8       	ldi	r25, 0x80	; 128
    1352:	90 93 2d 01 	sts	0x012D, r25
    1356:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    135a:	10 92 2f 01 	sts	0x012F, r1
    135e:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1362:	10 92 31 01 	sts	0x0131, r1
    1366:	10 92 30 01 	sts	0x0130, r1
            break;
    136a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
    136c:	10 92 29 01 	sts	0x0129, r1
    1370:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    1374:	10 92 2b 01 	sts	0x012B, r1
    1378:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P5;
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	94 e0       	ldi	r25, 0x04	; 4
    1380:	90 93 2d 01 	sts	0x012D, r25
    1384:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1388:	10 92 2f 01 	sts	0x012F, r1
    138c:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1390:	10 92 31 01 	sts	0x0131, r1
    1394:	10 92 30 01 	sts	0x0130, r1
            break;
    1398:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
    139a:	10 92 29 01 	sts	0x0129, r1
    139e:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P1;
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	90 93 2b 01 	sts	0x012B, r25
    13aa:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    13ae:	10 92 2d 01 	sts	0x012D, r1
    13b2:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    13b6:	10 92 2f 01 	sts	0x012F, r1
    13ba:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    13be:	10 92 31 01 	sts	0x0131, r1
    13c2:	10 92 30 01 	sts	0x0130, r1
            break;
    13c6:	08 95       	ret
            frame[0][2] = C3P11;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
    13c8:	10 92 29 01 	sts	0x0129, r1
    13cc:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P13;
    13d0:	84 e0       	ldi	r24, 0x04	; 4
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	90 93 2b 01 	sts	0x012B, r25
    13d8:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    13dc:	10 92 2d 01 	sts	0x012D, r1
    13e0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    13e4:	10 92 2f 01 	sts	0x012F, r1
    13e8:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    13ec:	10 92 31 01 	sts	0x0131, r1
    13f0:	10 92 30 01 	sts	0x0130, r1
            break;
    13f4:	08 95       	ret
            frame[0][2] = C3P12;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
    13f6:	10 92 29 01 	sts	0x0129, r1
    13fa:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    13fe:	10 92 2b 01 	sts	0x012B, r1
    1402:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P11;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	90 93 2d 01 	sts	0x012D, r25
    140e:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1412:	10 92 2f 01 	sts	0x012F, r1
    1416:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    141a:	10 92 31 01 	sts	0x0131, r1
    141e:	10 92 30 01 	sts	0x0130, r1
            break;
    1422:	08 95       	ret
            frame[0][2] = C3P1;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
    1424:	10 92 29 01 	sts	0x0129, r1
    1428:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    142c:	10 92 2b 01 	sts	0x012B, r1
    1430:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P12;
    1434:	80 e2       	ldi	r24, 0x20	; 32
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 2d 01 	sts	0x012D, r25
    143c:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    1440:	10 92 2f 01 	sts	0x012F, r1
    1444:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1448:	10 92 31 01 	sts	0x0131, r1
    144c:	10 92 30 01 	sts	0x0130, r1
            break;
    1450:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
    1452:	10 92 29 01 	sts	0x0129, r1
    1456:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    145a:	10 92 2b 01 	sts	0x012B, r1
    145e:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = C3P1;
    1462:	80 e4       	ldi	r24, 0x40	; 64
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	90 93 2d 01 	sts	0x012D, r25
    146a:	80 93 2c 01 	sts	0x012C, r24
            frame[0][3] = 0x0000;
    146e:	10 92 2f 01 	sts	0x012F, r1
    1472:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    1476:	10 92 31 01 	sts	0x0131, r1
    147a:	10 92 30 01 	sts	0x0130, r1
            break;
    147e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
    1480:	10 92 29 01 	sts	0x0129, r1
    1484:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P5;
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e4       	ldi	r25, 0x40	; 64
    148c:	90 93 2b 01 	sts	0x012B, r25
    1490:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    1494:	10 92 2d 01 	sts	0x012D, r1
    1498:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    149c:	10 92 2f 01 	sts	0x012F, r1
    14a0:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    14a4:	10 92 31 01 	sts	0x0131, r1
    14a8:	10 92 30 01 	sts	0x0130, r1
            break;
    14ac:	08 95       	ret
}

void blue(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    14ae:	10 92 29 01 	sts	0x0129, r1
    14b2:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = C2P10;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e8       	ldi	r25, 0x80	; 128
    14ba:	90 93 2b 01 	sts	0x012B, r25
    14be:	80 93 2a 01 	sts	0x012A, r24
            frame[0][2] = 0x0000;
    14c2:	10 92 2d 01 	sts	0x012D, r1
    14c6:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    14ca:	10 92 2f 01 	sts	0x012F, r1
    14ce:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = 0x0000;
    14d2:	10 92 31 01 	sts	0x0131, r1
    14d6:	10 92 30 01 	sts	0x0130, r1
            break;
    14da:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P6;
            break;
        case 25:
            frame[0][0] = 0x0000;
    14dc:	10 92 29 01 	sts	0x0129, r1
    14e0:	10 92 28 01 	sts	0x0128, r1
            frame[0][1] = 0x0000;
    14e4:	10 92 2b 01 	sts	0x012B, r1
    14e8:	10 92 2a 01 	sts	0x012A, r1
            frame[0][2] = 0x0000;
    14ec:	10 92 2d 01 	sts	0x012D, r1
    14f0:	10 92 2c 01 	sts	0x012C, r1
            frame[0][3] = 0x0000;
    14f4:	10 92 2f 01 	sts	0x012F, r1
    14f8:	10 92 2e 01 	sts	0x012E, r1
            frame[0][4] = C5P7;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 31 01 	sts	0x0131, r25
    1504:	80 93 30 01 	sts	0x0130, r24
            break;
    1508:	08 95       	ret

0000150a <LED_test>:
//      0  Red
//      1  Green
//      2  Blue
// Layers can be 0 - 4
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	08 2f       	mov	r16, r24
    151a:	84 2f       	mov	r24, r20
        level(layer);
    151c:	69 83       	std	Y+1, r22	; 0x01
    151e:	0e 94 2d 02 	call	0x45a	; 0x45a <level>
        switch(color){
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	01 30       	cpi	r16, 0x01	; 1
    1526:	39 f1       	breq	.+78     	; 0x1576 <LED_test+0x6c>
    1528:	01 30       	cpi	r16, 0x01	; 1
    152a:	08 f1       	brcs	.+66     	; 0x156e <LED_test+0x64>
    152c:	02 30       	cpi	r16, 0x02	; 2
    152e:	19 f4       	brne	.+6      	; 0x1536 <LED_test+0x2c>
                break;
            case 1:
                green(position);
                break;
            case 2:
                blue(position);
    1530:	86 2f       	mov	r24, r22
    1532:	0e 94 73 08 	call	0x10e6	; 0x10e6 <blue>
                break;
            default:
                break;
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);
    1536:	60 91 2e 01 	lds	r22, 0x012E
    153a:	70 91 2f 01 	lds	r23, 0x012F
    153e:	40 91 2c 01 	lds	r20, 0x012C
    1542:	50 91 2d 01 	lds	r21, 0x012D
    1546:	20 91 2a 01 	lds	r18, 0x012A
    154a:	30 91 2b 01 	lds	r19, 0x012B
    154e:	00 91 28 01 	lds	r16, 0x0128
    1552:	10 91 29 01 	lds	r17, 0x0129
    1556:	80 91 30 01 	lds	r24, 0x0130
    155a:	90 91 31 01 	lds	r25, 0x0131
    155e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <transmit1>

}
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
        level(layer);
        switch(color){
            case 0:
                red(position);
    156e:	86 2f       	mov	r24, r22
    1570:	0e 94 4f 04 	call	0x89e	; 0x89e <red>
                break;
    1574:	e0 cf       	rjmp	.-64     	; 0x1536 <LED_test+0x2c>
            case 1:
                green(position);
    1576:	86 2f       	mov	r24, r22
    1578:	0e 94 61 06 	call	0xcc2	; 0xcc2 <green>
                break;
    157c:	dc cf       	rjmp	.-72     	; 0x1536 <LED_test+0x2c>

0000157e <test_led>:
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);

}

void test_led(){
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    1590:	10 92 5f 01 	sts	0x015F, r1
        LED_test(i,j,layer);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	60 91 5e 01 	lds	r22, 0x015E
    159a:	40 91 5d 01 	lds	r20, 0x015D
    159e:	0e 94 85 0a 	call	0x150a	; 0x150a <LED_test>
        if(i == 2){
            j++;
            if(j == 26){
                j = 1;
    15a2:	01 e0       	ldi	r16, 0x01	; 1
                layer++;
                layer = layer % 5;
    15a4:	15 e0       	ldi	r17, 0x05	; 5
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	94 e3       	ldi	r25, 0x34	; 52
    15aa:	ac e0       	ldi	r26, 0x0C	; 12
    15ac:	81 50       	subi	r24, 0x01	; 1
    15ae:	90 40       	sbci	r25, 0x00	; 0
    15b0:	a0 40       	sbci	r26, 0x00	; 0
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <test_led+0x2e>
    15b4:	00 c0       	rjmp	.+0      	; 0x15b6 <test_led+0x38>
    15b6:	00 00       	nop

void test_led(){
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    15b8:	90 91 5f 01 	lds	r25, 0x015F
    15bc:	9f 5f       	subi	r25, 0xFF	; 255
    15be:	90 93 5f 01 	sts	0x015F, r25
    15c2:	93 30       	cpi	r25, 0x03	; 3
    15c4:	e8 f4       	brcc	.+58     	; 0x1600 <test_led+0x82>
        LED_test(i,j,layer);
    15c6:	f0 90 5e 01 	lds	r15, 0x015E
    15ca:	e0 90 5d 01 	lds	r14, 0x015D
    15ce:	89 2f       	mov	r24, r25
    15d0:	6f 2d       	mov	r22, r15
    15d2:	4e 2d       	mov	r20, r14
    15d4:	99 83       	std	Y+1, r25	; 0x01
    15d6:	0e 94 85 0a 	call	0x150a	; 0x150a <LED_test>
        if(i == 2){
    15da:	99 81       	ldd	r25, Y+1	; 0x01
    15dc:	92 30       	cpi	r25, 0x02	; 2
    15de:	19 f7       	brne	.-58     	; 0x15a6 <test_led+0x28>
            j++;
    15e0:	8f 2d       	mov	r24, r15
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 5e 01 	sts	0x015E, r24
            if(j == 26){
    15e8:	8a 31       	cpi	r24, 0x1A	; 26
    15ea:	e9 f6       	brne	.-70     	; 0x15a6 <test_led+0x28>
                j = 1;
    15ec:	00 93 5e 01 	sts	0x015E, r16
                layer++;
    15f0:	8e 2d       	mov	r24, r14
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
                layer = layer % 5;
    15f4:	61 2f       	mov	r22, r17
    15f6:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodqi4>
    15fa:	90 93 5d 01 	sts	0x015D, r25
    15fe:	d3 cf       	rjmp	.-90     	; 0x15a6 <test_led+0x28>
            }
        }
        _delay_ms(500);
    }
}
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	08 95       	ret

00001610 <red_led>:

void red_led(uint8_t layer,uint32_t red){
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	7a 01       	movw	r14, r20
    1620:	8b 01       	movw	r16, r22
    1622:	46 ee       	ldi	r20, 0xE6	; 230
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	ec 01       	movw	r28, r24
    162e:	cc 0f       	add	r28, r28
    1630:	dd 1f       	adc	r29, r29
    1632:	cc 0f       	add	r28, r28
    1634:	dd 1f       	adc	r29, r29
    1636:	c8 0f       	add	r28, r24
    1638:	d9 1f       	adc	r29, r25
    163a:	cc 0f       	add	r28, r28
    163c:	dd 1f       	adc	r29, r29
    163e:	c8 5d       	subi	r28, 0xD8	; 216
    1640:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
    1642:	d8 01       	movw	r26, r16
    1644:	c7 01       	movw	r24, r14
    1646:	02 2e       	mov	r0, r18
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <red_led+0x42>
    164a:	b6 95       	lsr	r27
    164c:	a7 95       	ror	r26
    164e:	97 95       	ror	r25
    1650:	87 95       	ror	r24
    1652:	0a 94       	dec	r0
    1654:	d2 f7       	brpl	.-12     	; 0x164a <red_led+0x3a>
        if(state){
    1656:	80 ff       	sbrs	r24, 0
    1658:	12 c0       	rjmp	.+36     	; 0x167e <red_led+0x6e>
        }
        _delay_ms(500);
    }
}

void red_led(uint8_t layer,uint32_t red){
    165a:	de 01       	movw	r26, r28
    165c:	ca 01       	movw	r24, r20
    165e:	65 e0       	ldi	r22, 0x05	; 5
    1660:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
    1662:	fc 01       	movw	r30, r24
    1664:	65 91       	lpm	r22, Z+
    1666:	74 91       	lpm	r23, Z+
    1668:	ed 91       	ld	r30, X+
    166a:	fc 91       	ld	r31, X
    166c:	11 97       	sbiw	r26, 0x01	; 1
    166e:	e6 2b       	or	r30, r22
    1670:	f7 2b       	or	r31, r23
    1672:	ed 93       	st	X+, r30
    1674:	fd 93       	st	X+, r31
    1676:	da 94       	dec	r13
    1678:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
    167a:	dd 20       	and	r13, r13
    167c:	91 f7       	brne	.-28     	; 0x1662 <red_led+0x52>
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	46 5f       	subi	r20, 0xF6	; 246
    1684:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    1686:	29 31       	cpi	r18, 0x19	; 25
    1688:	31 05       	cpc	r19, r1
    168a:	d9 f6       	brne	.-74     	; 0x1642 <red_led+0x32>
            }
        }
    }
    
//
}
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	08 95       	ret

0000169c <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	7a 01       	movw	r14, r20
    16ac:	8b 01       	movw	r16, r22
    16ae:	4a ed       	ldi	r20, 0xDA	; 218
    16b0:	52 e0       	ldi	r21, 0x02	; 2
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	ec 01       	movw	r28, r24
    16ba:	cc 0f       	add	r28, r28
    16bc:	dd 1f       	adc	r29, r29
    16be:	cc 0f       	add	r28, r28
    16c0:	dd 1f       	adc	r29, r29
    16c2:	c8 0f       	add	r28, r24
    16c4:	d9 1f       	adc	r29, r25
    16c6:	cc 0f       	add	r28, r28
    16c8:	dd 1f       	adc	r29, r29
    16ca:	c8 5d       	subi	r28, 0xD8	; 216
    16cc:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
    16ce:	d8 01       	movw	r26, r16
    16d0:	c7 01       	movw	r24, r14
    16d2:	02 2e       	mov	r0, r18
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <blue_led+0x42>
    16d6:	b6 95       	lsr	r27
    16d8:	a7 95       	ror	r26
    16da:	97 95       	ror	r25
    16dc:	87 95       	ror	r24
    16de:	0a 94       	dec	r0
    16e0:	d2 f7       	brpl	.-12     	; 0x16d6 <blue_led+0x3a>
        if(state){
    16e2:	80 ff       	sbrs	r24, 0
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
    16e6:	de 01       	movw	r26, r28
    16e8:	ca 01       	movw	r24, r20
    16ea:	f5 e0       	ldi	r31, 0x05	; 5
    16ec:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
    16ee:	fc 01       	movw	r30, r24
    16f0:	65 91       	lpm	r22, Z+
    16f2:	74 91       	lpm	r23, Z+
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	11 97       	sbiw	r26, 0x01	; 1
    16fa:	e6 2b       	or	r30, r22
    16fc:	f7 2b       	or	r31, r23
    16fe:	ed 93       	st	X+, r30
    1700:	fd 93       	st	X+, r31
    1702:	da 94       	dec	r13
    1704:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    1706:	dd 20       	and	r13, r13
    1708:	91 f7       	brne	.-28     	; 0x16ee <blue_led+0x52>
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	46 5f       	subi	r20, 0xF6	; 246
    1710:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    1712:	29 31       	cpi	r18, 0x19	; 25
    1714:	31 05       	cpc	r19, r1
    1716:	d9 f6       	brne	.-74     	; 0x16ce <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	08 95       	ret

00001728 <green_led>:

void green_led(uint8_t layer,uint32_t green){
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	7a 01       	movw	r14, r20
    1738:	8b 01       	movw	r16, r22
    173a:	40 ee       	ldi	r20, 0xE0	; 224
    173c:	51 e0       	ldi	r21, 0x01	; 1
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	ec 01       	movw	r28, r24
    1746:	cc 0f       	add	r28, r28
    1748:	dd 1f       	adc	r29, r29
    174a:	cc 0f       	add	r28, r28
    174c:	dd 1f       	adc	r29, r29
    174e:	c8 0f       	add	r28, r24
    1750:	d9 1f       	adc	r29, r25
    1752:	cc 0f       	add	r28, r28
    1754:	dd 1f       	adc	r29, r29
    1756:	c8 5d       	subi	r28, 0xD8	; 216
    1758:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
    175a:	d8 01       	movw	r26, r16
    175c:	c7 01       	movw	r24, r14
    175e:	02 2e       	mov	r0, r18
    1760:	04 c0       	rjmp	.+8      	; 0x176a <green_led+0x42>
    1762:	b6 95       	lsr	r27
    1764:	a7 95       	ror	r26
    1766:	97 95       	ror	r25
    1768:	87 95       	ror	r24
    176a:	0a 94       	dec	r0
    176c:	d2 f7       	brpl	.-12     	; 0x1762 <green_led+0x3a>
        if(state){
    176e:	80 ff       	sbrs	r24, 0
    1770:	12 c0       	rjmp	.+36     	; 0x1796 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
    1772:	de 01       	movw	r26, r28
    1774:	ca 01       	movw	r24, r20
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
    177a:	fc 01       	movw	r30, r24
    177c:	65 91       	lpm	r22, Z+
    177e:	74 91       	lpm	r23, Z+
    1780:	ed 91       	ld	r30, X+
    1782:	fc 91       	ld	r31, X
    1784:	11 97       	sbiw	r26, 0x01	; 1
    1786:	e6 2b       	or	r30, r22
    1788:	f7 2b       	or	r31, r23
    178a:	ed 93       	st	X+, r30
    178c:	fd 93       	st	X+, r31
    178e:	da 94       	dec	r13
    1790:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    1792:	dd 20       	and	r13, r13
    1794:	91 f7       	brne	.-28     	; 0x177a <green_led+0x52>
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	46 5f       	subi	r20, 0xF6	; 246
    179c:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    179e:	29 31       	cpi	r18, 0x19	; 25
    17a0:	31 05       	cpc	r19, r1
    17a2:	d9 f6       	brne	.-74     	; 0x175a <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	08 95       	ret

000017b4 <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
    17b4:	6f 92       	push	r6
    17b6:	7f 92       	push	r7
    17b8:	8f 92       	push	r8
    17ba:	9f 92       	push	r9
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	b8 2e       	mov	r11, r24
    17cc:	38 01       	movw	r6, r16
    17ce:	49 01       	movw	r8, r18
    red_led(layer,red);
    17d0:	0e 94 08 0b 	call	0x1610	; 0x1610 <red_led>
    blue_led(layer,blue);
    17d4:	8b 2d       	mov	r24, r11
    17d6:	b4 01       	movw	r22, r8
    17d8:	a3 01       	movw	r20, r6
    17da:	0e 94 4e 0b 	call	0x169c	; 0x169c <blue_led>
    green_led(layer,green);
    17de:	8b 2d       	mov	r24, r11
    17e0:	b7 01       	movw	r22, r14
    17e2:	a6 01       	movw	r20, r12
    17e4:	0e 94 94 0b 	call	0x1728	; 0x1728 <green_led>
}
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	9f 90       	pop	r9
    17f8:	8f 90       	pop	r8
    17fa:	7f 90       	pop	r7
    17fc:	6f 90       	pop	r6
    17fe:	08 95       	ret

00001800 <test_frame>:
void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        //level(i);
        transmit2(i);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 88 02 	call	0x510	; 0x510 <transmit2>
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	0e 94 88 02 	call	0x510	; 0x510 <transmit2>
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 88 02 	call	0x510	; 0x510 <transmit2>
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	0e 94 88 02 	call	0x510	; 0x510 <transmit2>
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	0e 94 88 02 	call	0x510	; 0x510 <transmit2>
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
    }
}
    181e:	08 95       	ret

00001820 <clear_frame>:

void clear_frame(){
    1820:	e8 e2       	ldi	r30, 0x28	; 40
    1822:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            frame[i][j] = 0;
    1824:	11 82       	std	Z+1, r1	; 0x01
    1826:	10 82       	st	Z, r1
    1828:	13 82       	std	Z+3, r1	; 0x03
    182a:	12 82       	std	Z+2, r1	; 0x02
    182c:	15 82       	std	Z+5, r1	; 0x05
    182e:	14 82       	std	Z+4, r1	; 0x04
    1830:	17 82       	std	Z+7, r1	; 0x07
    1832:	16 82       	std	Z+6, r1	; 0x06
    1834:	11 86       	std	Z+9, r1	; 0x09
    1836:	10 86       	std	Z+8, r1	; 0x08
    1838:	3a 96       	adiw	r30, 0x0a	; 10
}

void clear_frame(){
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	ea 35       	cpi	r30, 0x5A	; 90
    183e:	f8 07       	cpc	r31, r24
    1840:	89 f7       	brne	.-30     	; 0x1824 <clear_frame+0x4>
        for(j=0;j<5;j++){
            frame[i][j] = 0;
        }
    } 
    }
    1842:	08 95       	ret

00001844 <test_pattern>:

void test_pattern(){
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    uint32_t plane = 0x1FFFFFF;
    uint32_t row4 = 0x1F00000;
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    1854:	c0 e0       	ldi	r28, 0x00	; 0
    1856:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t counter = 0;
    while(1){
    1858:	c8 31       	cpi	r28, 0x18	; 24
    185a:	d1 05       	cpc	r29, r1
    185c:	08 f4       	brcc	.+2      	; 0x1860 <test_pattern+0x1c>
    185e:	60 c2       	rjmp	.+1216   	; 0x1d20 <test_pattern+0x4dc>
    1860:	c8 e1       	ldi	r28, 0x18	; 24
    1862:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row0,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	40 ee       	ldi	r20, 0xE0	; 224
    1868:	53 e0       	ldi	r21, 0x03	; 3
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	00 e0       	ldi	r16, 0x00	; 0
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	98 01       	movw	r18, r16
    1874:	cc 24       	eor	r12, r12
    1876:	dd 24       	eor	r13, r13
    1878:	76 01       	movw	r14, r12
    187a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row1,0,0);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	ba 01       	movw	r22, r20
    1886:	00 ee       	ldi	r16, 0xE0	; 224
    1888:	13 e0       	ldi	r17, 0x03	; 3
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row1,0);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	ba 01       	movw	r22, r20
    189a:	00 e0       	ldi	r16, 0x00	; 0
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	98 01       	movw	r18, r16
    18a0:	90 ee       	ldi	r25, 0xE0	; 224
    18a2:	c9 2e       	mov	r12, r25
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	d9 2e       	mov	r13, r25
    18a8:	e1 2c       	mov	r14, r1
    18aa:	f1 2c       	mov	r15, r1
    18ac:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row1);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	ba 01       	movw	r22, r20
    18b8:	00 e0       	ldi	r16, 0x00	; 0
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	98 01       	movw	r18, r16
    18be:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row1);
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	40 ee       	ldi	r20, 0xE0	; 224
    18c6:	53 e0       	ldi	r21, 0x03	; 3
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	98 01       	movw	r18, r16
    18d2:	cc 24       	eor	r12, r12
    18d4:	dd 24       	eor	r13, r13
    18d6:	76 01       	movw	r14, r12
    18d8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row1,0,0);
    18dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    18e0:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row0);
            leds(4,row0,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <test_pattern+0xa2>
    18e4:	bf cf       	rjmp	.-130    	; 0x1864 <test_pattern+0x20>
    18e6:	c8 e1       	ldi	r28, 0x18	; 24
    18e8:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	5c e7       	ldi	r21, 0x7C	; 124
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	98 01       	movw	r18, r16
    18fa:	cc 24       	eor	r12, r12
    18fc:	dd 24       	eor	r13, r13
    18fe:	76 01       	movw	r14, r12
    1900:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row2,0,0);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	ba 01       	movw	r22, r20
    190c:	00 e0       	ldi	r16, 0x00	; 0
    190e:	1c e7       	ldi	r17, 0x7C	; 124
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row2,0);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	ba 01       	movw	r22, r20
    1920:	00 e0       	ldi	r16, 0x00	; 0
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	98 01       	movw	r18, r16
    1926:	c1 2c       	mov	r12, r1
    1928:	bc e7       	ldi	r27, 0x7C	; 124
    192a:	db 2e       	mov	r13, r27
    192c:	e1 2c       	mov	r14, r1
    192e:	f1 2c       	mov	r15, r1
    1930:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row2);
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	ba 01       	movw	r22, r20
    193c:	00 e0       	ldi	r16, 0x00	; 0
    193e:	10 e0       	ldi	r17, 0x00	; 0
    1940:	98 01       	movw	r18, r16
    1942:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row2);
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	5c e7       	ldi	r21, 0x7C	; 124
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	98 01       	movw	r18, r16
    1956:	cc 24       	eor	r12, r12
    1958:	dd 24       	eor	r13, r13
    195a:	76 01       	movw	r14, r12
    195c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row2,0,0);
    1960:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1964:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row1);
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1966:	09 f0       	breq	.+2      	; 0x196a <test_pattern+0x126>
    1968:	c0 cf       	rjmp	.-128    	; 0x18ea <test_pattern+0xa6>
    196a:	c8 e1       	ldi	r28, 0x18	; 24
    196c:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e8       	ldi	r21, 0x80	; 128
    1974:	6f e0       	ldi	r22, 0x0F	; 15
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	00 e0       	ldi	r16, 0x00	; 0
    197a:	10 e0       	ldi	r17, 0x00	; 0
    197c:	98 01       	movw	r18, r16
    197e:	cc 24       	eor	r12, r12
    1980:	dd 24       	eor	r13, r13
    1982:	76 01       	movw	r14, r12
    1984:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row3,0,0);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	ba 01       	movw	r22, r20
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e8       	ldi	r17, 0x80	; 128
    1994:	2f e0       	ldi	r18, 0x0F	; 15
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row3,0);
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	ba 01       	movw	r22, r20
    19a4:	00 e0       	ldi	r16, 0x00	; 0
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	98 01       	movw	r18, r16
    19aa:	c1 2c       	mov	r12, r1
    19ac:	a0 e8       	ldi	r26, 0x80	; 128
    19ae:	da 2e       	mov	r13, r26
    19b0:	af e0       	ldi	r26, 0x0F	; 15
    19b2:	ea 2e       	mov	r14, r26
    19b4:	f1 2c       	mov	r15, r1
    19b6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row3);
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	ba 01       	movw	r22, r20
    19c2:	00 e0       	ldi	r16, 0x00	; 0
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	98 01       	movw	r18, r16
    19c8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row3);
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e8       	ldi	r21, 0x80	; 128
    19d2:	6f e0       	ldi	r22, 0x0F	; 15
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	00 e0       	ldi	r16, 0x00	; 0
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	98 01       	movw	r18, r16
    19dc:	cc 24       	eor	r12, r12
    19de:	dd 24       	eor	r13, r13
    19e0:	76 01       	movw	r14, r12
    19e2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row3,0,0);
    19e6:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    19ea:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row2);
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <test_pattern+0x1ac>
    19ee:	bf cf       	rjmp	.-130    	; 0x196e <test_pattern+0x12a>
    19f0:	c8 e1       	ldi	r28, 0x18	; 24
    19f2:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	60 ef       	ldi	r22, 0xF0	; 240
    19fc:	71 e0       	ldi	r23, 0x01	; 1
    19fe:	00 e0       	ldi	r16, 0x00	; 0
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	98 01       	movw	r18, r16
    1a04:	cc 24       	eor	r12, r12
    1a06:	dd 24       	eor	r13, r13
    1a08:	76 01       	movw	r14, r12
    1a0a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row4,0,0);
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	ba 01       	movw	r22, r20
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	20 ef       	ldi	r18, 0xF0	; 240
    1a1c:	31 e0       	ldi	r19, 0x01	; 1
    1a1e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row4,0);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	ba 01       	movw	r22, r20
    1a2a:	00 e0       	ldi	r16, 0x00	; 0
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	98 01       	movw	r18, r16
    1a30:	c1 2c       	mov	r12, r1
    1a32:	d1 2c       	mov	r13, r1
    1a34:	f0 ef       	ldi	r31, 0xF0	; 240
    1a36:	ef 2e       	mov	r14, r31
    1a38:	f1 e0       	ldi	r31, 0x01	; 1
    1a3a:	ff 2e       	mov	r15, r31
    1a3c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row4);
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	ba 01       	movw	r22, r20
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	98 01       	movw	r18, r16
    1a4e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row4);
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	60 ef       	ldi	r22, 0xF0	; 240
    1a5a:	71 e0       	ldi	r23, 0x01	; 1
    1a5c:	00 e0       	ldi	r16, 0x00	; 0
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	98 01       	movw	r18, r16
    1a62:	cc 24       	eor	r12, r12
    1a64:	dd 24       	eor	r13, r13
    1a66:	76 01       	movw	r14, r12
    1a68:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row4,0,0);
    1a6c:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1a70:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row3);
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <test_pattern+0x232>
    1a74:	bf cf       	rjmp	.-130    	; 0x19f4 <test_pattern+0x1b0>
    1a76:	c8 e1       	ldi	r28, 0x18	; 24
    1a78:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row4,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	50 e8       	ldi	r21, 0x80	; 128
    1a80:	6f e0       	ldi	r22, 0x0F	; 15
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	00 e0       	ldi	r16, 0x00	; 0
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	98 01       	movw	r18, r16
    1a8a:	cc 24       	eor	r12, r12
    1a8c:	dd 24       	eor	r13, r13
    1a8e:	76 01       	movw	r14, r12
    1a90:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row3,0,0);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	ba 01       	movw	r22, r20
    1a9c:	00 e0       	ldi	r16, 0x00	; 0
    1a9e:	10 e8       	ldi	r17, 0x80	; 128
    1aa0:	2f e0       	ldi	r18, 0x0F	; 15
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row3,0);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	ba 01       	movw	r22, r20
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	98 01       	movw	r18, r16
    1ab6:	c1 2c       	mov	r12, r1
    1ab8:	e0 e8       	ldi	r30, 0x80	; 128
    1aba:	de 2e       	mov	r13, r30
    1abc:	ef e0       	ldi	r30, 0x0F	; 15
    1abe:	ee 2e       	mov	r14, r30
    1ac0:	f1 2c       	mov	r15, r1
    1ac2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row3);
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	ba 01       	movw	r22, r20
    1ace:	00 e0       	ldi	r16, 0x00	; 0
    1ad0:	10 e0       	ldi	r17, 0x00	; 0
    1ad2:	98 01       	movw	r18, r16
    1ad4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row3);
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	50 e8       	ldi	r21, 0x80	; 128
    1ade:	6f e0       	ldi	r22, 0x0F	; 15
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	00 e0       	ldi	r16, 0x00	; 0
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	98 01       	movw	r18, r16
    1ae8:	cc 24       	eor	r12, r12
    1aea:	dd 24       	eor	r13, r13
    1aec:	76 01       	movw	r14, r12
    1aee:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row3,0,0);
    1af2:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1af6:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row4);
            leds(4,row4,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1af8:	09 f0       	breq	.+2      	; 0x1afc <test_pattern+0x2b8>
    1afa:	bf cf       	rjmp	.-130    	; 0x1a7a <test_pattern+0x236>
    1afc:	c8 e1       	ldi	r28, 0x18	; 24
    1afe:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	5c e7       	ldi	r21, 0x7C	; 124
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	98 01       	movw	r18, r16
    1b10:	cc 24       	eor	r12, r12
    1b12:	dd 24       	eor	r13, r13
    1b14:	76 01       	movw	r14, r12
    1b16:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row2,0,0);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	ba 01       	movw	r22, r20
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	1c e7       	ldi	r17, 0x7C	; 124
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row2,0);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	ba 01       	movw	r22, r20
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	10 e0       	ldi	r17, 0x00	; 0
    1b3a:	98 01       	movw	r18, r16
    1b3c:	c1 2c       	mov	r12, r1
    1b3e:	9c e7       	ldi	r25, 0x7C	; 124
    1b40:	d9 2e       	mov	r13, r25
    1b42:	e1 2c       	mov	r14, r1
    1b44:	f1 2c       	mov	r15, r1
    1b46:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row2);
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	ba 01       	movw	r22, r20
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	98 01       	movw	r18, r16
    1b58:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row2);
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	5c e7       	ldi	r21, 0x7C	; 124
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	98 01       	movw	r18, r16
    1b6c:	cc 24       	eor	r12, r12
    1b6e:	dd 24       	eor	r13, r13
    1b70:	76 01       	movw	r14, r12
    1b72:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row2,0,0);
    1b76:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1b7a:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row3);
            leds(4,row3,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <test_pattern+0x33c>
    1b7e:	c0 cf       	rjmp	.-128    	; 0x1b00 <test_pattern+0x2bc>
    1b80:	c8 e1       	ldi	r28, 0x18	; 24
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	40 ee       	ldi	r20, 0xE0	; 224
    1b88:	53 e0       	ldi	r21, 0x03	; 3
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	00 e0       	ldi	r16, 0x00	; 0
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	98 01       	movw	r18, r16
    1b94:	cc 24       	eor	r12, r12
    1b96:	dd 24       	eor	r13, r13
    1b98:	76 01       	movw	r14, r12
    1b9a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row1,0,0);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	ba 01       	movw	r22, r20
    1ba6:	00 ee       	ldi	r16, 0xE0	; 224
    1ba8:	13 e0       	ldi	r17, 0x03	; 3
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row1,0);
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	ba 01       	movw	r22, r20
    1bba:	00 e0       	ldi	r16, 0x00	; 0
    1bbc:	10 e0       	ldi	r17, 0x00	; 0
    1bbe:	98 01       	movw	r18, r16
    1bc0:	b0 ee       	ldi	r27, 0xE0	; 224
    1bc2:	cb 2e       	mov	r12, r27
    1bc4:	b3 e0       	ldi	r27, 0x03	; 3
    1bc6:	db 2e       	mov	r13, r27
    1bc8:	e1 2c       	mov	r14, r1
    1bca:	f1 2c       	mov	r15, r1
    1bcc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row1);
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	ba 01       	movw	r22, r20
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	98 01       	movw	r18, r16
    1bde:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row1);
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	40 ee       	ldi	r20, 0xE0	; 224
    1be6:	53 e0       	ldi	r21, 0x03	; 3
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	00 e0       	ldi	r16, 0x00	; 0
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	98 01       	movw	r18, r16
    1bf2:	cc 24       	eor	r12, r12
    1bf4:	dd 24       	eor	r13, r13
    1bf6:	76 01       	movw	r14, r12
    1bf8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row1,0,0);
    1bfc:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1c00:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row2);
            leds(4,row2,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <test_pattern+0x3c2>
    1c04:	bf cf       	rjmp	.-130    	; 0x1b84 <test_pattern+0x340>
    1c06:	c8 e1       	ldi	r28, 0x18	; 24
    1c08:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	4f ef       	ldi	r20, 0xFF	; 255
    1c0e:	5f ef       	ldi	r21, 0xFF	; 255
    1c10:	6f ef       	ldi	r22, 0xFF	; 255
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	10 e0       	ldi	r17, 0x00	; 0
    1c18:	98 01       	movw	r18, r16
    1c1a:	cc 24       	eor	r12, r12
    1c1c:	dd 24       	eor	r13, r13
    1c1e:	76 01       	movw	r14, r12
    1c20:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,plane,0,0);
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	ba 01       	movw	r22, r20
    1c2c:	0f ef       	ldi	r16, 0xFF	; 255
    1c2e:	1f ef       	ldi	r17, 0xFF	; 255
    1c30:	2f ef       	ldi	r18, 0xFF	; 255
    1c32:	31 e0       	ldi	r19, 0x01	; 1
    1c34:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,plane,0);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	ba 01       	movw	r22, r20
    1c40:	00 e0       	ldi	r16, 0x00	; 0
    1c42:	10 e0       	ldi	r17, 0x00	; 0
    1c44:	98 01       	movw	r18, r16
    1c46:	af ef       	ldi	r26, 0xFF	; 255
    1c48:	ca 2e       	mov	r12, r26
    1c4a:	af ef       	ldi	r26, 0xFF	; 255
    1c4c:	da 2e       	mov	r13, r26
    1c4e:	af ef       	ldi	r26, 0xFF	; 255
    1c50:	ea 2e       	mov	r14, r26
    1c52:	a1 e0       	ldi	r26, 0x01	; 1
    1c54:	fa 2e       	mov	r15, r26
    1c56:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,plane);
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	ba 01       	movw	r22, r20
    1c62:	00 e0       	ldi	r16, 0x00	; 0
    1c64:	10 e0       	ldi	r17, 0x00	; 0
    1c66:	98 01       	movw	r18, r16
    1c68:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,plane);
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	4f ef       	ldi	r20, 0xFF	; 255
    1c70:	5f ef       	ldi	r21, 0xFF	; 255
    1c72:	6f ef       	ldi	r22, 0xFF	; 255
    1c74:	71 e0       	ldi	r23, 0x01	; 1
    1c76:	00 e0       	ldi	r16, 0x00	; 0
    1c78:	10 e0       	ldi	r17, 0x00	; 0
    1c7a:	98 01       	movw	r18, r16
    1c7c:	cc 24       	eor	r12, r12
    1c7e:	dd 24       	eor	r13, r13
    1c80:	76 01       	movw	r14, r12
    1c82:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,plane,0,0);
    1c86:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1c8a:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,row1);
            leds(4,row1,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <test_pattern+0x44c>
    1c8e:	bd cf       	rjmp	.-134    	; 0x1c0a <test_pattern+0x3c6>
    1c90:	c8 e1       	ldi	r28, 0x18	; 24
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
            leds(4,plane,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	4f e1       	ldi	r20, 0x1F	; 31
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	00 e0       	ldi	r16, 0x00	; 0
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
    1ca2:	98 01       	movw	r18, r16
    1ca4:	cc 24       	eor	r12, r12
    1ca6:	dd 24       	eor	r13, r13
    1ca8:	76 01       	movw	r14, r12
    1caa:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row0,0,0);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	ba 01       	movw	r22, r20
    1cb6:	0f e1       	ldi	r16, 0x1F	; 31
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row0,0);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	ba 01       	movw	r22, r20
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	98 01       	movw	r18, r16
    1cd0:	ff e1       	ldi	r31, 0x1F	; 31
    1cd2:	cf 2e       	mov	r12, r31
    1cd4:	d1 2c       	mov	r13, r1
    1cd6:	e1 2c       	mov	r14, r1
    1cd8:	f1 2c       	mov	r15, r1
    1cda:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row0);
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	ba 01       	movw	r22, r20
    1ce6:	00 e0       	ldi	r16, 0x00	; 0
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    1cea:	98 01       	movw	r18, r16
    1cec:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row0);
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	4f e1       	ldi	r20, 0x1F	; 31
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	00 e0       	ldi	r16, 0x00	; 0
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
    1cfe:	98 01       	movw	r18, r16
    1d00:	cc 24       	eor	r12, r12
    1d02:	dd 24       	eor	r13, r13
    1d04:	76 01       	movw	r14, r12
    1d06:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row0,0,0);
    1d0a:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1d0e:	21 97       	sbiw	r28, 0x01	; 1
            leds(3,0,0,plane);
            leds(4,plane,0,0);
            test_frame();
            counter++;
        }
        counter = 0;
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <test_pattern+0x4d0>
    1d12:	c0 cf       	rjmp	.-128    	; 0x1c94 <test_pattern+0x450>
            leds(0,row0,0,0);
            leds(1,0,row0,0);
            leds(2,0,0,row0);
            leds(3,0,0,row0);
            leds(4,row0,0,0);
            test_frame();
    1d14:	c8 e1       	ldi	r28, 0x18	; 24
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
    1d18:	c8 31       	cpi	r28, 0x18	; 24
    1d1a:	d1 05       	cpc	r29, r1
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <test_pattern+0x4dc>
    1d1e:	a0 cd       	rjmp	.-1216   	; 0x1860 <test_pattern+0x1c>
        while(counter <0x0018){
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	4f e1       	ldi	r20, 0x1F	; 31
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	00 e0       	ldi	r16, 0x00	; 0
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	98 01       	movw	r18, r16
    1d30:	cc 24       	eor	r12, r12
    1d32:	dd 24       	eor	r13, r13
    1d34:	76 01       	movw	r14, r12
    1d36:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row0,0,0);
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	ba 01       	movw	r22, r20
    1d42:	0f e1       	ldi	r16, 0x1F	; 31
    1d44:	10 e0       	ldi	r17, 0x00	; 0
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row0,0);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	ba 01       	movw	r22, r20
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	98 01       	movw	r18, r16
    1d5c:	ef e1       	ldi	r30, 0x1F	; 31
    1d5e:	ce 2e       	mov	r12, r30
    1d60:	d1 2c       	mov	r13, r1
    1d62:	e1 2c       	mov	r14, r1
    1d64:	f1 2c       	mov	r15, r1
    1d66:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row0);
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	ba 01       	movw	r22, r20
    1d72:	00 e0       	ldi	r16, 0x00	; 0
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	98 01       	movw	r18, r16
    1d78:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row0);
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	4f e1       	ldi	r20, 0x1F	; 31
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	00 e0       	ldi	r16, 0x00	; 0
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	98 01       	movw	r18, r16
    1d8c:	cc 24       	eor	r12, r12
    1d8e:	dd 24       	eor	r13, r13
    1d90:	76 01       	movw	r14, r12
    1d92:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,row0,0,0);
    1d96:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
            test_frame();
    1d9a:	21 96       	adiw	r28, 0x01	; 1
    1d9c:	5d cd       	rjmp	.-1350   	; 0x1858 <test_pattern+0x14>

00001d9e <test_pattern1>:
            counter++;
            
        }
    }
}

    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
    1daa:	80 91 5a 01 	lds	r24, 0x015A
    1dae:	88 23       	and	r24, r24
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <test_pattern1+0x16>
    1db2:	42 c0       	rjmp	.+132    	; 0x1e38 <test_pattern1+0x9a>
        while(next == 0){
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	4f e1       	ldi	r20, 0x1F	; 31
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	00 e0       	ldi	r16, 0x00	; 0
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	98 01       	movw	r18, r16
    1dc4:	cc 24       	eor	r12, r12
    1dc6:	dd 24       	eor	r13, r13
    1dc8:	76 01       	movw	r14, r12
    1dca:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row0,0,0);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	ba 01       	movw	r22, r20
    1dd6:	0f e1       	ldi	r16, 0x1F	; 31
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row0,0);
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	ba 01       	movw	r22, r20
    1dea:	00 e0       	ldi	r16, 0x00	; 0
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	98 01       	movw	r18, r16
    1df0:	af e1       	ldi	r26, 0x1F	; 31
    1df2:	ca 2e       	mov	r12, r26
    1df4:	d1 2c       	mov	r13, r1
    1df6:	e1 2c       	mov	r14, r1
    1df8:	f1 2c       	mov	r15, r1
    1dfa:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row0);
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	ba 01       	movw	r22, r20
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	98 01       	movw	r18, r16
    1e0c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row0);
    1e10:	84 e0       	ldi	r24, 0x04	; 4
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	ba 01       	movw	r22, r20
    1e18:	0f e1       	ldi	r16, 0x1F	; 31
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	cc 24       	eor	r12, r12
    1e22:	dd 24       	eor	r13, r13
    1e24:	76 01       	movw	r14, r12
    1e26:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,0,row0,0);
    1e2a:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
    1e2e:	80 91 5a 01 	lds	r24, 0x015A
    1e32:	88 23       	and	r24, r24
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <test_pattern1+0x9a>
    1e36:	be cf       	rjmp	.-132    	; 0x1db4 <test_pattern1+0x16>
            leds(3,0,0,row1);
            leds(4,0,row1,0);
            test_frame();
            //counter++;
        }
        //counter = 0;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	80 93 5a 01 	sts	0x015A, r24
        next = 1;
        while(counter <0x0018){
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	5c e7       	ldi	r21, 0x7C	; 124
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	00 e0       	ldi	r16, 0x00	; 0
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	98 01       	movw	r18, r16
    1e4e:	cc 24       	eor	r12, r12
    1e50:	dd 24       	eor	r13, r13
    1e52:	76 01       	movw	r14, r12
    1e54:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(0,row2,0,0);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	ba 01       	movw	r22, r20
    1e60:	00 e0       	ldi	r16, 0x00	; 0
    1e62:	1c e7       	ldi	r17, 0x7C	; 124
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(1,0,row2,0);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	ba 01       	movw	r22, r20
    1e74:	00 e0       	ldi	r16, 0x00	; 0
    1e76:	10 e0       	ldi	r17, 0x00	; 0
    1e78:	98 01       	movw	r18, r16
    1e7a:	c1 2c       	mov	r12, r1
    1e7c:	fc e7       	ldi	r31, 0x7C	; 124
    1e7e:	df 2e       	mov	r13, r31
    1e80:	e1 2c       	mov	r14, r1
    1e82:	f1 2c       	mov	r15, r1
    1e84:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(2,0,0,row2);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	ba 01       	movw	r22, r20
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	98 01       	movw	r18, r16
    1e96:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(3,0,0,row2);
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	ba 01       	movw	r22, r20
    1ea2:	00 e0       	ldi	r16, 0x00	; 0
    1ea4:	1c e7       	ldi	r17, 0x7C	; 124
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	cc 24       	eor	r12, r12
    1eac:	dd 24       	eor	r13, r13
    1eae:	76 01       	movw	r14, r12
    1eb0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
            leds(4,0,row2,0);
    1eb4:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    1eb8:	c2 cf       	rjmp	.-124    	; 0x1e3e <test_pattern1+0xa0>

00001eba <__vector_9>:
        //mirf_send(testbuffer,testbuffersize);
        //
		_delay_ms(10);
}
*/

    1eba:	1f 92       	push	r1
    1ebc:	0f 92       	push	r0
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	0f 92       	push	r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
ISR(TIMER1_OVF_vect){
//
    static uint16_t counter = 0;
    1ec8:	80 91 5b 01 	lds	r24, 0x015B
    1ecc:	90 91 5c 01 	lds	r25, 0x015C
    1ed0:	88 30       	cpi	r24, 0x08	; 8
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	38 f0       	brcs	.+14     	; 0x1ee4 <__vector_9+0x2a>
    if(counter >= 0x08){
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	80 93 5a 01 	sts	0x015A, r24
        next = 1;
    1edc:	10 92 5c 01 	sts	0x015C, r1
    1ee0:	10 92 5b 01 	sts	0x015B, r1
        counter = 0;
    }

    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <test_xbee_pins>:
}

void test_xbee_pins(){

    1ef2:	82 b1       	in	r24, 0x02	; 2
    1ef4:	83 60       	ori	r24, 0x03	; 3
    1ef6:	82 b9       	out	0x02, r24	; 2
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	94 e3       	ldi	r25, 0x34	; 52
    1efc:	ac e0       	ldi	r26, 0x0C	; 12
    1efe:	81 50       	subi	r24, 0x01	; 1
    1f00:	90 40       	sbci	r25, 0x00	; 0
    1f02:	a0 40       	sbci	r26, 0x00	; 0
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <test_xbee_pins+0xc>
    1f06:	00 c0       	rjmp	.+0      	; 0x1f08 <test_xbee_pins+0x16>
    1f08:	00 00       	nop
    PORTA |= ((1<<PA0)|(1<<PA1));
    _delay_ms(500);
    1f0a:	82 b1       	in	r24, 0x02	; 2
    1f0c:	82 b9       	out	0x02, r24	; 2
    PORTA |= ((0<<PA0)|(0<<PA1));

    1f0e:	08 95       	ret

00001f10 <probe_test>:
}

void probe_test(){
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 85 0a 	call	0x150a	; 0x150a <LED_test>
        LED_test(0,4,0);
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(500);
    1f1a:	08 95       	ret

00001f1c <transmit_led>:
}

void transmit_led(uint8_t data){
    1f1c:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    SPI_Transmit(data);
    1f20:	08 95       	ret

00001f22 <led1_on>:
}


void led1_on(){
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x01);
	//Toggle latch
    1f5e:	16 9a       	sbi	0x02, 6	; 2
	PORTA |= (1<<SS);
    1f60:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
    1f62:	08 95       	ret

00001f64 <led_off>:
}
void led_off(){
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <transmit_led>
    transmit_led(0x00);
	//Toggle latch
    1fa0:	16 9a       	sbi	0x02, 6	; 2
	PORTA |= (1<<SS);
    1fa2:	16 98       	cbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
    
    1fa4:	08 95       	ret

00001fa6 <test_protocol>:
}

    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
void test_protocol(){
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	60 e2       	ldi	r22, 0x20	; 32
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <Receive>
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	89 f1       	breq	.+98     	; 0x2022 <test_protocol+0x7c>
    1fc0:	8f e7       	ldi	r24, 0x7F	; 127
    1fc2:	98 e3       	ldi	r25, 0x38	; 56
    1fc4:	a1 e0       	ldi	r26, 0x01	; 1
    1fc6:	81 50       	subi	r24, 0x01	; 1
    1fc8:	90 40       	sbci	r25, 0x00	; 0
    1fca:	a0 40       	sbci	r26, 0x00	; 0
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <test_protocol+0x20>
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <test_protocol+0x2a>
    1fd0:	00 00       	nop
    else{
        //led2_on();
        _delay_ms(50);
        //led_off();
    }
    //led_off();
    1fd2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    1fd6:	8f e7       	ldi	r24, 0x7F	; 127
    1fd8:	98 e3       	ldi	r25, 0x38	; 56
    1fda:	a1 e0       	ldi	r26, 0x01	; 1
    1fdc:	81 50       	subi	r24, 0x01	; 1
    1fde:	90 40       	sbci	r25, 0x00	; 0
    1fe0:	a0 40       	sbci	r26, 0x00	; 0
    1fe2:	e1 f7       	brne	.-8      	; 0x1fdc <test_protocol+0x36>
    1fe4:	00 c0       	rjmp	.+0      	; 0x1fe6 <test_protocol+0x40>
    1fe6:	00 00       	nop
    led1_on();
    _delay_ms(50);
    1fe8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    led_off();
    1fec:	40 91 00 01 	lds	r20, 0x0100
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	00 91 01 01 	lds	r16, 0x0101
    1ffa:	10 e0       	ldi	r17, 0x00	; 0
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	c0 90 02 01 	lds	r12, 0x0102
    2004:	dd 24       	eor	r13, r13
    2006:	ee 24       	eor	r14, r14
    2008:	ff 24       	eor	r15, r15
    200a:	84 e0       	ldi	r24, 0x04	; 4
    200c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <leds>
    leds(4,buffer[0],buffer[1],buffer[2]);
    2010:	0e 94 00 0c 	call	0x1800	; 0x1800 <test_frame>
    test_frame();
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	08 95       	ret
    
}

void test_protocol(){
    if(Receive(buffer,BUFFER_SIZE) == 1){
        //if((buffer[3] == 'l')){//}&&(buffer[31] == '}')){
    2022:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    2026:	8f e7       	ldi	r24, 0x7F	; 127
    2028:	98 e3       	ldi	r25, 0x38	; 56
    202a:	a1 e0       	ldi	r26, 0x01	; 1
    202c:	81 50       	subi	r24, 0x01	; 1
    202e:	90 40       	sbci	r25, 0x00	; 0
    2030:	a0 40       	sbci	r26, 0x00	; 0
    2032:	e1 f7       	brne	.-8      	; 0x202c <test_protocol+0x86>
    2034:	00 c0       	rjmp	.+0      	; 0x2036 <test_protocol+0x90>
    2036:	00 00       	nop
        led1_on();
        _delay_ms(50);
    2038:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
        led_off();
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	60 e2       	ldi	r22, 0x20	; 32
    2042:	0e 94 1c 02 	call	0x438	; 0x438 <Transmit>
    2046:	c5 cf       	rjmp	.-118    	; 0x1fd2 <test_protocol+0x2c>

00002048 <main>:

/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){

    2048:	84 b1       	in	r24, 0x04	; 4
    204a:	80 67       	ori	r24, 0x70	; 112
    204c:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    204e:	85 b1       	in	r24, 0x05	; 5
    2050:	8f 60       	ori	r24, 0x0F	; 15
    2052:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
    2054:	0e 94 e5 11 	call	0x23ca	; 0x23ca <spi_init>
	spi_init();    //initalize SPI port
    //initialize_interrupts();
	// Initialize AVR for use with mirf
	//mirf_init();
    2058:	0e 94 0d 02 	call	0x41a	; 0x41a <init>
    205c:	8f e7       	ldi	r24, 0x7F	; 127
    205e:	98 e3       	ldi	r25, 0x38	; 56
    2060:	a1 e0       	ldi	r26, 0x01	; 1
    2062:	81 50       	subi	r24, 0x01	; 1
    2064:	90 40       	sbci	r25, 0x00	; 0
    2066:	a0 40       	sbci	r26, 0x00	; 0
    2068:	e1 f7       	brne	.-8      	; 0x2062 <main+0x1a>
    206a:	00 c0       	rjmp	.+0      	; 0x206c <main+0x24>
    206c:	00 00       	nop
    init();
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    206e:	78 94       	sei
}
void init2(){
	//mirf_read_register (STATUS, buffer, 1);
	
	// Configure mirf
	mirf_config();
    2070:	0e 94 39 11 	call	0x2272	; 0x2272 <mirf_config>
	// Activate interrupts
    sei();
    init2();
	//mirf_read_register(STATUS, receive_buffer, 1);
	//mirf_config();
   
    2074:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    2078:	8f e7       	ldi	r24, 0x7F	; 127
    207a:	98 e3       	ldi	r25, 0x38	; 56
    207c:	a1 e0       	ldi	r26, 0x01	; 1
    207e:	81 50       	subi	r24, 0x01	; 1
    2080:	90 40       	sbci	r25, 0x00	; 0
    2082:	a0 40       	sbci	r26, 0x00	; 0
    2084:	e1 f7       	brne	.-8      	; 0x207e <main+0x36>
    2086:	00 c0       	rjmp	.+0      	; 0x2088 <main+0x40>
    2088:	00 00       	nop
   led1_on();
   _delay_ms(50);
    208a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    208e:	8f e7       	ldi	r24, 0x7F	; 127
    2090:	98 e3       	ldi	r25, 0x38	; 56
    2092:	a1 e0       	ldi	r26, 0x01	; 1
    2094:	81 50       	subi	r24, 0x01	; 1
    2096:	90 40       	sbci	r25, 0x00	; 0
    2098:	a0 40       	sbci	r26, 0x00	; 0
    209a:	e1 f7       	brne	.-8      	; 0x2094 <main+0x4c>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <main+0x56>
    209e:	00 00       	nop
   led_off();
   _delay_ms(50);
    20a0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    20a4:	8f e7       	ldi	r24, 0x7F	; 127
    20a6:	98 e3       	ldi	r25, 0x38	; 56
    20a8:	a1 e0       	ldi	r26, 0x01	; 1
    20aa:	81 50       	subi	r24, 0x01	; 1
    20ac:	90 40       	sbci	r25, 0x00	; 0
    20ae:	a0 40       	sbci	r26, 0x00	; 0
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <main+0x62>
    20b2:	00 c0       	rjmp	.+0      	; 0x20b4 <main+0x6c>
    20b4:	00 00       	nop
   led1_on();
   _delay_ms(50);
    20b6:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    20ba:	8f e7       	ldi	r24, 0x7F	; 127
    20bc:	98 e3       	ldi	r25, 0x38	; 56
    20be:	a1 e0       	ldi	r26, 0x01	; 1
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	90 40       	sbci	r25, 0x00	; 0
    20c4:	a0 40       	sbci	r26, 0x00	; 0
    20c6:	e1 f7       	brne	.-8      	; 0x20c0 <main+0x78>
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <main+0x82>
    20ca:	00 00       	nop
   led_off();
   _delay_ms(50);
    20cc:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    20d0:	8f e7       	ldi	r24, 0x7F	; 127
    20d2:	98 e3       	ldi	r25, 0x38	; 56
    20d4:	a1 e0       	ldi	r26, 0x01	; 1
    20d6:	81 50       	subi	r24, 0x01	; 1
    20d8:	90 40       	sbci	r25, 0x00	; 0
    20da:	a0 40       	sbci	r26, 0x00	; 0
    20dc:	e1 f7       	brne	.-8      	; 0x20d6 <main+0x8e>
    20de:	00 c0       	rjmp	.+0      	; 0x20e0 <main+0x98>
    20e0:	00 00       	nop
   led1_on();
   _delay_ms(50);
    20e2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    20e6:	8f e7       	ldi	r24, 0x7F	; 127
    20e8:	98 e3       	ldi	r25, 0x38	; 56
    20ea:	a1 e0       	ldi	r26, 0x01	; 1
    20ec:	81 50       	subi	r24, 0x01	; 1
    20ee:	90 40       	sbci	r25, 0x00	; 0
    20f0:	a0 40       	sbci	r26, 0x00	; 0
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <main+0xa4>
    20f4:	00 c0       	rjmp	.+0      	; 0x20f6 <main+0xae>
    20f6:	00 00       	nop
   led_off();
   _delay_ms(50);
    20f8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    20fc:	8f e7       	ldi	r24, 0x7F	; 127
    20fe:	98 e3       	ldi	r25, 0x38	; 56
    2100:	a1 e0       	ldi	r26, 0x01	; 1
    2102:	81 50       	subi	r24, 0x01	; 1
    2104:	90 40       	sbci	r25, 0x00	; 0
    2106:	a0 40       	sbci	r26, 0x00	; 0
    2108:	e1 f7       	brne	.-8      	; 0x2102 <main+0xba>
    210a:	00 c0       	rjmp	.+0      	; 0x210c <main+0xc4>
    210c:	00 00       	nop
   led1_on();
   _delay_ms(50);
    210e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    2112:	8f e7       	ldi	r24, 0x7F	; 127
    2114:	98 e3       	ldi	r25, 0x38	; 56
    2116:	a1 e0       	ldi	r26, 0x01	; 1
    2118:	81 50       	subi	r24, 0x01	; 1
    211a:	90 40       	sbci	r25, 0x00	; 0
    211c:	a0 40       	sbci	r26, 0x00	; 0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <main+0xd0>
    2120:	00 c0       	rjmp	.+0      	; 0x2122 <main+0xda>
    2122:	00 00       	nop
   led_off();
   _delay_ms(50);
    2124:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <led1_on>
    2128:	8f e7       	ldi	r24, 0x7F	; 127
    212a:	98 e3       	ldi	r25, 0x38	; 56
    212c:	a1 e0       	ldi	r26, 0x01	; 1
    212e:	81 50       	subi	r24, 0x01	; 1
    2130:	90 40       	sbci	r25, 0x00	; 0
    2132:	a0 40       	sbci	r26, 0x00	; 0
    2134:	e1 f7       	brne	.-8      	; 0x212e <main+0xe6>
    2136:	00 c0       	rjmp	.+0      	; 0x2138 <main+0xf0>
    2138:	00 00       	nop
   led1_on();
   _delay_ms(50);
    213a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <led_off>
    213e:	ff cf       	rjmp	.-2      	; 0x213e <main+0xf6>

00002140 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
    2140:	84 b1       	in	r24, 0x04	; 4
    2142:	83 60       	ori	r24, 0x03	; 3
    2144:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB4); //Enable the interrupt pin as an input set to high since the IRQ is active low
    2146:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CE_lo;
    2148:	11 98       	cbi	0x02, 1	; 2
    mirf_CSN_hi;
    214a:	10 9a       	sbi	0x02, 0	; 2

#if defined(__AVR_ATtiny167__)
    // Initialize PCINT3 for ATtiny167
    PCICR |= (1<<PCIE0);
    214c:	e8 e6       	ldi	r30, 0x68	; 104
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	81 60       	ori	r24, 0x01	; 1
    2154:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT3);
    2156:	eb e6       	ldi	r30, 0x6B	; 107
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 60       	ori	r24, 0x08	; 8
    215e:	80 83       	st	Z, r24
	GIMSK |= (1<<PCIE);
	PCMSK |= (1<<PCINT4);
    */

    // Initialize spi module
    spi_init();
    2160:	0e 94 e5 11 	call	0x23ca	; 0x23ca <spi_init>
}
    2164:	08 95       	ret

00002166 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2166:	80 91 69 01 	lds	r24, 0x0169
    216a:	88 23       	and	r24, r24
    216c:	11 f0       	breq	.+4      	; 0x2172 <mirf_data_ready+0xc>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    2170:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2172:	10 98       	cbi	0x02, 0	; 2
    status = SPI_Receive();               // Read status register
    2174:	0e 94 04 12 	call	0x2408	; 0x2408 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
    2178:	10 9a       	sbi	0x02, 0	; 2
    return status & (1<<RX_DR);
    217a:	80 74       	andi	r24, 0x40	; 64
    217c:	08 95       	ret

0000217e <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    2188:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    218a:	8f 71       	andi	r24, 0x1F	; 31
    218c:	80 62       	ori	r24, 0x20	; 32
    218e:	69 83       	std	Y+1, r22	; 0x01
    2190:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    SPI_Transmit(value);
    2194:	69 81       	ldd	r22, Y+1	; 0x01
    2196:	86 2f       	mov	r24, r22
    2198:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    mirf_CSN_hi;
    219c:	10 9a       	sbi	0x02, 0	; 2
}
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
    21ac:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
    21ae:	81 e6       	ldi	r24, 0x61	; 97
    21b0:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
    21b4:	ce 01       	movw	r24, r28
    21b6:	be 01       	movw	r22, r28
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	0e 94 16 12 	call	0x242c	; 0x242c <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
    21be:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    21c0:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_RX );     // Write cmd to flush tx fifo
    21c2:	82 ee       	ldi	r24, 0xE2	; 226
    21c4:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    21c8:	10 9a       	sbi	0x02, 0	; 2
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
    21ca:	87 e0       	ldi	r24, 0x07	; 7
    21cc:	60 e4       	ldi	r22, 0x40	; 64
    21ce:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
}
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <tx_complete>:
//    EIFR |= (1<<PCIF);
}

void tx_complete(void){
    uint8_t status;
    if (PTX) {
    21d8:	80 91 69 01 	lds	r24, 0x0169
    21dc:	88 23       	and	r24, r24
    21de:	81 f0       	breq	.+32     	; 0x2200 <tx_complete+0x28>
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    21e0:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
    21e2:	0e 94 04 12 	call	0x2408	; 0x2408 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    21e6:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    21e8:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	6b e4       	ldi	r22, 0x4B	; 75
    21ee:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    21f2:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    21f4:	10 92 69 01 	sts	0x0169, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    21f8:	87 e0       	ldi	r24, 0x07	; 7
    21fa:	60 e3       	ldi	r22, 0x30	; 48
    21fc:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
    }
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
    2200:	d8 9a       	sbi	0x1b, 0	; 27
#endif // __AVR_ATmega168__  
}
    2202:	08 95       	ret

00002204 <__vector_3>:
#if defined(__AVR_ATtiny167__)
    ISR(PCINT0_vect)
#endif // __AVR_ATmega168__  
// Interrupt handler 
//ISR(PCINT_vect)
{
    2204:	1f 92       	push	r1
    2206:	0f 92       	push	r0
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	0f 92       	push	r0
    220c:	11 24       	eor	r1, r1
    220e:	2f 93       	push	r18
    2210:	3f 93       	push	r19
    2212:	4f 93       	push	r20
    2214:	5f 93       	push	r21
    2216:	6f 93       	push	r22
    2218:	7f 93       	push	r23
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    //DDRD |= (1<<6);
    //PORTD |= (1<<6);
    //transmit_string("interupted\n");
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
    2226:	80 91 69 01 	lds	r24, 0x0169
    222a:	88 23       	and	r24, r24
    222c:	81 f0       	breq	.+32     	; 0x224e <__vector_3+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    222e:	10 98       	cbi	0x02, 0	; 2
        status = SPI_Receive();               // Read status register
    2230:	0e 94 04 12 	call	0x2408	; 0x2408 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    2234:	10 9a       	sbi	0x02, 0	; 2

        mirf_CE_lo;                             // Deactivate transreceiver
    2236:	11 98       	cbi	0x02, 1	; 2
        RX_POWERUP;                             // Power up in receiving mode
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	6b e4       	ldi	r22, 0x4B	; 75
    223c:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    2240:	11 9a       	sbi	0x02, 1	; 2
        PTX = 0;                                // Set to receiving mode
    2242:	10 92 69 01 	sts	0x0169, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    2246:	87 e0       	ldi	r24, 0x07	; 7
    2248:	60 e3       	ldi	r22, 0x30	; 48
    224a:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
//PORTD &= (~(1<<6));
#if defined(__AVR_ATtiny2313__)
    EIFR |= (1<<PCIF);
#endif // __AVR_ATmega8__
#if defined(__AVR_ATtiny167__)
    PCIFR |= (1<<PCIF0);
    224e:	d8 9a       	sbi	0x1b, 0	; 27
#endif // __AVR_ATmega168__  
//    EIFR |= (1<<PCIF);
}
    2250:	ff 91       	pop	r31
    2252:	ef 91       	pop	r30
    2254:	bf 91       	pop	r27
    2256:	af 91       	pop	r26
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	7f 91       	pop	r23
    225e:	6f 91       	pop	r22
    2260:	5f 91       	pop	r21
    2262:	4f 91       	pop	r20
    2264:	3f 91       	pop	r19
    2266:	2f 91       	pop	r18
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	0f 90       	pop	r0
    226e:	1f 90       	pop	r1
    2270:	18 95       	reti

00002272 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
    2272:	85 e0       	ldi	r24, 0x05	; 5
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
    227a:	81 e1       	ldi	r24, 0x11	; 17
    227c:	60 e2       	ldi	r22, 0x20	; 32
    227e:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
    //mirf_set_RADDR_P1(0xB3B4B5B6F1);
    //mirf_set_TADDR(0xB3B4B5B6F1);
    //mirf_set_TADDR(0x7878787878);

    // Start receiver 
    PTX = 0;        // Start in receiving mode
    2282:	10 92 69 01 	sts	0x0169, r1
    RX_POWERUP;     // Power up in receiving mode
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	6b e4       	ldi	r22, 0x4B	; 75
    228a:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
    228e:	11 9a       	sbi	0x02, 1	; 2
}
    2290:	08 95       	ret

00002292 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    22a2:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
    22a4:	8f 71       	andi	r24, 0x1F	; 31
    22a6:	49 83       	std	Y+1, r20	; 0x01
    22a8:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    SPI_Transceive(value,value,len);
    22ac:	c8 01       	movw	r24, r16
    22ae:	b8 01       	movw	r22, r16
    22b0:	49 81       	ldd	r20, Y+1	; 0x01
    22b2:	0e 94 16 12 	call	0x242c	; 0x242c <SPI_Transceive>
    mirf_CSN_hi;
    22b6:	10 9a       	sbi	0x02, 0	; 2
}
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

000022c4 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	0f 92       	push	r0
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    22d4:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    22d6:	8f 71       	andi	r24, 0x1F	; 31
    22d8:	80 62       	ori	r24, 0x20	; 32
    22da:	49 83       	std	Y+1, r20	; 0x01
    22dc:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    SPI_Transmit_All(value,len);
    22e0:	c8 01       	movw	r24, r16
    22e2:	49 81       	ldd	r20, Y+1	; 0x01
    22e4:	64 2f       	mov	r22, r20
    22e6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <SPI_Transmit_All>
    mirf_CSN_hi;
    22ea:	10 9a       	sbi	0x02, 0	; 2
}
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    22f8:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
    22fa:	80 e1       	ldi	r24, 0x10	; 16
    22fc:	45 e0       	ldi	r20, 0x05	; 5
    22fe:	0e 94 62 11 	call	0x22c4	; 0x22c4 <mirf_write_register>
}
    2302:	08 95       	ret

00002304 <mirf_set_RADDR>:
    mirf_CE_hi;
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    2304:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    2306:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P0,adr,5);
    2308:	8a e0       	ldi	r24, 0x0A	; 10
    230a:	45 e0       	ldi	r20, 0x05	; 5
    230c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <mirf_write_register>
    mirf_CE_hi;
    2310:	11 9a       	sbi	0x02, 1	; 2
}
    2312:	08 95       	ret

00002314 <mirf_set_RADDR_P1>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR_P1(uint8_t * adr) 
// Sets the receiving address
{
    2314:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    2316:	11 98       	cbi	0x02, 1	; 2
    mirf_write_register(RX_ADDR_P1,adr,5);
    2318:	8b e0       	ldi	r24, 0x0B	; 11
    231a:	45 e0       	ldi	r20, 0x05	; 5
    231c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <mirf_write_register>
    mirf_CE_hi;
    2320:	11 9a       	sbi	0x02, 1	; 2
}
    2322:	08 95       	ret

00002324 <mirf_send>:


char mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	8c 01       	movw	r16, r24
    2338:	f6 2e       	mov	r15, r22

    // Save interrupt state and turn off interrupts
    uint8_t sreg_original = SREG;
    233a:	ef b6       	in	r14, 0x3f	; 63
    cli ();
    233c:	f8 94       	cli

    uint8_t status = 0;
    233e:	19 82       	std	Y+1, r1	; 0x01
    mirf_read_register (STATUS, &status, 1);
    2340:	87 e0       	ldi	r24, 0x07	; 7
    2342:	be 01       	movw	r22, r28
    2344:	6f 5f       	subi	r22, 0xFF	; 255
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 49 11 	call	0x2292	; 0x2292 <mirf_read_register>
    }
    #endif // __AVR_ATmega8__
    #if defined(__AVR_ATtiny167__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    234e:	1b 99       	sbic	0x03, 3	; 3
    2350:	15 c0       	rjmp	.+42     	; 0x237c <mirf_send+0x58>
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	85 fd       	sbrc	r24, 5
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <mirf_send+0x50>
        tx_complete();
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
    2358:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    235a:	80 91 69 01 	lds	r24, 0x0169
    235e:	88 23       	and	r24, r24
    2360:	a1 f0       	breq	.+40     	; 0x238a <mirf_send+0x66>
    {
        return -1; 
    2362:	8f ef       	ldi	r24, 0xFF	; 255
    //USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
    //USART_Transmit('q');
    return 0;
}
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	08 95       	ret
    }
    #endif // __AVR_ATmega8__
    #if defined(__AVR_ATtiny167__)
    // If PTX == 1 and TX_DS == 1, or if the interrupt line is low, data was sent but the interrupt never happened.
    //   In this case, the interrupt was missed for some reason 
    if ((PINB & (1<<PA3)) || ((status & (1<<MASK_TX_DS)) && PTX))
    2374:	80 91 69 01 	lds	r24, 0x0169
    2378:	88 23       	and	r24, r24
    237a:	71 f3       	breq	.-36     	; 0x2358 <mirf_send+0x34>
    {
        tx_complete();
    237c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <tx_complete>
    }
    #endif // __AVR_ATmega168__  

    // Restore interrupt state
    SREG = sreg_original;
    2380:	ef be       	out	0x3f, r14	; 63

    //uint8_t testbuffer[16] = {0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F};
    //USART_Transmit(PTX);
    if (PTX)
    2382:	80 91 69 01 	lds	r24, 0x0169
    2386:	88 23       	and	r24, r24
    2388:	61 f7       	brne	.-40     	; 0x2362 <mirf_send+0x3e>
        return -1; 
    }
//    while (PTX) {}                  // Wait until last paket is send

    //USART_Transmit('h');
    mirf_CE_lo;
    238a:	11 98       	cbi	0x02, 1	; 2

    PTX = 1;                        // Set to transmitter mode
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 93 69 01 	sts	0x0169, r24
    TX_POWERUP;                     // Power up
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	6a e4       	ldi	r22, 0x4A	; 74
    2396:	0e 94 bf 10 	call	0x217e	; 0x217e <mirf_config_register>
    
    //USART_Transmit('h');
    mirf_CSN_lo;                    // Pull down chip select
    239a:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
    239c:	81 ee       	ldi	r24, 0xE1	; 225
    239e:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    23a2:	10 9a       	sbi	0x02, 0	; 2
    mirf_CSN_lo;                    // Pull down chip select
    23a4:	10 98       	cbi	0x02, 0	; 2
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
    23a6:	80 ea       	ldi	r24, 0xA0	; 160
    23a8:	0e 94 ef 11 	call	0x23de	; 0x23de <SPI_Transmit>
    //USART_Transmit('h');
    //SPI_Transmit_All(testbuffer,16);
    SPI_Transmit_All(value,len);   // Write payload
    23ac:	c8 01       	movw	r24, r16
    23ae:	6f 2d       	mov	r22, r15
    23b0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
    23b4:	10 9a       	sbi	0x02, 0	; 2
    //USART_Transmit('h');
    
    mirf_CE_hi;                     // Start transmission
    23b6:	11 9a       	sbi	0x02, 1	; 2
    //USART_Transmit('q');
    return 0;
    23b8:	80 e0       	ldi	r24, 0x00	; 0
}
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	ef 90       	pop	r14
    23c8:	08 95       	ret

000023ca <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    23ca:	81 b1       	in	r24, 0x01	; 1
    23cc:	80 67       	ori	r24, 0x70	; 112
    23ce:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
    23d0:	8c b5       	in	r24, 0x2c	; 44
    23d2:	80 65       	ori	r24, 0x50	; 80
    23d4:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    23d6:	8d b5       	in	r24, 0x2d	; 45
    23d8:	81 60       	ori	r24, 0x01	; 1
    23da:	8d bd       	out	0x2d, r24	; 45


}
    23dc:	08 95       	ret

000023de <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    23de:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    23e0:	0d b4       	in	r0, 0x2d	; 45
    23e2:	07 fe       	sbrs	r0, 7
    23e4:	fd cf       	rjmp	.-6      	; 0x23e0 <SPI_Transmit+0x2>
	return SPDR;
    23e6:	8e b5       	in	r24, 0x2e	; 46
}
    23e8:	08 95       	ret

000023ea <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    23ea:	66 23       	and	r22, r22
    23ec:	61 f0       	breq	.+24     	; 0x2406 <SPI_Transmit_All+0x1c>
    23ee:	e8 2f       	mov	r30, r24
    23f0:	f9 2f       	mov	r31, r25
    23f2:	80 e0       	ldi	r24, 0x00	; 0
        SPI_Transmit(data[i]);
    23f4:	91 91       	ld	r25, Z+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    23f6:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    23f8:	0d b4       	in	r0, 0x2d	; 45
    23fa:	07 fe       	sbrs	r0, 7
    23fc:	fd cf       	rjmp	.-6      	; 0x23f8 <SPI_Transmit_All+0xe>
	return SPDR;
    23fe:	9e b5       	in	r25, 0x2e	; 46
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	86 17       	cp	r24, r22
    2404:	b8 f3       	brcs	.-18     	; 0x23f4 <SPI_Transmit_All+0xa>
    2406:	08 95       	ret

00002408 <SPI_Receive>:
        SPI_Transmit(data[i]);
    }
}

char SPI_Receive(void){
    SPDR = 0x00;
    2408:	1e bc       	out	0x2e, r1	; 46
    while(bit_is_clear(SPSR,SPIF)){};
    240a:	0d b4       	in	r0, 0x2d	; 45
    240c:	07 fe       	sbrs	r0, 7
    240e:	fd cf       	rjmp	.-6      	; 0x240a <SPI_Receive+0x2>
    return SPDR;
    2410:	8e b5       	in	r24, 0x2e	; 46
}
    2412:	08 95       	ret

00002414 <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    2414:	e8 2f       	mov	r30, r24
    2416:	f9 2f       	mov	r31, r25
    2418:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
    241a:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
    241c:	0d b4       	in	r0, 0x2d	; 45
    241e:	07 fe       	sbrs	r0, 7
    2420:	fd cf       	rjmp	.-6      	; 0x241c <SPI_Receive_All+0x8>
        data[i] = SPDR;
    2422:	9e b5       	in	r25, 0x2e	; 46
    2424:	91 93       	st	Z+, r25
    2426:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
    2428:	c1 f7       	brne	.-16     	; 0x241a <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
    242a:	08 95       	ret

0000242c <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    242c:	44 23       	and	r20, r20
    242e:	79 f0       	breq	.+30     	; 0x244e <SPI_Transceive+0x22>
    2430:	a8 2f       	mov	r26, r24
    2432:	b9 2f       	mov	r27, r25
    2434:	e6 2f       	mov	r30, r22
    2436:	f7 2f       	mov	r31, r23
    2438:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    243a:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    243c:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    243e:	0d b4       	in	r0, 0x2d	; 45
    2440:	07 fe       	sbrs	r0, 7
    2442:	fd cf       	rjmp	.-6      	; 0x243e <SPI_Transceive+0x12>
	return SPDR;
    2444:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    2446:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	84 17       	cp	r24, r20
    244c:	b0 f3       	brcs	.-20     	; 0x243a <SPI_Transceive+0xe>
    244e:	08 95       	ret

00002450 <__udivmodqi4>:
    2450:	99 1b       	sub	r25, r25
    2452:	79 e0       	ldi	r23, 0x09	; 9
    2454:	04 c0       	rjmp	.+8      	; 0x245e <__udivmodqi4_ep>

00002456 <__udivmodqi4_loop>:
    2456:	99 1f       	adc	r25, r25
    2458:	96 17       	cp	r25, r22
    245a:	08 f0       	brcs	.+2      	; 0x245e <__udivmodqi4_ep>
    245c:	96 1b       	sub	r25, r22

0000245e <__udivmodqi4_ep>:
    245e:	88 1f       	adc	r24, r24
    2460:	7a 95       	dec	r23
    2462:	c9 f7       	brne	.-14     	; 0x2456 <__udivmodqi4_loop>
    2464:	80 95       	com	r24
    2466:	08 95       	ret

00002468 <_exit>:
    2468:	f8 94       	cli

0000246a <__stop_program>:
    246a:	ff cf       	rjmp	.-2      	; 0x246a <__stop_program>
