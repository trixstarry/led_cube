
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000af4  00000b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800108  00800108  00000b90  2**0
                  ALLOC
  3 .stab         000017a0  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bfe  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
   8:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
   c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  10:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  18:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  20:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  24:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  28:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  2c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  30:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  34:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  38:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  3c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  44:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  48:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
  4c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>

00000050 <R>:
  50:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
  68:	00 01 00 00 00 00 00 00 00 00 08 00 00 00 00 00     ................
  78:	00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00     ................
  88:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
  98:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
  b0:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
  cc:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
  dc:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
  ec:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
  fc:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
 10c:	40 00 00 00 00 00 00 00 00 00 02 00 08 00 00 00     @...............
 11c:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
 134:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
 144:	00 00 00 00 00 40                                   .....@

0000014a <G>:
 14a:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
 162:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
 172:	00 00 00 00 02 00 00 00 00 00 00 00 08 00 00 00     ................
 182:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
 192:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
 1aa:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
 1c6:	00 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
 1d6:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
 1e6:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
 1f6:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
 206:	20 00 00 00 00 00 00 00 00 00 04 00 04 00 00 00      ...............
 216:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
 22e:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
 23e:	00 00 00 00 00 80                                   ......

00000244 <B>:
 244:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
 25c:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
 26c:	00 00 00 00 01 00 00 00 00 00 00 00 20 00 00 00     ............ ...
 27c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
 28c:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
 2a4:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
 2c0:	00 00 04 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
 2d0:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
 2e0:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
 2f0:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
 300:	10 00 00 00 00 00 00 00 00 00 08 00 02 00 00 00     ................
 310:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
 328:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
 338:	00 00 00 00 01 00                                   ......

0000033e <__ctors_end>:
 33e:	11 24       	eor	r1, r1
 340:	1f be       	out	0x3f, r1	; 63
 342:	ce ef       	ldi	r28, 0xFE	; 254
 344:	d2 e0       	ldi	r29, 0x02	; 2
 346:	de bf       	out	0x3e, r29	; 62
 348:	cd bf       	out	0x3d, r28	; 61

0000034a <__do_copy_data>:
 34a:	11 e0       	ldi	r17, 0x01	; 1
 34c:	a0 e0       	ldi	r26, 0x00	; 0
 34e:	b1 e0       	ldi	r27, 0x01	; 1
 350:	e4 ef       	ldi	r30, 0xF4	; 244
 352:	fa e0       	ldi	r31, 0x0A	; 10
 354:	02 c0       	rjmp	.+4      	; 0x35a <__do_copy_data+0x10>
 356:	05 90       	lpm	r0, Z+
 358:	0d 92       	st	X+, r0
 35a:	a8 30       	cpi	r26, 0x08	; 8
 35c:	b1 07       	cpc	r27, r17
 35e:	d9 f7       	brne	.-10     	; 0x356 <__do_copy_data+0xc>

00000360 <__do_clear_bss>:
 360:	11 e0       	ldi	r17, 0x01	; 1
 362:	a8 e0       	ldi	r26, 0x08	; 8
 364:	b1 e0       	ldi	r27, 0x01	; 1
 366:	01 c0       	rjmp	.+2      	; 0x36a <.do_clear_bss_start>

00000368 <.do_clear_bss_loop>:
 368:	1d 92       	st	X+, r1

0000036a <.do_clear_bss_start>:
 36a:	a3 34       	cpi	r26, 0x43	; 67
 36c:	b1 07       	cpc	r27, r17
 36e:	e1 f7       	brne	.-8      	; 0x368 <.do_clear_bss_loop>
 370:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <main>
 374:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <_exit>

00000378 <__bad_interrupt>:
 378:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000037c <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 37c:	81 b1       	in	r24, 0x01	; 1
 37e:	80 67       	ori	r24, 0x70	; 112
 380:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 382:	8c b5       	in	r24, 0x2c	; 44
 384:	81 65       	ori	r24, 0x51	; 81
 386:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 388:	8d b5       	in	r24, 0x2d	; 45
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	8d bd       	out	0x2d, r24	; 45

}//spi_init
 38e:	08 95       	ret

00000390 <transmit1>:
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
 394:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 396:	0d b4       	in	r0, 0x2d	; 45
 398:	07 fe       	sbrs	r0, 7
 39a:	fd cf       	rjmp	.-6      	; 0x396 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
 39c:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 39e:	0d b4       	in	r0, 0x2d	; 45
 3a0:	07 fe       	sbrs	r0, 7
 3a2:	fd cf       	rjmp	.-6      	; 0x39e <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
 3a4:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3a6:	0d b4       	in	r0, 0x2d	; 45
 3a8:	07 fe       	sbrs	r0, 7
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
 3ac:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3ae:	0d b4       	in	r0, 0x2d	; 45
 3b0:	07 fe       	sbrs	r0, 7
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
 3b4:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3b6:	0d b4       	in	r0, 0x2d	; 45
 3b8:	07 fe       	sbrs	r0, 7
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
 3bc:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3be:	0d b4       	in	r0, 0x2d	; 45
 3c0:	07 fe       	sbrs	r0, 7
 3c2:	fd cf       	rjmp	.-6      	; 0x3be <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
 3c4:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3c6:	0d b4       	in	r0, 0x2d	; 45
 3c8:	07 fe       	sbrs	r0, 7
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
 3cc:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3ce:	0d b4       	in	r0, 0x2d	; 45
 3d0:	07 fe       	sbrs	r0, 7
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
 3d4:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3d6:	0d b4       	in	r0, 0x2d	; 45
 3d8:	07 fe       	sbrs	r0, 7
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
 3dc:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
 3de:	0d b4       	in	r0, 0x2d	; 45
 3e0:	07 fe       	sbrs	r0, 7
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <transmit1+0x4e>

	//Toggle latch
	PORTA |= (1<<SS);
 3e4:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
 3e6:	16 98       	cbi	0x02, 6	; 2
}
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <transmit2>:

void transmit2(uint8_t layer){
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e8 0f       	add	r30, r24
 3fc:	f9 1f       	adc	r31, r25
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	e8 5f       	subi	r30, 0xF8	; 248
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	df 01       	movw	r26, r30
	//break the data up into 4 bytes
	
	uint8_t temp = 0;
    uint8_t i = 0;
    for(i=0;i<5;i++){
        temp = (frame[layer][i]);
 40a:	90 81       	ld	r25, Z
        //load first byte
        SPDR = temp;
 40c:	9e bd       	out	0x2e, r25	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
 40e:	0d b4       	in	r0, 0x2d	; 45
 410:	07 fe       	sbrs	r0, 7
 412:	fd cf       	rjmp	.-6      	; 0x40e <transmit2+0x20>
 414:	32 96       	adiw	r30, 0x02	; 2

        temp = (frame[layer][i]>>8);
 416:	11 96       	adiw	r26, 0x01	; 1
 418:	9c 91       	ld	r25, X
 41a:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
 41c:	9e bd       	out	0x2e, r25	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
 41e:	0d b4       	in	r0, 0x2d	; 45
 420:	07 fe       	sbrs	r0, 7
 422:	fd cf       	rjmp	.-6      	; 0x41e <transmit2+0x30>
 424:	81 50       	subi	r24, 0x01	; 1
void transmit2(uint8_t layer){
	//break the data up into 4 bytes
	
	uint8_t temp = 0;
    uint8_t i = 0;
    for(i=0;i<5;i++){
 426:	81 f7       	brne	.-32     	; 0x408 <transmit2+0x1a>
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
    }

	//Toggle latch
	PORTA |= (1<<SS);
 428:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
 42a:	16 98       	cbi	0x02, 6	; 2
}
 42c:	08 95       	ret

0000042e <level>:

void level(uint8_t layer){
    switch(layer){
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	f9 f0       	breq	.+62     	; 0x470 <level+0x42>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	40 f0       	brcs	.+16     	; 0x446 <level+0x18>
 436:	83 30       	cpi	r24, 0x03	; 3
 438:	09 f1       	breq	.+66     	; 0x47c <level+0x4e>
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	91 f0       	breq	.+36     	; 0x462 <level+0x34>
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	80 67       	ori	r24, 0x70	; 112
 442:	85 b9       	out	0x05, r24	; 5
 444:	08 95       	ret
	PORTA |= (1<<SS);
	PORTA &= ~(1<<SS);
}

void level(uint8_t layer){
    switch(layer){
 446:	88 23       	and	r24, r24
 448:	39 f0       	breq	.+14     	; 0x458 <level+0x2a>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	c1 f7       	brne	.-16     	; 0x43e <level+0x10>
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	8f 78       	andi	r24, 0x8F	; 143
 452:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
 454:	2c 9a       	sbi	0x05, 4	; 5
            return;
 456:	08 95       	ret
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	8f 78       	andi	r24, 0x8F	; 143
 45c:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
 45e:	2d 9a       	sbi	0x05, 5	; 5
            return;
 460:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 462:	85 b1       	in	r24, 0x05	; 5
 464:	8f 78       	andi	r24, 0x8F	; 143
 466:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
 468:	85 b1       	in	r24, 0x05	; 5
 46a:	80 63       	ori	r24, 0x30	; 48
 46c:	85 b9       	out	0x05, r24	; 5
            return;
 46e:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 470:	85 b1       	in	r24, 0x05	; 5
 472:	8f 78       	andi	r24, 0x8F	; 143
 474:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
 476:	85 b1       	in	r24, 0x05	; 5
 478:	85 b9       	out	0x05, r24	; 5
            return;
 47a:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	8f 78       	andi	r24, 0x8F	; 143
 480:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
 482:	2e 9a       	sbi	0x05, 6	; 5
            return;
 484:	08 95       	ret

00000486 <level_test>:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	ff 24       	eor	r15, r15
 48e:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 490:	8f 2d       	mov	r24, r15
 492:	81 50       	subi	r24, 0x01	; 1
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	e1 f0       	breq	.+56     	; 0x4d0 <level_test+0x4a>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	e0 f4       	brcc	.+56     	; 0x4d4 <level_test+0x4e>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	09 f4       	brne	.+2      	; 0x4a2 <level_test+0x1c>
 4a0:	41 c0       	rjmp	.+130    	; 0x524 <level_test+0x9e>
            case 0:
                level(i);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 17 02 	call	0x42e	; 0x42e <level>
                transmit1(on,on,on,on,on);
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	6f ef       	ldi	r22, 0xFF	; 255
 4ae:	7f ef       	ldi	r23, 0xFF	; 255
 4b0:	4f ef       	ldi	r20, 0xFF	; 255
 4b2:	5f ef       	ldi	r21, 0xFF	; 255
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	3f ef       	ldi	r19, 0xFF	; 255
 4b8:	0f ef       	ldi	r16, 0xFF	; 255
 4ba:	1f ef       	ldi	r17, 0xFF	; 255
 4bc:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
 4c0:	8f 2d       	mov	r24, r15
 4c2:	85 30       	cpi	r24, 0x05	; 5
 4c4:	d0 f4       	brcc	.+52     	; 0x4fa <level_test+0x74>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 4c6:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 4c8:	8f 2d       	mov	r24, r15
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	21 f7       	brne	.-56     	; 0x498 <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	18 c0       	rjmp	.+48     	; 0x504 <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 4d4:	83 30       	cpi	r24, 0x03	; 3
 4d6:	a9 f0       	breq	.+42     	; 0x502 <level_test+0x7c>
 4d8:	84 30       	cpi	r24, 0x04	; 4
 4da:	19 f7       	brne	.-58     	; 0x4a2 <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	0e 94 17 02 	call	0x42e	; 0x42e <level>
                transmit1(on,on,on,on,on);
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	6f ef       	ldi	r22, 0xFF	; 255
 4e8:	7f ef       	ldi	r23, 0xFF	; 255
 4ea:	4f ef       	ldi	r20, 0xFF	; 255
 4ec:	5f ef       	ldi	r21, 0xFF	; 255
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	3f ef       	ldi	r19, 0xFF	; 255
 4f2:	0f ef       	ldi	r16, 0xFF	; 255
 4f4:	1f ef       	ldi	r17, 0xFF	; 255
 4f6:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
                break;
        }
    }
}
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	0e 94 17 02 	call	0x42e	; 0x42e <level>
                transmit1(on,on,on,on,on);
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	9f ef       	ldi	r25, 0xFF	; 255
 50c:	6f ef       	ldi	r22, 0xFF	; 255
 50e:	7f ef       	ldi	r23, 0xFF	; 255
 510:	4f ef       	ldi	r20, 0xFF	; 255
 512:	5f ef       	ldi	r21, 0xFF	; 255
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	3f ef       	ldi	r19, 0xFF	; 255
 518:	0f ef       	ldi	r16, 0xFF	; 255
 51a:	1f ef       	ldi	r17, 0xFF	; 255
 51c:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 520:	f3 94       	inc	r15
 522:	d2 cf       	rjmp	.-92     	; 0x4c8 <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	ee cf       	rjmp	.-36     	; 0x504 <level_test+0x7e>

00000528 <shift_LED>:
        }
    }
}


void shift_LED(void){
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
 52e:	f0 90 3a 01 	lds	r15, 0x013A
 532:	8f 2d       	mov	r24, r15
 534:	0e 94 17 02 	call	0x42e	; 0x42e <level>
    //level(0);


    if(LED1 == 0)
 538:	00 91 05 01 	lds	r16, 0x0105
 53c:	10 91 06 01 	lds	r17, 0x0106
 540:	01 15       	cp	r16, r1
 542:	11 05       	cpc	r17, r1
 544:	e1 f4       	brne	.+56     	; 0x57e <shift_LED+0x56>
    {
        if(first2){
 546:	80 91 03 01 	lds	r24, 0x0103
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <shift_LED+0x28>
 54e:	4b c0       	rjmp	.+150    	; 0x5e6 <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
 550:	10 92 03 01 	sts	0x0103, r1
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	30 93 42 01 	sts	0x0142, r19
 560:	20 93 41 01 	sts	0x0141, r18
 564:	e0 91 3b 01 	lds	r30, 0x013B
 568:	f0 91 3c 01 	lds	r31, 0x013C
 56c:	60 91 3d 01 	lds	r22, 0x013D
 570:	70 91 3e 01 	lds	r23, 0x013E
 574:	40 91 3f 01 	lds	r20, 0x013F
 578:	50 91 40 01 	lds	r21, 0x0140
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
 57e:	80 91 04 01 	lds	r24, 0x0104
 582:	88 23       	and	r24, r24
 584:	09 f0       	breq	.+2      	; 0x588 <shift_LED+0x60>
 586:	7c c0       	rjmp	.+248    	; 0x680 <shift_LED+0x158>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
 588:	00 0f       	add	r16, r16
 58a:	11 1f       	adc	r17, r17
 58c:	10 93 06 01 	sts	0x0106, r17
 590:	00 93 05 01 	sts	0x0105, r16
 594:	e0 91 3b 01 	lds	r30, 0x013B
 598:	f0 91 3c 01 	lds	r31, 0x013C
 59c:	60 91 3d 01 	lds	r22, 0x013D
 5a0:	70 91 3e 01 	lds	r23, 0x013E
 5a4:	40 91 3f 01 	lds	r20, 0x013F
 5a8:	50 91 40 01 	lds	r21, 0x0140
 5ac:	20 91 41 01 	lds	r18, 0x0141
 5b0:	30 91 42 01 	lds	r19, 0x0142
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
 5b4:	cf 01       	movw	r24, r30
 5b6:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ba:	8f e7       	ldi	r24, 0x7F	; 127
 5bc:	98 e3       	ldi	r25, 0x38	; 56
 5be:	a1 e0       	ldi	r26, 0x01	; 1
 5c0:	81 50       	subi	r24, 0x01	; 1
 5c2:	90 40       	sbci	r25, 0x00	; 0
 5c4:	a0 40       	sbci	r26, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <shift_LED+0x98>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <shift_LED+0xa2>
 5ca:	00 00       	nop
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	94 e3       	ldi	r25, 0x34	; 52
 5d0:	ac e0       	ldi	r26, 0x0C	; 12
 5d2:	81 50       	subi	r24, 0x01	; 1
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	a0 40       	sbci	r26, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <shift_LED+0xaa>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <shift_LED+0xb4>
 5dc:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
 5e6:	20 91 41 01 	lds	r18, 0x0141
 5ea:	30 91 42 01 	lds	r19, 0x0142
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
 5ee:	21 15       	cp	r18, r1
 5f0:	31 05       	cpc	r19, r1
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <shift_LED+0xce>
 5f4:	b1 cf       	rjmp	.-158    	; 0x558 <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
 5f6:	80 91 02 01 	lds	r24, 0x0102
 5fa:	88 23       	and	r24, r24
 5fc:	09 f0       	breq	.+2      	; 0x600 <shift_LED+0xd8>
 5fe:	53 c0       	rjmp	.+166    	; 0x6a6 <shift_LED+0x17e>
 600:	40 91 3f 01 	lds	r20, 0x013F
 604:	50 91 40 01 	lds	r21, 0x0140
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
 608:	41 15       	cp	r20, r1
 60a:	51 05       	cpc	r21, r1
 60c:	09 f0       	breq	.+2      	; 0x610 <shift_LED+0xe8>
 60e:	4f c0       	rjmp	.+158    	; 0x6ae <shift_LED+0x186>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
 610:	80 91 01 01 	lds	r24, 0x0101
 614:	88 23       	and	r24, r24
 616:	09 f0       	breq	.+2      	; 0x61a <shift_LED+0xf2>
 618:	5b c0       	rjmp	.+182    	; 0x6d0 <shift_LED+0x1a8>
 61a:	00 91 3d 01 	lds	r16, 0x013D
 61e:	10 91 3e 01 	lds	r17, 0x013E
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
 622:	01 15       	cp	r16, r1
 624:	11 05       	cpc	r17, r1
 626:	09 f0       	breq	.+2      	; 0x62a <shift_LED+0x102>
 628:	57 c0       	rjmp	.+174    	; 0x6d8 <shift_LED+0x1b0>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
 62a:	80 91 00 01 	lds	r24, 0x0100
 62e:	88 23       	and	r24, r24
 630:	09 f0       	breq	.+2      	; 0x634 <shift_LED+0x10c>
 632:	62 c0       	rjmp	.+196    	; 0x6f8 <shift_LED+0x1d0>
 634:	e0 91 3b 01 	lds	r30, 0x013B
 638:	f0 91 3c 01 	lds	r31, 0x013C
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	09 f0       	breq	.+2      	; 0x642 <shift_LED+0x11a>
 640:	5f c0       	rjmp	.+190    	; 0x700 <shift_LED+0x1d8>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	30 93 06 01 	sts	0x0106, r19
 64a:	20 93 05 01 	sts	0x0105, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 00 01 	sts	0x0100, r24
 654:	80 93 01 01 	sts	0x0101, r24
 658:	80 93 02 01 	sts	0x0102, r24
 65c:	80 93 03 01 	sts	0x0103, r24
 660:	80 93 04 01 	sts	0x0104, r24
                        layer++;
 664:	8f 2d       	mov	r24, r15
 666:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
 668:	65 e0       	ldi	r22, 0x05	; 5
 66a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodqi4>
 66e:	90 93 3a 01 	sts	0x013A, r25
 672:	9f 01       	movw	r18, r30
 674:	af 01       	movw	r20, r30
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	01 e0       	ldi	r16, 0x01	; 1
 67c:	10 e0       	ldi	r17, 0x00	; 0
 67e:	9a cf       	rjmp	.-204    	; 0x5b4 <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
 680:	10 92 04 01 	sts	0x0104, r1
 684:	e0 91 3b 01 	lds	r30, 0x013B
 688:	f0 91 3c 01 	lds	r31, 0x013C
 68c:	60 91 3d 01 	lds	r22, 0x013D
 690:	70 91 3e 01 	lds	r23, 0x013E
 694:	40 91 3f 01 	lds	r20, 0x013F
 698:	50 91 40 01 	lds	r21, 0x0140
 69c:	20 91 41 01 	lds	r18, 0x0141
 6a0:	30 91 42 01 	lds	r19, 0x0142
 6a4:	87 cf       	rjmp	.-242    	; 0x5b4 <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
 6a6:	10 92 02 01 	sts	0x0102, r1
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
 6ae:	44 0f       	add	r20, r20
 6b0:	55 1f       	adc	r21, r21
 6b2:	50 93 40 01 	sts	0x0140, r21
 6b6:	40 93 3f 01 	sts	0x013F, r20
 6ba:	e0 91 3b 01 	lds	r30, 0x013B
 6be:	f0 91 3c 01 	lds	r31, 0x013C
 6c2:	60 91 3d 01 	lds	r22, 0x013D
 6c6:	70 91 3e 01 	lds	r23, 0x013E
 6ca:	00 e0       	ldi	r16, 0x00	; 0
 6cc:	10 e0       	ldi	r17, 0x00	; 0
 6ce:	72 cf       	rjmp	.-284    	; 0x5b4 <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
 6d0:	10 92 01 01 	sts	0x0101, r1
 6d4:	01 e0       	ldi	r16, 0x01	; 1
 6d6:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
 6d8:	b8 01       	movw	r22, r16
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	70 93 3e 01 	sts	0x013E, r23
 6e2:	60 93 3d 01 	sts	0x013D, r22
 6e6:	e0 91 3b 01 	lds	r30, 0x013B
 6ea:	f0 91 3c 01 	lds	r31, 0x013C
 6ee:	00 e0       	ldi	r16, 0x00	; 0
 6f0:	10 e0       	ldi	r17, 0x00	; 0
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	5e cf       	rjmp	.-324    	; 0x5b4 <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
 6f8:	10 92 00 01 	sts	0x0100, r1
 6fc:	e1 e0       	ldi	r30, 0x01	; 1
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	f0 93 3c 01 	sts	0x013C, r31
 708:	e0 93 3b 01 	sts	0x013B, r30
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	4d cf       	rjmp	.-358    	; 0x5b4 <shift_LED+0x8c>

0000071a <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
 71e:	83 b1       	in	r24, 0x03	; 3
 720:	80 95       	com	r24
 722:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	d1 f0       	breq	.+52     	; 0x75c <hall_test+0x42>
 728:	83 30       	cpi	r24, 0x03	; 3
 72a:	40 f5       	brcc	.+80     	; 0x77c <hall_test+0x62>
 72c:	88 23       	and	r24, r24
 72e:	81 f1       	breq	.+96     	; 0x790 <hall_test+0x76>
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	61 f1       	breq	.+88     	; 0x78c <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	0e 94 17 02 	call	0x42e	; 0x42e <level>
                transmit1(C1P2,0,0,0,0);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	00 e0       	ldi	r16, 0x00	; 0
 74c:	10 e0       	ldi	r17, 0x00	; 0
 74e:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
 752:	83 b1       	in	r24, 0x03	; 3
 754:	80 95       	com	r24
 756:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 758:	82 30       	cpi	r24, 0x02	; 2
 75a:	31 f7       	brne	.-52     	; 0x728 <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
 75c:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
 75e:	0e 94 17 02 	call	0x42e	; 0x42e <level>
                transmit1(0,0,C1P3,C1P2,0);
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	51 e0       	ldi	r21, 0x01	; 1
 76e:	20 e0       	ldi	r18, 0x00	; 0
 770:	32 e0       	ldi	r19, 0x02	; 2
 772:	00 e0       	ldi	r16, 0x00	; 0
 774:	10 e0       	ldi	r17, 0x00	; 0
 776:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
                break;
 77a:	d1 cf       	rjmp	.-94     	; 0x71e <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 77c:	84 30       	cpi	r24, 0x04	; 4
 77e:	21 f0       	breq	.+8      	; 0x788 <hall_test+0x6e>
 780:	88 30       	cpi	r24, 0x08	; 8
 782:	c1 f6       	brne	.-80     	; 0x734 <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
 784:	84 e0       	ldi	r24, 0x04	; 4
 786:	eb cf       	rjmp	.-42     	; 0x75e <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	e9 cf       	rjmp	.-46     	; 0x75e <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	e7 cf       	rjmp	.-50     	; 0x75e <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	e5 cf       	rjmp	.-54     	; 0x75e <hall_test+0x44>

00000794 <red_led>:

}
}


void red_led(uint8_t layer,uint32_t red){
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	8c 01       	movw	r16, r24
 7a6:	00 0f       	add	r16, r16
 7a8:	11 1f       	adc	r17, r17
 7aa:	00 0f       	add	r16, r16
 7ac:	11 1f       	adc	r17, r17
 7ae:	08 0f       	add	r16, r24
 7b0:	19 1f       	adc	r17, r25
 7b2:	00 0f       	add	r16, r16
 7b4:	11 1f       	adc	r17, r17
 7b6:	08 5f       	subi	r16, 0xF8	; 248
 7b8:	1e 4f       	sbci	r17, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
 7ba:	db 01       	movw	r26, r22
 7bc:	ca 01       	movw	r24, r20
 7be:	02 2e       	mov	r0, r18
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <red_led+0x36>
 7c2:	b6 95       	lsr	r27
 7c4:	a7 95       	ror	r26
 7c6:	97 95       	ror	r25
 7c8:	87 95       	ror	r24
 7ca:	0a 94       	dec	r0
 7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <red_led+0x2e>
        if(state){
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	1a c0       	rjmp	.+52     	; 0x806 <red_led+0x72>

}
}


void red_led(uint8_t layer,uint32_t red){
 7d2:	f9 01       	movw	r30, r18
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	ee 0f       	add	r30, r30
 7da:	ff 1f       	adc	r31, r31
 7dc:	e2 0f       	add	r30, r18
 7de:	f3 1f       	adc	r31, r19
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	e0 5b       	subi	r30, 0xB0	; 176
 7e6:	ff 4f       	sbci	r31, 0xFF	; 255
 7e8:	d8 01       	movw	r26, r16
 7ea:	ff 24       	eor	r15, r15
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= R[index][i];
 7ec:	c1 91       	ld	r28, Z+
 7ee:	d1 91       	ld	r29, Z+
 7f0:	8d 91       	ld	r24, X+
 7f2:	9c 91       	ld	r25, X
 7f4:	11 97       	sbiw	r26, 0x01	; 1
 7f6:	8c 2b       	or	r24, r28
 7f8:	9d 2b       	or	r25, r29
 7fa:	8d 93       	st	X+, r24
 7fc:	9d 93       	st	X+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
 7fe:	f3 94       	inc	r15
 800:	8f 2d       	mov	r24, r15
 802:	85 30       	cpi	r24, 0x05	; 5
 804:	99 f7       	brne	.-26     	; 0x7ec <red_led+0x58>
 806:	2f 5f       	subi	r18, 0xFF	; 255
 808:	3f 4f       	sbci	r19, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 80a:	29 31       	cpi	r18, 0x19	; 25
 80c:	31 05       	cpc	r19, r1
 80e:	a9 f6       	brne	.-86     	; 0x7ba <red_led+0x26>
            }
        }
    }
    
//
}
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	ff 90       	pop	r15
 81a:	08 95       	ret

0000081c <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
 81c:	ff 92       	push	r15
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	8c 01       	movw	r16, r24
 82e:	00 0f       	add	r16, r16
 830:	11 1f       	adc	r17, r17
 832:	00 0f       	add	r16, r16
 834:	11 1f       	adc	r17, r17
 836:	08 0f       	add	r16, r24
 838:	19 1f       	adc	r17, r25
 83a:	00 0f       	add	r16, r16
 83c:	11 1f       	adc	r17, r17
 83e:	08 5f       	subi	r16, 0xF8	; 248
 840:	1e 4f       	sbci	r17, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
 842:	db 01       	movw	r26, r22
 844:	ca 01       	movw	r24, r20
 846:	02 2e       	mov	r0, r18
 848:	04 c0       	rjmp	.+8      	; 0x852 <blue_led+0x36>
 84a:	b6 95       	lsr	r27
 84c:	a7 95       	ror	r26
 84e:	97 95       	ror	r25
 850:	87 95       	ror	r24
 852:	0a 94       	dec	r0
 854:	d2 f7       	brpl	.-12     	; 0x84a <blue_led+0x2e>
        if(state){
 856:	80 ff       	sbrs	r24, 0
 858:	1a c0       	rjmp	.+52     	; 0x88e <blue_led+0x72>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
 85a:	f9 01       	movw	r30, r18
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	e2 0f       	add	r30, r18
 866:	f3 1f       	adc	r31, r19
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	ec 5b       	subi	r30, 0xBC	; 188
 86e:	fd 4f       	sbci	r31, 0xFD	; 253
 870:	d8 01       	movw	r26, r16
 872:	ff 24       	eor	r15, r15
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= B[index][i];
 874:	c1 91       	ld	r28, Z+
 876:	d1 91       	ld	r29, Z+
 878:	8d 91       	ld	r24, X+
 87a:	9c 91       	ld	r25, X
 87c:	11 97       	sbiw	r26, 0x01	; 1
 87e:	8c 2b       	or	r24, r28
 880:	9d 2b       	or	r25, r29
 882:	8d 93       	st	X+, r24
 884:	9d 93       	st	X+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
 886:	f3 94       	inc	r15
 888:	8f 2d       	mov	r24, r15
 88a:	85 30       	cpi	r24, 0x05	; 5
 88c:	99 f7       	brne	.-26     	; 0x874 <blue_led+0x58>
 88e:	2f 5f       	subi	r18, 0xFF	; 255
 890:	3f 4f       	sbci	r19, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 892:	29 31       	cpi	r18, 0x19	; 25
 894:	31 05       	cpc	r19, r1
 896:	a9 f6       	brne	.-86     	; 0x842 <blue_led+0x26>
                frame[layer][i] |= B[index][i];
            }
        }
    }
//
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	08 95       	ret

000008a4 <green_led>:

void green_led(uint8_t layer,uint32_t green){
 8a4:	ff 92       	push	r15
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	20 e0       	ldi	r18, 0x00	; 0
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	8c 01       	movw	r16, r24
 8b6:	00 0f       	add	r16, r16
 8b8:	11 1f       	adc	r17, r17
 8ba:	00 0f       	add	r16, r16
 8bc:	11 1f       	adc	r17, r17
 8be:	08 0f       	add	r16, r24
 8c0:	19 1f       	adc	r17, r25
 8c2:	00 0f       	add	r16, r16
 8c4:	11 1f       	adc	r17, r17
 8c6:	08 5f       	subi	r16, 0xF8	; 248
 8c8:	1e 4f       	sbci	r17, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
 8ca:	db 01       	movw	r26, r22
 8cc:	ca 01       	movw	r24, r20
 8ce:	02 2e       	mov	r0, r18
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <green_led+0x36>
 8d2:	b6 95       	lsr	r27
 8d4:	a7 95       	ror	r26
 8d6:	97 95       	ror	r25
 8d8:	87 95       	ror	r24
 8da:	0a 94       	dec	r0
 8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <green_led+0x2e>
        if(state){
 8de:	80 ff       	sbrs	r24, 0
 8e0:	1a c0       	rjmp	.+52     	; 0x916 <green_led+0x72>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
 8e2:	f9 01       	movw	r30, r18
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	e2 0f       	add	r30, r18
 8ee:	f3 1f       	adc	r31, r19
 8f0:	ee 0f       	add	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	e6 5b       	subi	r30, 0xB6	; 182
 8f6:	fe 4f       	sbci	r31, 0xFE	; 254
 8f8:	d8 01       	movw	r26, r16
 8fa:	ff 24       	eor	r15, r15
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= G[index][i];
 8fc:	c1 91       	ld	r28, Z+
 8fe:	d1 91       	ld	r29, Z+
 900:	8d 91       	ld	r24, X+
 902:	9c 91       	ld	r25, X
 904:	11 97       	sbiw	r26, 0x01	; 1
 906:	8c 2b       	or	r24, r28
 908:	9d 2b       	or	r25, r29
 90a:	8d 93       	st	X+, r24
 90c:	9d 93       	st	X+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
 90e:	f3 94       	inc	r15
 910:	8f 2d       	mov	r24, r15
 912:	85 30       	cpi	r24, 0x05	; 5
 914:	99 f7       	brne	.-26     	; 0x8fc <green_led+0x58>
 916:	2f 5f       	subi	r18, 0xFF	; 255
 918:	3f 4f       	sbci	r19, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 91a:	29 31       	cpi	r18, 0x19	; 25
 91c:	31 05       	cpc	r19, r1
 91e:	a9 f6       	brne	.-86     	; 0x8ca <green_led+0x26>
                frame[layer][i] |= G[index][i];
            }
        }
    }
//
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	ff 90       	pop	r15
 92a:	08 95       	ret

0000092c <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
 92c:	6f 92       	push	r6
 92e:	7f 92       	push	r7
 930:	8f 92       	push	r8
 932:	9f 92       	push	r9
 934:	bf 92       	push	r11
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	b8 2e       	mov	r11, r24
 944:	38 01       	movw	r6, r16
 946:	49 01       	movw	r8, r18
    red_led(layer,red);
 948:	0e 94 ca 03 	call	0x794	; 0x794 <red_led>
    blue_led(layer,blue);
 94c:	8b 2d       	mov	r24, r11
 94e:	b4 01       	movw	r22, r8
 950:	a3 01       	movw	r20, r6
 952:	0e 94 0e 04 	call	0x81c	; 0x81c <blue_led>
    green_led(layer,green);
 956:	8b 2d       	mov	r24, r11
 958:	b7 01       	movw	r22, r14
 95a:	a6 01       	movw	r20, r12
 95c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <green_led>
}
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	df 90       	pop	r13
 96a:	cf 90       	pop	r12
 96c:	bf 90       	pop	r11
 96e:	9f 90       	pop	r9
 970:	8f 90       	pop	r8
 972:	7f 90       	pop	r7
 974:	6f 90       	pop	r6
 976:	08 95       	ret

00000978 <test_frame>:

void test_frame(){
 978:	ff 92       	push	r15
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
    uint8_t i = 0;
    for(i=0;i<5;i++){
 982:	c8 e0       	ldi	r28, 0x08	; 8
 984:	d1 e0       	ldi	r29, 0x01	; 1
 986:	ff 24       	eor	r15, r15
        transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
 988:	6e 81       	ldd	r22, Y+6	; 0x06
 98a:	7f 81       	ldd	r23, Y+7	; 0x07
 98c:	4c 81       	ldd	r20, Y+4	; 0x04
 98e:	5d 81       	ldd	r21, Y+5	; 0x05
 990:	2a 81       	ldd	r18, Y+2	; 0x02
 992:	3b 81       	ldd	r19, Y+3	; 0x03
 994:	08 81       	ld	r16, Y
 996:	19 81       	ldd	r17, Y+1	; 0x01
 998:	88 85       	ldd	r24, Y+8	; 0x08
 99a:	99 85       	ldd	r25, Y+9	; 0x09
 99c:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
        level(i);
 9a0:	8f 2d       	mov	r24, r15
 9a2:	0e 94 17 02 	call	0x42e	; 0x42e <level>
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	94 e3       	ldi	r25, 0x34	; 52
 9aa:	ac e0       	ldi	r26, 0x0C	; 12
 9ac:	81 50       	subi	r24, 0x01	; 1
 9ae:	90 40       	sbci	r25, 0x00	; 0
 9b0:	a0 40       	sbci	r26, 0x00	; 0
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <test_frame+0x34>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <test_frame+0x3e>
 9b6:	00 00       	nop
 9b8:	af e6       	ldi	r26, 0x6F	; 111
 9ba:	b7 e1       	ldi	r27, 0x17	; 23
 9bc:	11 97       	sbiw	r26, 0x01	; 1
 9be:	f1 f7       	brne	.-4      	; 0x9bc <test_frame+0x44>
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <test_frame+0x4a>
 9c2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9c4:	87 e5       	ldi	r24, 0x57	; 87
 9c6:	92 e0       	ldi	r25, 0x02	; 2
 9c8:	01 97       	sbiw	r24, 0x01	; 1
 9ca:	f1 f7       	brne	.-4      	; 0x9c8 <test_frame+0x50>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <test_frame+0x56>
 9ce:	00 00       	nop
    green_led(layer,green);
}

void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
 9d0:	f3 94       	inc	r15
 9d2:	2a 96       	adiw	r28, 0x0a	; 10
 9d4:	9f 2d       	mov	r25, r15
 9d6:	95 30       	cpi	r25, 0x05	; 5
 9d8:	b9 f6       	brne	.-82     	; 0x988 <test_frame+0x10>
        level(i);
        _delay_ms(500);
        _delay_ms(3);
        _delay_us(300);
    }
}
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	ff 90       	pop	r15
 9e4:	08 95       	ret

000009e6 <main>:

/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){
 9e6:	ef 92       	push	r14
 9e8:	ff 92       	push	r15
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 9f2:	84 b1       	in	r24, 0x04	; 4
 9f4:	80 67       	ori	r24, 0x70	; 112
 9f6:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
 9f8:	85 b1       	in	r24, 0x05	; 5
 9fa:	8f 60       	ori	r24, 0x0F	; 15
 9fc:	85 b9       	out	0x05, r24	; 5
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 9fe:	81 b1       	in	r24, 0x01	; 1
 a00:	80 67       	ori	r24, 0x70	; 112
 a02:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 a04:	8c b5       	in	r24, 0x2c	; 44
 a06:	81 65       	ori	r24, 0x51	; 81
 a08:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 a0a:	8d b5       	in	r24, 0x2d	; 45
 a0c:	81 60       	ori	r24, 0x01	; 1
 a0e:	8d bd       	out	0x2d, r24	; 45

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
	spi_init();    //initalize SPI port
    uint8_t input = 0;
    uint8_t i = 9;
 a10:	09 e0       	ldi	r16, 0x09	; 9
        //test_frame();
        //level(i);
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        level(4);
        transmit1(pgm_read_byte(&(G[i][4])),pgm_read_byte(&(G[i][3])),pgm_read_byte(&(G[i][2])),pgm_read_byte(&(G[i][1])),pgm_read_byte(&(G[i][0])));
        i = (i+1) % 25;
 a12:	b9 e1       	ldi	r27, 0x19	; 25
 a14:	eb 2e       	mov	r14, r27
 a16:	f1 2c       	mov	r15, r1
	while(1){

        //test_frame();
        //level(i);
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        level(4);
 a18:	84 e0       	ldi	r24, 0x04	; 4
 a1a:	0e 94 17 02 	call	0x42e	; 0x42e <level>
        transmit1(pgm_read_byte(&(G[i][4])),pgm_read_byte(&(G[i][3])),pgm_read_byte(&(G[i][2])),pgm_read_byte(&(G[i][1])),pgm_read_byte(&(G[i][0])));
 a1e:	c0 2f       	mov	r28, r16
 a20:	d0 e0       	ldi	r29, 0x00	; 0
 a22:	8e 01       	movw	r16, r28
 a24:	00 0f       	add	r16, r16
 a26:	11 1f       	adc	r17, r17
 a28:	00 0f       	add	r16, r16
 a2a:	11 1f       	adc	r17, r17
 a2c:	0c 0f       	add	r16, r28
 a2e:	1d 1f       	adc	r17, r29
 a30:	00 0f       	add	r16, r16
 a32:	11 1f       	adc	r17, r17
 a34:	f8 01       	movw	r30, r16
 a36:	ee 5a       	subi	r30, 0xAE	; 174
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	84 91       	lpm	r24, Z+
 a3c:	f8 01       	movw	r30, r16
 a3e:	e0 5b       	subi	r30, 0xB0	; 176
 a40:	fe 4f       	sbci	r31, 0xFE	; 254
 a42:	64 91       	lpm	r22, Z+
 a44:	f8 01       	movw	r30, r16
 a46:	e2 5b       	subi	r30, 0xB2	; 178
 a48:	fe 4f       	sbci	r31, 0xFE	; 254
 a4a:	44 91       	lpm	r20, Z+
 a4c:	f8 01       	movw	r30, r16
 a4e:	e4 5b       	subi	r30, 0xB4	; 180
 a50:	fe 4f       	sbci	r31, 0xFE	; 254
 a52:	24 91       	lpm	r18, Z+
 a54:	06 5b       	subi	r16, 0xB6	; 182
 a56:	1e 4f       	sbci	r17, 0xFE	; 254
 a58:	f8 01       	movw	r30, r16
 a5a:	04 91       	lpm	r16, Z+
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	10 e0       	ldi	r17, 0x00	; 0
 a66:	0e 94 c8 01 	call	0x390	; 0x390 <transmit1>
        i = (i+1) % 25;
 a6a:	ce 01       	movw	r24, r28
 a6c:	01 96       	adiw	r24, 0x01	; 1
 a6e:	b7 01       	movw	r22, r14
 a70:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divmodhi4>
 a74:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a76:	8f ef       	ldi	r24, 0xFF	; 255
 a78:	94 e3       	ldi	r25, 0x34	; 52
 a7a:	ac e0       	ldi	r26, 0x0C	; 12
 a7c:	81 50       	subi	r24, 0x01	; 1
 a7e:	90 40       	sbci	r25, 0x00	; 0
 a80:	a0 40       	sbci	r26, 0x00	; 0
 a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x96>
 a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0xa0>
 a86:	00 00       	nop
 a88:	c7 cf       	rjmp	.-114    	; 0xa18 <main+0x32>

00000a8a <__udivmodqi4>:
 a8a:	99 1b       	sub	r25, r25
 a8c:	79 e0       	ldi	r23, 0x09	; 9
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__udivmodqi4_ep>

00000a90 <__udivmodqi4_loop>:
 a90:	99 1f       	adc	r25, r25
 a92:	96 17       	cp	r25, r22
 a94:	08 f0       	brcs	.+2      	; 0xa98 <__udivmodqi4_ep>
 a96:	96 1b       	sub	r25, r22

00000a98 <__udivmodqi4_ep>:
 a98:	88 1f       	adc	r24, r24
 a9a:	7a 95       	dec	r23
 a9c:	c9 f7       	brne	.-14     	; 0xa90 <__udivmodqi4_loop>
 a9e:	80 95       	com	r24
 aa0:	08 95       	ret

00000aa2 <__divmodhi4>:
 aa2:	97 fb       	bst	r25, 7
 aa4:	09 2e       	mov	r0, r25
 aa6:	07 26       	eor	r0, r23
 aa8:	0a d0       	rcall	.+20     	; 0xabe <__divmodhi4_neg1>
 aaa:	77 fd       	sbrc	r23, 7
 aac:	04 d0       	rcall	.+8      	; 0xab6 <__divmodhi4_neg2>
 aae:	0c d0       	rcall	.+24     	; 0xac8 <__udivmodhi4>
 ab0:	06 d0       	rcall	.+12     	; 0xabe <__divmodhi4_neg1>
 ab2:	00 20       	and	r0, r0
 ab4:	1a f4       	brpl	.+6      	; 0xabc <__divmodhi4_exit>

00000ab6 <__divmodhi4_neg2>:
 ab6:	70 95       	com	r23
 ab8:	61 95       	neg	r22
 aba:	7f 4f       	sbci	r23, 0xFF	; 255

00000abc <__divmodhi4_exit>:
 abc:	08 95       	ret

00000abe <__divmodhi4_neg1>:
 abe:	f6 f7       	brtc	.-4      	; 0xabc <__divmodhi4_exit>
 ac0:	90 95       	com	r25
 ac2:	81 95       	neg	r24
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__udivmodhi4>:
 ac8:	aa 1b       	sub	r26, r26
 aca:	bb 1b       	sub	r27, r27
 acc:	51 e1       	ldi	r21, 0x11	; 17
 ace:	07 c0       	rjmp	.+14     	; 0xade <__udivmodhi4_ep>

00000ad0 <__udivmodhi4_loop>:
 ad0:	aa 1f       	adc	r26, r26
 ad2:	bb 1f       	adc	r27, r27
 ad4:	a6 17       	cp	r26, r22
 ad6:	b7 07       	cpc	r27, r23
 ad8:	10 f0       	brcs	.+4      	; 0xade <__udivmodhi4_ep>
 ada:	a6 1b       	sub	r26, r22
 adc:	b7 0b       	sbc	r27, r23

00000ade <__udivmodhi4_ep>:
 ade:	88 1f       	adc	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	5a 95       	dec	r21
 ae4:	a9 f7       	brne	.-22     	; 0xad0 <__udivmodhi4_loop>
 ae6:	80 95       	com	r24
 ae8:	90 95       	com	r25
 aea:	bc 01       	movw	r22, r24
 aec:	cd 01       	movw	r24, r26
 aee:	08 95       	ret

00000af0 <_exit>:
 af0:	f8 94       	cli

00000af2 <__stop_program>:
 af2:	ff cf       	rjmp	.-2      	; 0xaf2 <__stop_program>
