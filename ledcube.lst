
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f6  00800100  00000678  0000070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  008003f6  008003f6  00000a02  2**0
                  ALLOC
  3 .stab         000015b4  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009e5  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	13 e0       	ldi	r17, 0x03	; 3
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e8 e7       	ldi	r30, 0x78	; 120
  64:	f6 e0       	ldi	r31, 0x06	; 6
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a6 3f       	cpi	r26, 0xF6	; 246
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	14 e0       	ldi	r17, 0x04	; 4
  74:	a6 ef       	ldi	r26, 0xF6	; 246
  76:	b3 e0       	ldi	r27, 0x03	; 3
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 33       	cpi	r26, 0x31	; 49
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 1c 03 	call	0x638	; 0x638 <main>
  86:	0c 94 3a 03 	jmp	0x674	; 0x674 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  8e:	81 b1       	in	r24, 0x01	; 1
  90:	80 67       	ori	r24, 0x70	; 112
  92:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	81 65       	ori	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  9a:	8d b5       	in	r24, 0x2d	; 45
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bd       	out	0x2d, r24	; 45

}//spi_init
  a0:	08 95       	ret

000000a2 <transmit1>:
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
  a6:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
  ae:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b0:	0d b4       	in	r0, 0x2d	; 45
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
  b6:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
  be:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
  c6:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
  ce:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
  d6:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
  de:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
  e6:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
  ee:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <transmit1+0x4e>

	//Toggle latch
	PORTA |= (1<<SS);
  f6:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
  f8:	16 98       	cbi	0x02, 6	; 2
}
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <transmit2>:

void transmit2(uint8_t layer){
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e8 0f       	add	r30, r24
 10e:	f9 1f       	adc	r31, r25
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ea 50       	subi	r30, 0x0A	; 10
 116:	fc 4f       	sbci	r31, 0xFC	; 252
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	df 01       	movw	r26, r30
	//break the data up into 4 bytes
	
	uint8_t temp = 0;
    uint8_t i = 0;
    for(i=0;i<5;i++){
        temp = (frame[layer][i]);
 11c:	90 81       	ld	r25, Z
        //load first byte
        SPDR = temp;
 11e:	9e bd       	out	0x2e, r25	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
 120:	0d b4       	in	r0, 0x2d	; 45
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <transmit2+0x20>
 126:	32 96       	adiw	r30, 0x02	; 2

        temp = (frame[layer][i]>>8);
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	9c 91       	ld	r25, X
 12c:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
 12e:	9e bd       	out	0x2e, r25	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
 130:	0d b4       	in	r0, 0x2d	; 45
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <transmit2+0x30>
 136:	81 50       	subi	r24, 0x01	; 1
void transmit2(uint8_t layer){
	//break the data up into 4 bytes
	
	uint8_t temp = 0;
    uint8_t i = 0;
    for(i=0;i<5;i++){
 138:	81 f7       	brne	.-32     	; 0x11a <transmit2+0x1a>
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
    }

	//Toggle latch
	PORTA |= (1<<SS);
 13a:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
 13c:	16 98       	cbi	0x02, 6	; 2
}
 13e:	08 95       	ret

00000140 <level>:

void level(uint8_t layer){
    switch(layer){
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	f9 f0       	breq	.+62     	; 0x182 <level+0x42>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	40 f0       	brcs	.+16     	; 0x158 <level+0x18>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	09 f1       	breq	.+66     	; 0x18e <level+0x4e>
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	91 f0       	breq	.+36     	; 0x174 <level+0x34>
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 67       	ori	r24, 0x70	; 112
 154:	85 b9       	out	0x05, r24	; 5
 156:	08 95       	ret
	PORTA |= (1<<SS);
	PORTA &= ~(1<<SS);
}

void level(uint8_t layer){
    switch(layer){
 158:	88 23       	and	r24, r24
 15a:	39 f0       	breq	.+14     	; 0x16a <level+0x2a>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	c1 f7       	brne	.-16     	; 0x150 <level+0x10>
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8f 78       	andi	r24, 0x8F	; 143
 164:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
 166:	2c 9a       	sbi	0x05, 4	; 5
            return;
 168:	08 95       	ret
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	8f 78       	andi	r24, 0x8F	; 143
 16e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
 170:	2d 9a       	sbi	0x05, 5	; 5
            return;
 172:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8f 78       	andi	r24, 0x8F	; 143
 178:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	80 63       	ori	r24, 0x30	; 48
 17e:	85 b9       	out	0x05, r24	; 5
            return;
 180:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8f 78       	andi	r24, 0x8F	; 143
 186:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	85 b9       	out	0x05, r24	; 5
            return;
 18c:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8f 78       	andi	r24, 0x8F	; 143
 192:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
 194:	2e 9a       	sbi	0x05, 6	; 5
            return;
 196:	08 95       	ret

00000198 <level_test>:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	ff 24       	eor	r15, r15
 1a0:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 1a2:	8f 2d       	mov	r24, r15
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <level_test+0x4a>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	e0 f4       	brcc	.+56     	; 0x1e6 <level_test+0x4e>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <level_test+0x1c>
 1b2:	41 c0       	rjmp	.+130    	; 0x236 <level_test+0x9e>
            case 0:
                level(i);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 a0 00 	call	0x140	; 0x140 <level>
                transmit1(on,on,on,on,on);
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	9f ef       	ldi	r25, 0xFF	; 255
 1be:	6f ef       	ldi	r22, 0xFF	; 255
 1c0:	7f ef       	ldi	r23, 0xFF	; 255
 1c2:	4f ef       	ldi	r20, 0xFF	; 255
 1c4:	5f ef       	ldi	r21, 0xFF	; 255
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	3f ef       	ldi	r19, 0xFF	; 255
 1ca:	0f ef       	ldi	r16, 0xFF	; 255
 1cc:	1f ef       	ldi	r17, 0xFF	; 255
 1ce:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
 1d2:	8f 2d       	mov	r24, r15
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	d0 f4       	brcc	.+52     	; 0x20c <level_test+0x74>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 1d8:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 1da:	8f 2d       	mov	r24, r15
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	21 f7       	brne	.-56     	; 0x1aa <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	18 c0       	rjmp	.+48     	; 0x216 <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	a9 f0       	breq	.+42     	; 0x214 <level_test+0x7c>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	19 f7       	brne	.-58     	; 0x1b4 <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	0e 94 a0 00 	call	0x140	; 0x140 <level>
                transmit1(on,on,on,on,on);
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	6f ef       	ldi	r22, 0xFF	; 255
 1fa:	7f ef       	ldi	r23, 0xFF	; 255
 1fc:	4f ef       	ldi	r20, 0xFF	; 255
 1fe:	5f ef       	ldi	r21, 0xFF	; 255
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	3f ef       	ldi	r19, 0xFF	; 255
 204:	0f ef       	ldi	r16, 0xFF	; 255
 206:	1f ef       	ldi	r17, 0xFF	; 255
 208:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
                break;
        }
    }
}
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	0e 94 a0 00 	call	0x140	; 0x140 <level>
                transmit1(on,on,on,on,on);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	6f ef       	ldi	r22, 0xFF	; 255
 220:	7f ef       	ldi	r23, 0xFF	; 255
 222:	4f ef       	ldi	r20, 0xFF	; 255
 224:	5f ef       	ldi	r21, 0xFF	; 255
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	3f ef       	ldi	r19, 0xFF	; 255
 22a:	0f ef       	ldi	r16, 0xFF	; 255
 22c:	1f ef       	ldi	r17, 0xFF	; 255
 22e:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
 232:	f3 94       	inc	r15
 234:	d2 cf       	rjmp	.-92     	; 0x1da <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	ee cf       	rjmp	.-36     	; 0x216 <level_test+0x7e>

0000023a <shift_LED>:
        }
    }
}


void shift_LED(void){
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
 240:	f0 90 28 04 	lds	r15, 0x0428
 244:	8f 2d       	mov	r24, r15
 246:	0e 94 a0 00 	call	0x140	; 0x140 <level>
    //level(0);


    if(LED1 == 0)
 24a:	00 91 f3 03 	lds	r16, 0x03F3
 24e:	10 91 f4 03 	lds	r17, 0x03F4
 252:	01 15       	cp	r16, r1
 254:	11 05       	cpc	r17, r1
 256:	e1 f4       	brne	.+56     	; 0x290 <shift_LED+0x56>
    {
        if(first2){
 258:	80 91 f1 03 	lds	r24, 0x03F1
 25c:	88 23       	and	r24, r24
 25e:	09 f4       	brne	.+2      	; 0x262 <shift_LED+0x28>
 260:	4b c0       	rjmp	.+150    	; 0x2f8 <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
 262:	10 92 f1 03 	sts	0x03F1, r1
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	30 93 30 04 	sts	0x0430, r19
 272:	20 93 2f 04 	sts	0x042F, r18
 276:	e0 91 29 04 	lds	r30, 0x0429
 27a:	f0 91 2a 04 	lds	r31, 0x042A
 27e:	60 91 2b 04 	lds	r22, 0x042B
 282:	70 91 2c 04 	lds	r23, 0x042C
 286:	40 91 2d 04 	lds	r20, 0x042D
 28a:	50 91 2e 04 	lds	r21, 0x042E
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
 290:	80 91 f2 03 	lds	r24, 0x03F2
 294:	88 23       	and	r24, r24
 296:	09 f0       	breq	.+2      	; 0x29a <shift_LED+0x60>
 298:	7c c0       	rjmp	.+248    	; 0x392 <__stack+0x94>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
 29a:	00 0f       	add	r16, r16
 29c:	11 1f       	adc	r17, r17
 29e:	10 93 f4 03 	sts	0x03F4, r17
 2a2:	00 93 f3 03 	sts	0x03F3, r16
 2a6:	e0 91 29 04 	lds	r30, 0x0429
 2aa:	f0 91 2a 04 	lds	r31, 0x042A
 2ae:	60 91 2b 04 	lds	r22, 0x042B
 2b2:	70 91 2c 04 	lds	r23, 0x042C
 2b6:	40 91 2d 04 	lds	r20, 0x042D
 2ba:	50 91 2e 04 	lds	r21, 0x042E
 2be:	20 91 2f 04 	lds	r18, 0x042F
 2c2:	30 91 30 04 	lds	r19, 0x0430
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
 2c6:	cf 01       	movw	r24, r30
 2c8:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	8f e7       	ldi	r24, 0x7F	; 127
 2ce:	98 e3       	ldi	r25, 0x38	; 56
 2d0:	a1 e0       	ldi	r26, 0x01	; 1
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	a0 40       	sbci	r26, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <shift_LED+0x98>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <shift_LED+0xa2>
 2dc:	00 00       	nop
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	94 e3       	ldi	r25, 0x34	; 52
 2e2:	ac e0       	ldi	r26, 0x0C	; 12
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <shift_LED+0xaa>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <shift_LED+0xb4>
 2ee:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
 2f8:	20 91 2f 04 	lds	r18, 0x042F
 2fc:	30 91 30 04 	lds	r19, 0x0430
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
 300:	21 15       	cp	r18, r1
 302:	31 05       	cpc	r19, r1
 304:	09 f0       	breq	.+2      	; 0x308 <__stack+0xa>
 306:	b1 cf       	rjmp	.-158    	; 0x26a <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
 308:	80 91 f0 03 	lds	r24, 0x03F0
 30c:	88 23       	and	r24, r24
 30e:	09 f0       	breq	.+2      	; 0x312 <__stack+0x14>
 310:	53 c0       	rjmp	.+166    	; 0x3b8 <__stack+0xba>
 312:	40 91 2d 04 	lds	r20, 0x042D
 316:	50 91 2e 04 	lds	r21, 0x042E
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
 31a:	41 15       	cp	r20, r1
 31c:	51 05       	cpc	r21, r1
 31e:	09 f0       	breq	.+2      	; 0x322 <__stack+0x24>
 320:	4f c0       	rjmp	.+158    	; 0x3c0 <__stack+0xc2>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
 322:	80 91 ef 03 	lds	r24, 0x03EF
 326:	88 23       	and	r24, r24
 328:	09 f0       	breq	.+2      	; 0x32c <__stack+0x2e>
 32a:	5b c0       	rjmp	.+182    	; 0x3e2 <__stack+0xe4>
 32c:	00 91 2b 04 	lds	r16, 0x042B
 330:	10 91 2c 04 	lds	r17, 0x042C
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
 334:	01 15       	cp	r16, r1
 336:	11 05       	cpc	r17, r1
 338:	09 f0       	breq	.+2      	; 0x33c <__stack+0x3e>
 33a:	57 c0       	rjmp	.+174    	; 0x3ea <__stack+0xec>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
 33c:	80 91 ee 03 	lds	r24, 0x03EE
 340:	88 23       	and	r24, r24
 342:	09 f0       	breq	.+2      	; 0x346 <__stack+0x48>
 344:	62 c0       	rjmp	.+196    	; 0x40a <__stack+0x10c>
 346:	e0 91 29 04 	lds	r30, 0x0429
 34a:	f0 91 2a 04 	lds	r31, 0x042A
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
 34e:	30 97       	sbiw	r30, 0x00	; 0
 350:	09 f0       	breq	.+2      	; 0x354 <__stack+0x56>
 352:	5f c0       	rjmp	.+190    	; 0x412 <__stack+0x114>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	30 93 f4 03 	sts	0x03F4, r19
 35c:	20 93 f3 03 	sts	0x03F3, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 ee 03 	sts	0x03EE, r24
 366:	80 93 ef 03 	sts	0x03EF, r24
 36a:	80 93 f0 03 	sts	0x03F0, r24
 36e:	80 93 f1 03 	sts	0x03F1, r24
 372:	80 93 f2 03 	sts	0x03F2, r24
                        layer++;
 376:	8f 2d       	mov	r24, r15
 378:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodqi4>
 380:	90 93 28 04 	sts	0x0428, r25
 384:	9f 01       	movw	r18, r30
 386:	af 01       	movw	r20, r30
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	01 e0       	ldi	r16, 0x01	; 1
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	9a cf       	rjmp	.-204    	; 0x2c6 <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
 392:	10 92 f2 03 	sts	0x03F2, r1
 396:	e0 91 29 04 	lds	r30, 0x0429
 39a:	f0 91 2a 04 	lds	r31, 0x042A
 39e:	60 91 2b 04 	lds	r22, 0x042B
 3a2:	70 91 2c 04 	lds	r23, 0x042C
 3a6:	40 91 2d 04 	lds	r20, 0x042D
 3aa:	50 91 2e 04 	lds	r21, 0x042E
 3ae:	20 91 2f 04 	lds	r18, 0x042F
 3b2:	30 91 30 04 	lds	r19, 0x0430
 3b6:	87 cf       	rjmp	.-242    	; 0x2c6 <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
 3b8:	10 92 f0 03 	sts	0x03F0, r1
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	50 93 2e 04 	sts	0x042E, r21
 3c8:	40 93 2d 04 	sts	0x042D, r20
 3cc:	e0 91 29 04 	lds	r30, 0x0429
 3d0:	f0 91 2a 04 	lds	r31, 0x042A
 3d4:	60 91 2b 04 	lds	r22, 0x042B
 3d8:	70 91 2c 04 	lds	r23, 0x042C
 3dc:	00 e0       	ldi	r16, 0x00	; 0
 3de:	10 e0       	ldi	r17, 0x00	; 0
 3e0:	72 cf       	rjmp	.-284    	; 0x2c6 <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
 3e2:	10 92 ef 03 	sts	0x03EF, r1
 3e6:	01 e0       	ldi	r16, 0x01	; 1
 3e8:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
 3ea:	b8 01       	movw	r22, r16
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	70 93 2c 04 	sts	0x042C, r23
 3f4:	60 93 2b 04 	sts	0x042B, r22
 3f8:	e0 91 29 04 	lds	r30, 0x0429
 3fc:	f0 91 2a 04 	lds	r31, 0x042A
 400:	00 e0       	ldi	r16, 0x00	; 0
 402:	10 e0       	ldi	r17, 0x00	; 0
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	5e cf       	rjmp	.-324    	; 0x2c6 <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
 40a:	10 92 ee 03 	sts	0x03EE, r1
 40e:	e1 e0       	ldi	r30, 0x01	; 1
 410:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	f0 93 2a 04 	sts	0x042A, r31
 41a:	e0 93 29 04 	sts	0x0429, r30
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	4d cf       	rjmp	.-358    	; 0x2c6 <shift_LED+0x8c>

0000042c <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
 430:	83 b1       	in	r24, 0x03	; 3
 432:	80 95       	com	r24
 434:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	d1 f0       	breq	.+52     	; 0x46e <hall_test+0x42>
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	40 f5       	brcc	.+80     	; 0x48e <hall_test+0x62>
 43e:	88 23       	and	r24, r24
 440:	81 f1       	breq	.+96     	; 0x4a2 <hall_test+0x76>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	61 f1       	breq	.+88     	; 0x49e <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 a0 00 	call	0x140	; 0x140 <level>
                transmit1(C1P2,0,0,0,0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	00 e0       	ldi	r16, 0x00	; 0
 45e:	10 e0       	ldi	r17, 0x00	; 0
 460:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
 464:	83 b1       	in	r24, 0x03	; 3
 466:	80 95       	com	r24
 468:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	31 f7       	brne	.-52     	; 0x43a <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
 46e:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
 470:	0e 94 a0 00 	call	0x140	; 0x140 <level>
                transmit1(0,0,C1P3,C1P2,0);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	51 e0       	ldi	r21, 0x01	; 1
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	32 e0       	ldi	r19, 0x02	; 2
 484:	00 e0       	ldi	r16, 0x00	; 0
 486:	10 e0       	ldi	r17, 0x00	; 0
 488:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
                break;
 48c:	d1 cf       	rjmp	.-94     	; 0x430 <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
 48e:	84 30       	cpi	r24, 0x04	; 4
 490:	21 f0       	breq	.+8      	; 0x49a <hall_test+0x6e>
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	c1 f6       	brne	.-80     	; 0x446 <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	eb cf       	rjmp	.-42     	; 0x470 <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	e9 cf       	rjmp	.-46     	; 0x470 <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	e7 cf       	rjmp	.-50     	; 0x470 <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	e5 cf       	rjmp	.-54     	; 0x470 <hall_test+0x44>

000004a6 <red_led>:

}
}


void red_led(uint8_t layer,uint32_t red){
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(1));
 4ae:	db 01       	movw	r26, r22
 4b0:	ca 01       	movw	r24, r20
 4b2:	02 2e       	mov	r0, r18
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <red_led+0x18>
 4b6:	b6 95       	lsr	r27
 4b8:	a7 95       	ror	r26
 4ba:	97 95       	ror	r25
 4bc:	87 95       	ror	r24
 4be:	0a 94       	dec	r0
 4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <red_led+0x10>
        if(state){
 4c2:	80 ff       	sbrs	r24, 0
 4c4:	19 c0       	rjmp	.+50     	; 0x4f8 <red_led+0x52>

}
}


void red_led(uint8_t layer,uint32_t red){
 4c6:	d9 01       	movw	r26, r18
 4c8:	aa 0f       	add	r26, r26
 4ca:	bb 1f       	adc	r27, r27
 4cc:	aa 0f       	add	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	a2 0f       	add	r26, r18
 4d2:	b3 1f       	adc	r27, r19
 4d4:	aa 0f       	add	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	a0 50       	subi	r26, 0x00	; 0
 4da:	bf 4f       	sbci	r27, 0xFF	; 255
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(1));
        if(state){
 4dc:	e6 ef       	ldi	r30, 0xF6	; 246
 4de:	f3 e0       	ldi	r31, 0x03	; 3
            for(i=0;i<5;i++){
                frame[0][i] |= R[index][i];
 4e0:	cd 91       	ld	r28, X+
 4e2:	dd 91       	ld	r29, X+
 4e4:	80 81       	ld	r24, Z
 4e6:	91 81       	ldd	r25, Z+1	; 0x01
 4e8:	8c 2b       	or	r24, r28
 4ea:	9d 2b       	or	r25, r29
 4ec:	81 93       	st	Z+, r24
 4ee:	91 93       	st	Z+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	e0 30       	cpi	r30, 0x00	; 0
 4f4:	f8 07       	cpc	r31, r24
 4f6:	a1 f7       	brne	.-24     	; 0x4e0 <red_led+0x3a>
 4f8:	2f 5f       	subi	r18, 0xFF	; 255
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 4fc:	29 31       	cpi	r18, 0x19	; 25
 4fe:	31 05       	cpc	r19, r1
 500:	b1 f6       	brne	.-84     	; 0x4ae <red_led+0x8>
            }
        }
    }
    
//
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
 510:	db 01       	movw	r26, r22
 512:	ca 01       	movw	r24, r20
 514:	02 2e       	mov	r0, r18
 516:	04 c0       	rjmp	.+8      	; 0x520 <blue_led+0x18>
 518:	b6 95       	lsr	r27
 51a:	a7 95       	ror	r26
 51c:	97 95       	ror	r25
 51e:	87 95       	ror	r24
 520:	0a 94       	dec	r0
 522:	d2 f7       	brpl	.-12     	; 0x518 <blue_led+0x10>
        if(state){
 524:	80 ff       	sbrs	r24, 0
 526:	19 c0       	rjmp	.+50     	; 0x55a <blue_led+0x52>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
 528:	d9 01       	movw	r26, r18
 52a:	aa 0f       	add	r26, r26
 52c:	bb 1f       	adc	r27, r27
 52e:	aa 0f       	add	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	a2 0f       	add	r26, r18
 534:	b3 1f       	adc	r27, r19
 536:	aa 0f       	add	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	ac 50       	subi	r26, 0x0C	; 12
 53c:	bd 4f       	sbci	r27, 0xFD	; 253
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
 53e:	e6 ef       	ldi	r30, 0xF6	; 246
 540:	f3 e0       	ldi	r31, 0x03	; 3
            for(i=0;i<5;i++){
                frame[0][i] |= B[index][i];
 542:	cd 91       	ld	r28, X+
 544:	dd 91       	ld	r29, X+
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	8c 2b       	or	r24, r28
 54c:	9d 2b       	or	r25, r29
 54e:	81 93       	st	Z+, r24
 550:	91 93       	st	Z+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	e0 30       	cpi	r30, 0x00	; 0
 556:	f8 07       	cpc	r31, r24
 558:	a1 f7       	brne	.-24     	; 0x542 <blue_led+0x3a>
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 55e:	29 31       	cpi	r18, 0x19	; 25
 560:	31 05       	cpc	r19, r1
 562:	b1 f6       	brne	.-84     	; 0x510 <blue_led+0x8>
                frame[0][i] |= B[index][i];
            }
        }
    }
//
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <green_led>:

void green_led(uint8_t layer,uint32_t green){
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
 572:	db 01       	movw	r26, r22
 574:	ca 01       	movw	r24, r20
 576:	02 2e       	mov	r0, r18
 578:	04 c0       	rjmp	.+8      	; 0x582 <green_led+0x18>
 57a:	b6 95       	lsr	r27
 57c:	a7 95       	ror	r26
 57e:	97 95       	ror	r25
 580:	87 95       	ror	r24
 582:	0a 94       	dec	r0
 584:	d2 f7       	brpl	.-12     	; 0x57a <green_led+0x10>
        if(state){
 586:	80 ff       	sbrs	r24, 0
 588:	19 c0       	rjmp	.+50     	; 0x5bc <green_led+0x52>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
 58a:	d9 01       	movw	r26, r18
 58c:	aa 0f       	add	r26, r26
 58e:	bb 1f       	adc	r27, r27
 590:	aa 0f       	add	r26, r26
 592:	bb 1f       	adc	r27, r27
 594:	a2 0f       	add	r26, r18
 596:	b3 1f       	adc	r27, r19
 598:	aa 0f       	add	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	a6 50       	subi	r26, 0x06	; 6
 59e:	be 4f       	sbci	r27, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
 5a0:	e6 ef       	ldi	r30, 0xF6	; 246
 5a2:	f3 e0       	ldi	r31, 0x03	; 3
            for(i=0;i<5;i++){
                frame[0][i] |= G[index][i];
 5a4:	cd 91       	ld	r28, X+
 5a6:	dd 91       	ld	r29, X+
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	8c 2b       	or	r24, r28
 5ae:	9d 2b       	or	r25, r29
 5b0:	81 93       	st	Z+, r24
 5b2:	91 93       	st	Z+, r25
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	e0 30       	cpi	r30, 0x00	; 0
 5b8:	f8 07       	cpc	r31, r24
 5ba:	a1 f7       	brne	.-24     	; 0x5a4 <green_led+0x3a>
 5bc:	2f 5f       	subi	r18, 0xFF	; 255
 5be:	3f 4f       	sbci	r19, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
 5c0:	29 31       	cpi	r18, 0x19	; 25
 5c2:	31 05       	cpc	r19, r1
 5c4:	b1 f6       	brne	.-84     	; 0x572 <green_led+0x8>
                frame[0][i] |= G[index][i];
            }
        }
    }
//
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
 5cc:	6f 92       	push	r6
 5ce:	7f 92       	push	r7
 5d0:	8f 92       	push	r8
 5d2:	9f 92       	push	r9
 5d4:	bf 92       	push	r11
 5d6:	cf 92       	push	r12
 5d8:	df 92       	push	r13
 5da:	ef 92       	push	r14
 5dc:	ff 92       	push	r15
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	b8 2e       	mov	r11, r24
 5e4:	38 01       	movw	r6, r16
 5e6:	49 01       	movw	r8, r18
    red_led(layer,red);
 5e8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <red_led>
    blue_led(layer,blue);
 5ec:	8b 2d       	mov	r24, r11
 5ee:	b4 01       	movw	r22, r8
 5f0:	a3 01       	movw	r20, r6
 5f2:	0e 94 84 02 	call	0x508	; 0x508 <blue_led>
    green_led(layer,green);
 5f6:	8b 2d       	mov	r24, r11
 5f8:	b7 01       	movw	r22, r14
 5fa:	a6 01       	movw	r20, r12
 5fc:	0e 94 b5 02 	call	0x56a	; 0x56a <green_led>
}
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	df 90       	pop	r13
 60a:	cf 90       	pop	r12
 60c:	bf 90       	pop	r11
 60e:	9f 90       	pop	r9
 610:	8f 90       	pop	r8
 612:	7f 90       	pop	r7
 614:	6f 90       	pop	r6
 616:	08 95       	ret

00000618 <test_frame>:

void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
        transmit2(i);
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 80 00 	call	0x100	; 0x100 <transmit2>
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	0e 94 80 00 	call	0x100	; 0x100 <transmit2>
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	0e 94 80 00 	call	0x100	; 0x100 <transmit2>
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	0e 94 80 00 	call	0x100	; 0x100 <transmit2>
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	0e 94 80 00 	call	0x100	; 0x100 <transmit2>
    }
}
 636:	08 95       	ret

00000638 <main>:
/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 638:	84 b1       	in	r24, 0x04	; 4
 63a:	80 67       	ori	r24, 0x70	; 112
 63c:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
 63e:	85 b1       	in	r24, 0x05	; 5
 640:	8f 60       	ori	r24, 0x0F	; 15
 642:	85 b9       	out	0x05, r24	; 5
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 644:	81 b1       	in	r24, 0x01	; 1
 646:	80 67       	ori	r24, 0x70	; 112
 648:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 64a:	8c b5       	in	r24, 0x2c	; 44
 64c:	81 65       	ori	r24, 0x51	; 81
 64e:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 650:	8d b5       	in	r24, 0x2d	; 45
 652:	81 60       	ori	r24, 0x01	; 1
 654:	8d bd       	out	0x2d, r24	; 45
    
	while(1){

        //test_frame();
        //level_test();
        shift_LED();
 656:	0e 94 1d 01 	call	0x23a	; 0x23a <shift_LED>
 65a:	fd cf       	rjmp	.-6      	; 0x656 <main+0x1e>

0000065c <__udivmodqi4>:
 65c:	99 1b       	sub	r25, r25
 65e:	79 e0       	ldi	r23, 0x09	; 9
 660:	04 c0       	rjmp	.+8      	; 0x66a <__udivmodqi4_ep>

00000662 <__udivmodqi4_loop>:
 662:	99 1f       	adc	r25, r25
 664:	96 17       	cp	r25, r22
 666:	08 f0       	brcs	.+2      	; 0x66a <__udivmodqi4_ep>
 668:	96 1b       	sub	r25, r22

0000066a <__udivmodqi4_ep>:
 66a:	88 1f       	adc	r24, r24
 66c:	7a 95       	dec	r23
 66e:	c9 f7       	brne	.-14     	; 0x662 <__udivmodqi4_loop>
 670:	80 95       	com	r24
 672:	08 95       	ret

00000674 <_exit>:
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>
