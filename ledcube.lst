
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800108  00800108  0000056e  2**0
                  ALLOC
  3 .stab         000011c4  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d3  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e2 ed       	ldi	r30, 0xD2	; 210
  64:	f4 e0       	ldi	r31, 0x04	; 4
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a8 30       	cpi	r26, 0x08	; 8
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a8 e0       	ldi	r26, 0x08	; 8
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a0 31       	cpi	r26, 0x10	; 16
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  86:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
  8e:	81 b1       	in	r24, 0x01	; 1
  90:	80 67       	ori	r24, 0x70	; 112
  92:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	81 65       	ori	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
  9a:	8d b5       	in	r24, 0x2d	; 45
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8d bd       	out	0x2d, r24	; 45

}//spi_init
  a0:	08 95       	ret

000000a2 <transmit1>:
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
  a6:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
  ae:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b0:	0d b4       	in	r0, 0x2d	; 45
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
  b6:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
  be:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
  c6:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
  ce:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
  d6:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
  de:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
  e6:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
  ee:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <transmit1+0x4e>
    
	//Toggle latch
	PORTA |= (1<<SS);
  f6:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
  f8:	16 98       	cbi	0x02, 6	; 2
}
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <level>:

void level(uint8_t layer){
    switch(layer){
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	f1 f0       	breq	.+60     	; 0x140 <level+0x40>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	40 f0       	brcs	.+16     	; 0x118 <level+0x18>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	f9 f0       	breq	.+62     	; 0x14a <level+0x4a>
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	99 f0       	breq	.+38     	; 0x136 <level+0x36>
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
 110:	85 b1       	in	r24, 0x05	; 5
 112:	80 67       	ori	r24, 0x70	; 112
 114:	85 b9       	out	0x05, r24	; 5
 116:	08 95       	ret
	PORTA |= (1<<SS);
	PORTA &= ~(1<<SS);
}

void level(uint8_t layer){
    switch(layer){
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <level+0x2a>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	c1 f7       	brne	.-16     	; 0x110 <level+0x10>
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8f 78       	andi	r24, 0x8F	; 143
 124:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
 126:	2c 9a       	sbi	0x05, 4	; 5
            return;
 128:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 78       	andi	r24, 0x8F	; 143
 12e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
 130:	85 b1       	in	r24, 0x05	; 5
 132:	85 b9       	out	0x05, r24	; 5
            return;
 134:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 78       	andi	r24, 0x8F	; 143
 13a:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
 13c:	2e 9a       	sbi	0x05, 6	; 5
            return;
 13e:	08 95       	ret
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8f 78       	andi	r24, 0x8F	; 143
 144:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
 146:	2d 9a       	sbi	0x05, 5	; 5
            return;
 148:	08 95       	ret
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 78       	andi	r24, 0x8F	; 143
 14e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 63       	ori	r24, 0x30	; 48
 154:	85 b9       	out	0x05, r24	; 5
            return;
 156:	08 95       	ret

00000158 <patrick_test>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void patrick_test(void){
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
    uint16_t data2 = 0x00FF;
    uint16_t data3 = 0x00FF;
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;

    transmit1(data1,data2,data3,data4,data5);
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	0f ef       	ldi	r16, 0xFF	; 255
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
}
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <level_test>:

void level_test(void){
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	ff 24       	eor	r15, r15
 182:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 184:	8f 2d       	mov	r24, r15
 186:	81 50       	subi	r24, 0x01	; 1
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	29 f1       	breq	.+74     	; 0x1d6 <level_test+0x5c>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	98 f5       	brcc	.+102    	; 0x1f6 <level_test+0x7c>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	09 f4       	brne	.+2      	; 0x196 <level_test+0x1c>
 194:	6a c0       	rjmp	.+212    	; 0x26a <level_test+0xf0>
            case 0:
                level(i);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 80 00 	call	0x100	; 0x100 <level>
                transmit1(on,off,off,off,off);
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	94 e3       	ldi	r25, 0x34	; 52
 1b8:	ac e0       	ldi	r26, 0x0C	; 12
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	a0 40       	sbci	r26, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <level_test+0x40>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <level_test+0x4a>
 1c4:	00 00       	nop
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
 1c6:	9f 2d       	mov	r25, r15
 1c8:	95 30       	cpi	r25, 0x05	; 5
 1ca:	88 f5       	brcc	.+98     	; 0x22e <level_test+0xb4>
    uint16_t data5 = 0x00FF;

    transmit1(data1,data2,data3,data4,data5);
}

void level_test(void){
 1cc:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 1ce:	8f 2d       	mov	r24, r15
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	d9 f6       	brne	.-74     	; 0x18c <level_test+0x12>
            case 1:
                level(i);
                transmit1(off,on,off,off,off);
                break;
            case 2:
                level(i);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 80 00 	call	0x100	; 0x100 <level>
                transmit1(off,off,on,off,off);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	4f ef       	ldi	r20, 0xFF	; 255
 1e6:	5f ef       	ldi	r21, 0xFF	; 255
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
                break;
 1f4:	2f c0       	rjmp	.+94     	; 0x254 <level_test+0xda>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	f1 f0       	breq	.+60     	; 0x236 <level_test+0xbc>
 1fa:	84 30       	cpi	r24, 0x04	; 4
 1fc:	61 f6       	brne	.-104    	; 0x196 <level_test+0x1c>
            case 3:
                level(i);
                transmit1(off,off,off,on,off);
                break;
            case 4:
                level(i);
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	0e 94 80 00 	call	0x100	; 0x100 <level>
                transmit1(off,off,off,off,on);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	0f ef       	ldi	r16, 0xFF	; 255
 216:	1f ef       	ldi	r17, 0xFF	; 255
 218:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	94 e3       	ldi	r25, 0x34	; 52
 220:	ac e0       	ldi	r26, 0x0C	; 12
 222:	81 50       	subi	r24, 0x01	; 1
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	a0 40       	sbci	r26, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <level_test+0xa8>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <level_test+0xb2>
 22c:	00 00       	nop
    transmit1(data1,data2,data3,data4,data5);
    level(layer);
    _delay_ms(500);
    _delay_ms(500);
    */
}
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	08 95       	ret
            case 2:
                level(i);
                transmit1(off,off,on,off,off);
                break;
            case 3:
                level(i);
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 80 00 	call	0x100	; 0x100 <level>
                transmit1(off,off,off,on,off);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	3f ef       	ldi	r19, 0xFF	; 255
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	94 e3       	ldi	r25, 0x34	; 52
 258:	ac e0       	ldi	r26, 0x0C	; 12
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	a0 40       	sbci	r26, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <level_test+0xe0>
 262:	00 c0       	rjmp	.+0      	; 0x264 <level_test+0xea>
 264:	00 00       	nop
    uint16_t data5 = 0x00FF;

    transmit1(data1,data2,data3,data4,data5);
}

void level_test(void){
 266:	f3 94       	inc	r15
 268:	b2 cf       	rjmp	.-156    	; 0x1ce <level_test+0x54>
            case 0:
                level(i);
                transmit1(on,off,off,off,off);
                break;
            case 1:
                level(i);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 80 00 	call	0x100	; 0x100 <level>
                transmit1(off,on,off,off,off);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	6f ef       	ldi	r22, 0xFF	; 255
 276:	7f ef       	ldi	r23, 0xFF	; 255
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	00 e0       	ldi	r16, 0x00	; 0
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
                break;
 288:	e5 cf       	rjmp	.-54     	; 0x254 <level_test+0xda>

0000028a <on>:
    _delay_ms(500);
    _delay_ms(500);
    */
}

void on(void){
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
    uint16_t output5 = -1;

    transmit1(-1,-1,-1,-1,-1);
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	6f ef       	ldi	r22, 0xFF	; 255
 294:	7f ef       	ldi	r23, 0xFF	; 255
 296:	4f ef       	ldi	r20, 0xFF	; 255
 298:	5f ef       	ldi	r21, 0xFF	; 255
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	3f ef       	ldi	r19, 0xFF	; 255
 29e:	0f ef       	ldi	r16, 0xFF	; 255
 2a0:	1f ef       	ldi	r17, 0xFF	; 255
 2a2:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
	}
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <off>:

void off(void){
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
    uint16_t output2 = 0;
    uint16_t output3 = 0;
    uint16_t output4 = 0;
    uint16_t output5 = 0;

    transmit1(output,output2,output3,output4,output5);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	00 e0       	ldi	r16, 0x00	; 0
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
}
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <shift_LED>:

void shift_LED(void){
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
    static uint8_t first2 = 1;
    static uint8_t first3 = 1;
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    level(3);
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	0e 94 80 00 	call	0x100	; 0x100 <level>

    if(LED1 == 0)
 2d8:	00 91 05 01 	lds	r16, 0x0105
 2dc:	10 91 06 01 	lds	r17, 0x0106
 2e0:	01 15       	cp	r16, r1
 2e2:	11 05       	cpc	r17, r1
 2e4:	e1 f4       	brne	.+56     	; 0x31e <__stack+0x20>
    {
        if(first2){
 2e6:	80 91 03 01 	lds	r24, 0x0103
 2ea:	88 23       	and	r24, r24
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <shift_LED+0x22>
 2ee:	40 c0       	rjmp	.+128    	; 0x370 <__stack+0x72>
            LED2 = 0x0001;
            first2 = 0;
 2f0:	10 92 03 01 	sts	0x0103, r1
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	30 93 0f 01 	sts	0x010F, r19
 300:	20 93 0e 01 	sts	0x010E, r18
 304:	80 91 08 01 	lds	r24, 0x0108
 308:	90 91 09 01 	lds	r25, 0x0109
 30c:	60 91 0a 01 	lds	r22, 0x010A
 310:	70 91 0b 01 	lds	r23, 0x010B
 314:	40 91 0c 01 	lds	r20, 0x010C
 318:	50 91 0d 01 	lds	r21, 0x010D
 31c:	1b c0       	rjmp	.+54     	; 0x354 <__stack+0x56>
            }
        }
    }
    else
    {
        if(first1){
 31e:	80 91 04 01 	lds	r24, 0x0104
 322:	88 23       	and	r24, r24
 324:	09 f0       	breq	.+2      	; 0x328 <__stack+0x2a>
 326:	6b c0       	rjmp	.+214    	; 0x3fe <__stack+0x100>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
 328:	00 0f       	add	r16, r16
 32a:	11 1f       	adc	r17, r17
 32c:	10 93 06 01 	sts	0x0106, r17
 330:	00 93 05 01 	sts	0x0105, r16
 334:	80 91 08 01 	lds	r24, 0x0108
 338:	90 91 09 01 	lds	r25, 0x0109
 33c:	60 91 0a 01 	lds	r22, 0x010A
 340:	70 91 0b 01 	lds	r23, 0x010B
 344:	40 91 0c 01 	lds	r20, 0x010C
 348:	50 91 0d 01 	lds	r21, 0x010D
 34c:	20 91 0e 01 	lds	r18, 0x010E
 350:	30 91 0f 01 	lds	r19, 0x010F
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
 354:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	90 e7       	ldi	r25, 0x70	; 112
 35c:	a2 e0       	ldi	r26, 0x02	; 2
 35e:	81 50       	subi	r24, 0x01	; 1
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	a0 40       	sbci	r26, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <__stack+0x60>
 366:	00 c0       	rjmp	.+0      	; 0x368 <__stack+0x6a>
 368:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(100);
    //_delay_ms(500);
    }
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

    level(3);

    if(LED1 == 0)
    {
        if(first2){
 370:	20 91 0e 01 	lds	r18, 0x010E
 374:	30 91 0f 01 	lds	r19, 0x010F
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
 378:	21 15       	cp	r18, r1
 37a:	31 05       	cpc	r19, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <__stack+0x82>
 37e:	bc cf       	rjmp	.-136    	; 0x2f8 <shift_LED+0x2a>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
 380:	80 91 02 01 	lds	r24, 0x0102
 384:	88 23       	and	r24, r24
 386:	09 f0       	breq	.+2      	; 0x38a <__stack+0x8c>
 388:	4d c0       	rjmp	.+154    	; 0x424 <__stack+0x126>
 38a:	40 91 0c 01 	lds	r20, 0x010C
 38e:	50 91 0d 01 	lds	r21, 0x010D
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
 392:	41 15       	cp	r20, r1
 394:	51 05       	cpc	r21, r1
 396:	09 f0       	breq	.+2      	; 0x39a <__stack+0x9c>
 398:	49 c0       	rjmp	.+146    	; 0x42c <__stack+0x12e>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
 39a:	80 91 01 01 	lds	r24, 0x0101
 39e:	88 23       	and	r24, r24
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <__stack+0xa6>
 3a2:	55 c0       	rjmp	.+170    	; 0x44e <__stack+0x150>
 3a4:	60 91 0a 01 	lds	r22, 0x010A
 3a8:	70 91 0b 01 	lds	r23, 0x010B
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
 3ac:	61 15       	cp	r22, r1
 3ae:	71 05       	cpc	r23, r1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__stack+0xb6>
 3b2:	51 c0       	rjmp	.+162    	; 0x456 <__stack+0x158>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
 3b4:	80 91 00 01 	lds	r24, 0x0100
 3b8:	88 23       	and	r24, r24
 3ba:	09 f0       	breq	.+2      	; 0x3be <__stack+0xc0>
 3bc:	5b c0       	rjmp	.+182    	; 0x474 <__stack+0x176>
 3be:	40 91 08 01 	lds	r20, 0x0108
 3c2:	50 91 09 01 	lds	r21, 0x0109
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
 3c6:	41 15       	cp	r20, r1
 3c8:	51 05       	cpc	r21, r1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__stack+0xd0>
 3cc:	57 c0       	rjmp	.+174    	; 0x47c <__stack+0x17e>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 06 01 	sts	0x0106, r25
 3d6:	80 93 05 01 	sts	0x0105, r24
                        first1 = first2 = first3 = first4 = first5 = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 00 01 	sts	0x0100, r24
 3e0:	80 93 01 01 	sts	0x0101, r24
 3e4:	80 93 02 01 	sts	0x0102, r24
 3e8:	80 93 03 01 	sts	0x0103, r24
 3ec:	80 93 04 01 	sts	0x0104, r24
 3f0:	9a 01       	movw	r18, r20
 3f2:	ba 01       	movw	r22, r20
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	01 e0       	ldi	r16, 0x01	; 1
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	ab cf       	rjmp	.-170    	; 0x354 <__stack+0x56>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
 3fe:	10 92 04 01 	sts	0x0104, r1
 402:	80 91 08 01 	lds	r24, 0x0108
 406:	90 91 09 01 	lds	r25, 0x0109
 40a:	60 91 0a 01 	lds	r22, 0x010A
 40e:	70 91 0b 01 	lds	r23, 0x010B
 412:	40 91 0c 01 	lds	r20, 0x010C
 416:	50 91 0d 01 	lds	r21, 0x010D
 41a:	20 91 0e 01 	lds	r18, 0x010E
 41e:	30 91 0f 01 	lds	r19, 0x010F
 422:	98 cf       	rjmp	.-208    	; 0x354 <__stack+0x56>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
 424:	10 92 02 01 	sts	0x0102, r1
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	50 93 0d 01 	sts	0x010D, r21
 434:	40 93 0c 01 	sts	0x010C, r20
 438:	80 91 08 01 	lds	r24, 0x0108
 43c:	90 91 09 01 	lds	r25, 0x0109
 440:	60 91 0a 01 	lds	r22, 0x010A
 444:	70 91 0b 01 	lds	r23, 0x010B
 448:	00 e0       	ldi	r16, 0x00	; 0
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	83 cf       	rjmp	.-250    	; 0x354 <__stack+0x56>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
 44e:	10 92 01 01 	sts	0x0101, r1
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	70 e0       	ldi	r23, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	70 93 0b 01 	sts	0x010B, r23
 45e:	60 93 0a 01 	sts	0x010A, r22
 462:	80 91 08 01 	lds	r24, 0x0108
 466:	90 91 09 01 	lds	r25, 0x0109
 46a:	00 e0       	ldi	r16, 0x00	; 0
 46c:	10 e0       	ldi	r17, 0x00	; 0
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	70 cf       	rjmp	.-288    	; 0x354 <__stack+0x56>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
 474:	10 92 00 01 	sts	0x0100, r1
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	50 e0       	ldi	r21, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
 47c:	ca 01       	movw	r24, r20
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	90 93 09 01 	sts	0x0109, r25
 486:	80 93 08 01 	sts	0x0108, r24
 48a:	00 e0       	ldi	r16, 0x00	; 0
 48c:	10 e0       	ldi	r17, 0x00	; 0
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	5e cf       	rjmp	.-324    	; 0x354 <__stack+0x56>

00000498 <main>:


/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 49c:	84 b1       	in	r24, 0x04	; 4
 49e:	80 67       	ori	r24, 0x70	; 112
 4a0:	84 b9       	out	0x04, r24	; 4
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 4a2:	81 b1       	in	r24, 0x01	; 1
 4a4:	80 67       	ori	r24, 0x70	; 112
 4a6:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 4a8:	8c b5       	in	r24, 0x2c	; 44
 4aa:	81 65       	ori	r24, 0x51	; 81
 4ac:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 4ae:	8d b5       	in	r24, 0x2d	; 45
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	8d bd       	out	0x2d, r24	; 45
    uint8_t input = 0;
	while(1){
       // patrick_test();
        //level_test();
        //shift_LED();
        transmit1(0,0,0,0,0x0001);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	01 e0       	ldi	r16, 0x01	; 1
 4c6:	10 e0       	ldi	r17, 0x00	; 0
 4c8:	0e 94 51 00 	call	0xa2	; 0xa2 <transmit1>
 4cc:	f3 cf       	rjmp	.-26     	; 0x4b4 <main+0x1c>

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
