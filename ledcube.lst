
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800108  00800108  0000117a  2**0
                  ALLOC
  3 .stab         00001c80  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c5d  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__ctors_end>
       4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
       8:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
       c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      10:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      18:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      20:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      24:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      28:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      2c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      30:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      34:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      38:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      3c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      44:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      48:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>
      4c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__bad_interrupt>

00000050 <R>:
      50:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      68:	00 01 00 00 00 00 00 00 00 00 18 00 00 00 00 00     ................
      78:	00 00 00 00 18 00 00 00 00 00 00 00 10 00 00 00     ................
      88:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
      98:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
      b0:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
      cc:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
      dc:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
      ec:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
      fc:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     10c:	40 00 00 00 00 00 00 00 00 00 02 00 18 00 00 00     @...............
     11c:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     134:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     144:	00 00 00 00 00 40                                   .....@

0000014a <G>:
     14a:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     162:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     172:	00 00 00 00 02 00 00 00 00 00 00 00 18 00 00 00     ................
     182:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     1aa:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     1c6:	00 00 18 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     1d6:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     1e6:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     1f6:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     206:	20 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00      ...............
     216:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     22e:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     23e:	00 00 00 00 00 80                                   ......

00000244 <B>:
     244:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     25c:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     26c:	00 00 00 00 01 00 00 00 00 00 00 00 18 00 00 00     ................
     27c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     2a4:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     2c0:	00 00 18 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     2d0:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     2e0:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     2f0:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     300:	10 00 00 00 00 00 00 00 00 00 18 00 02 00 00 00     ................
     310:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     328:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     338:	00 00 00 00 01 00                                   ......

0000033e <__ctors_end>:
     33e:	11 24       	eor	r1, r1
     340:	1f be       	out	0x3f, r1	; 63
     342:	ce ef       	ldi	r28, 0xFE	; 254
     344:	d2 e0       	ldi	r29, 0x02	; 2
     346:	de bf       	out	0x3e, r29	; 62
     348:	cd bf       	out	0x3d, r28	; 61

0000034a <__do_copy_data>:
     34a:	11 e0       	ldi	r17, 0x01	; 1
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b1 e0       	ldi	r27, 0x01	; 1
     350:	ee ed       	ldi	r30, 0xDE	; 222
     352:	f0 e1       	ldi	r31, 0x10	; 16
     354:	02 c0       	rjmp	.+4      	; 0x35a <__do_copy_data+0x10>
     356:	05 90       	lpm	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	a8 30       	cpi	r26, 0x08	; 8
     35c:	b1 07       	cpc	r27, r17
     35e:	d9 f7       	brne	.-10     	; 0x356 <__do_copy_data+0xc>

00000360 <__do_clear_bss>:
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	a8 e0       	ldi	r26, 0x08	; 8
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	01 c0       	rjmp	.+2      	; 0x36a <.do_clear_bss_start>

00000368 <.do_clear_bss_loop>:
     368:	1d 92       	st	X+, r1

0000036a <.do_clear_bss_start>:
     36a:	a4 34       	cpi	r26, 0x44	; 68
     36c:	b1 07       	cpc	r27, r17
     36e:	e1 f7       	brne	.-8      	; 0x368 <.do_clear_bss_loop>
     370:	0e 94 4f 08 	call	0x109e	; 0x109e <main>
     374:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

00000378 <__bad_interrupt>:
     378:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000037c <level>:
    _delay_ms(3);
    //_delay_us(300);
}

void level(uint8_t layer){
    switch(layer){
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	f9 f0       	breq	.+62     	; 0x3be <level+0x42>
     380:	83 30       	cpi	r24, 0x03	; 3
     382:	40 f0       	brcs	.+16     	; 0x394 <level+0x18>
     384:	83 30       	cpi	r24, 0x03	; 3
     386:	09 f1       	breq	.+66     	; 0x3ca <level+0x4e>
     388:	84 30       	cpi	r24, 0x04	; 4
     38a:	91 f0       	breq	.+36     	; 0x3b0 <level+0x34>
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     38c:	85 b1       	in	r24, 0x05	; 5
     38e:	80 67       	ori	r24, 0x70	; 112
     390:	85 b9       	out	0x05, r24	; 5
     392:	08 95       	ret
    _delay_ms(3);
    //_delay_us(300);
}

void level(uint8_t layer){
    switch(layer){
     394:	88 23       	and	r24, r24
     396:	39 f0       	breq	.+14     	; 0x3a6 <level+0x2a>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	c1 f7       	brne	.-16     	; 0x38c <level+0x10>
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     39c:	85 b1       	in	r24, 0x05	; 5
     39e:	8f 78       	andi	r24, 0x8F	; 143
     3a0:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     3a2:	2c 9a       	sbi	0x05, 4	; 5
            return;
     3a4:	08 95       	ret
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3a6:	85 b1       	in	r24, 0x05	; 5
     3a8:	8f 78       	andi	r24, 0x8F	; 143
     3aa:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     3ac:	2d 9a       	sbi	0x05, 5	; 5
            return;
     3ae:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3b0:	85 b1       	in	r24, 0x05	; 5
     3b2:	8f 78       	andi	r24, 0x8F	; 143
     3b4:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     3b6:	85 b1       	in	r24, 0x05	; 5
     3b8:	80 63       	ori	r24, 0x30	; 48
     3ba:	85 b9       	out	0x05, r24	; 5
            return;
     3bc:	08 95       	ret
}

void level(uint8_t layer){
    switch(layer){
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3be:	85 b1       	in	r24, 0x05	; 5
     3c0:	8f 78       	andi	r24, 0x8F	; 143
     3c2:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     3c4:	85 b1       	in	r24, 0x05	; 5
     3c6:	85 b9       	out	0x05, r24	; 5
            return;
     3c8:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     3ca:	85 b1       	in	r24, 0x05	; 5
     3cc:	8f 78       	andi	r24, 0x8F	; 143
     3ce:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     3d0:	2e 9a       	sbi	0x05, 6	; 5
            return;
     3d2:	08 95       	ret

000003d4 <initialize_interrupts>:

uint16_t frame[5][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}; //5 layers and 5 led drivers
uint8_t next = 0;

void initialize_interrupts(void){
    TIMSK1 = (1<<TOIE1);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	80 93 6f 00 	sts	0x006F, r24
    }
     3da:	08 95       	ret

000003dc <spi_init>:
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	80 67       	ori	r24, 0x70	; 112
     3e0:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
     3e2:	8c b5       	in	r24, 0x2c	; 44
     3e4:	80 65       	ori	r24, 0x50	; 80
     3e6:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
     3e8:	8d b5       	in	r24, 0x2d	; 45
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	8d bd       	out	0x2d, r24	; 45

}//spi_init
     3ee:	08 95       	ret

000003f0 <transmit1>:
	TIMSK  |=  (1<<TOIE0);  //enable timer/counter0 overflow interrupt
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
     3f4:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     3f6:	0d b4       	in	r0, 0x2d	; 45
     3f8:	07 fe       	sbrs	r0, 7
     3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
     3fc:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     3fe:	0d b4       	in	r0, 0x2d	; 45
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
     404:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     406:	0d b4       	in	r0, 0x2d	; 45
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
     40c:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     40e:	0d b4       	in	r0, 0x2d	; 45
     410:	07 fe       	sbrs	r0, 7
     412:	fd cf       	rjmp	.-6      	; 0x40e <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
     414:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     416:	0d b4       	in	r0, 0x2d	; 45
     418:	07 fe       	sbrs	r0, 7
     41a:	fd cf       	rjmp	.-6      	; 0x416 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
     41c:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     41e:	0d b4       	in	r0, 0x2d	; 45
     420:	07 fe       	sbrs	r0, 7
     422:	fd cf       	rjmp	.-6      	; 0x41e <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
     424:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     426:	0d b4       	in	r0, 0x2d	; 45
     428:	07 fe       	sbrs	r0, 7
     42a:	fd cf       	rjmp	.-6      	; 0x426 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
     42c:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     42e:	0d b4       	in	r0, 0x2d	; 45
     430:	07 fe       	sbrs	r0, 7
     432:	fd cf       	rjmp	.-6      	; 0x42e <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
     434:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     436:	0d b4       	in	r0, 0x2d	; 45
     438:	07 fe       	sbrs	r0, 7
     43a:	fd cf       	rjmp	.-6      	; 0x436 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
     43c:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     43e:	0d b4       	in	r0, 0x2d	; 45
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <transmit1+0x4e>

	//Toggle latch
	PORTA |= (1<<SS);
     444:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     446:	16 98       	cbi	0x02, 6	; 2
}
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <transmit2>:

void transmit2(uint8_t layer){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
     452:	c8 2f       	mov	r28, r24
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	ce 01       	movw	r24, r28
     458:	0e 94 be 01 	call	0x37c	; 0x37c <level>
    for(i=5;i-- > 0; ){
     45c:	24 e0       	ldi	r18, 0x04	; 4
     45e:	ce 01       	movw	r24, r28
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
        temp = (frame[layer][i]);
     468:	8c 0f       	add	r24, r28
     46a:	9d 1f       	adc	r25, r29
     46c:	e2 2f       	mov	r30, r18
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	dc 01       	movw	r26, r24
     472:	ae 0f       	add	r26, r30
     474:	bf 1f       	adc	r27, r31
     476:	aa 0f       	add	r26, r26
     478:	bb 1f       	adc	r27, r27
     47a:	a8 5f       	subi	r26, 0xF8	; 248
     47c:	be 4f       	sbci	r27, 0xFE	; 254
     47e:	3c 91       	ld	r19, X
        //load first byte
        SPDR = temp;
     480:	3e bd       	out	0x2e, r19	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <transmit2+0x34>

        temp = (frame[layer][i]>>8);
     488:	dc 01       	movw	r26, r24
     48a:	ae 0f       	add	r26, r30
     48c:	bf 1f       	adc	r27, r31
     48e:	aa 0f       	add	r26, r26
     490:	bb 1f       	adc	r27, r27
     492:	a8 5f       	subi	r26, 0xF8	; 248
     494:	be 4f       	sbci	r27, 0xFE	; 254
     496:	11 96       	adiw	r26, 0x01	; 1
     498:	3c 91       	ld	r19, X
     49a:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
     49c:	3e bd       	out	0x2e, r19	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     49e:	0d b4       	in	r0, 0x2d	; 45
     4a0:	07 fe       	sbrs	r0, 7
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <transmit2+0x50>
        frame[layer][i] = 0;
     4a4:	e8 0f       	add	r30, r24
     4a6:	f9 1f       	adc	r31, r25
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	e8 5f       	subi	r30, 0xF8	; 248
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	11 82       	std	Z+1, r1	; 0x01
     4b2:	10 82       	st	Z, r1

void transmit2(uint8_t layer){
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
    for(i=5;i-- > 0; ){
     4b4:	22 23       	and	r18, r18
     4b6:	11 f0       	breq	.+4      	; 0x4bc <transmit2+0x6e>
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	d8 cf       	rjmp	.-80     	; 0x46c <transmit2+0x1e>
        while(bit_is_clear(SPSR,SPIF)){};
        frame[layer][i] = 0;
    }

	//Toggle latch
	PORTA |= (1<<SS);
     4bc:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     4be:	16 98       	cbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	8f e6       	ldi	r24, 0x6F	; 111
     4c2:	97 e1       	ldi	r25, 0x17	; 23
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <transmit2+0x76>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <transmit2+0x7c>
     4ca:	00 00       	nop
    _delay_ms(3);
    //_delay_us(300);
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <level_test>:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	ff 24       	eor	r15, r15
     4da:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     4dc:	8f 2d       	mov	r24, r15
     4de:	81 50       	subi	r24, 0x01	; 1
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	e1 f0       	breq	.+56     	; 0x51c <level_test+0x4a>
     4e4:	83 30       	cpi	r24, 0x03	; 3
     4e6:	e0 f4       	brcc	.+56     	; 0x520 <level_test+0x4e>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <level_test+0x1c>
     4ec:	41 c0       	rjmp	.+130    	; 0x570 <level_test+0x9e>
            case 0:
                level(i);
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 be 01 	call	0x37c	; 0x37c <level>
                transmit1(on,on,on,on,on);
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	6f ef       	ldi	r22, 0xFF	; 255
     4fa:	7f ef       	ldi	r23, 0xFF	; 255
     4fc:	4f ef       	ldi	r20, 0xFF	; 255
     4fe:	5f ef       	ldi	r21, 0xFF	; 255
     500:	2f ef       	ldi	r18, 0xFF	; 255
     502:	3f ef       	ldi	r19, 0xFF	; 255
     504:	0f ef       	ldi	r16, 0xFF	; 255
     506:	1f ef       	ldi	r17, 0xFF	; 255
     508:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
    uint16_t data4 = 0x00FF;
    uint16_t data5 = 0x00FF;
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
     50c:	8f 2d       	mov	r24, r15
     50e:	85 30       	cpi	r24, 0x05	; 5
     510:	d0 f4       	brcc	.+52     	; 0x546 <level_test+0x74>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
     512:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     514:	8f 2d       	mov	r24, r15
     516:	81 50       	subi	r24, 0x01	; 1
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	21 f7       	brne	.-56     	; 0x4e4 <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	18 c0       	rjmp	.+48     	; 0x550 <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	a9 f0       	breq	.+42     	; 0x54e <level_test+0x7c>
     524:	84 30       	cpi	r24, 0x04	; 4
     526:	19 f7       	brne	.-58     	; 0x4ee <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	0e 94 be 01 	call	0x37c	; 0x37c <level>
                transmit1(on,on,on,on,on);
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	9f ef       	ldi	r25, 0xFF	; 255
     532:	6f ef       	ldi	r22, 0xFF	; 255
     534:	7f ef       	ldi	r23, 0xFF	; 255
     536:	4f ef       	ldi	r20, 0xFF	; 255
     538:	5f ef       	ldi	r21, 0xFF	; 255
     53a:	2f ef       	ldi	r18, 0xFF	; 255
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	0f ef       	ldi	r16, 0xFF	; 255
     540:	1f ef       	ldi	r17, 0xFF	; 255
     542:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
                break;
        }
    }
}
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	0e 94 be 01 	call	0x37c	; 0x37c <level>
                transmit1(on,on,on,on,on);
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	9f ef       	ldi	r25, 0xFF	; 255
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	7f ef       	ldi	r23, 0xFF	; 255
     55c:	4f ef       	ldi	r20, 0xFF	; 255
     55e:	5f ef       	ldi	r21, 0xFF	; 255
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	0f ef       	ldi	r16, 0xFF	; 255
     566:	1f ef       	ldi	r17, 0xFF	; 255
     568:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}


void level_test(void){
     56c:	f3 94       	inc	r15
     56e:	d2 cf       	rjmp	.-92     	; 0x514 <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	ee cf       	rjmp	.-36     	; 0x550 <level_test+0x7e>

00000574 <shift_LED>:
        }
    }
}


void shift_LED(void){
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
     57a:	f0 90 3b 01 	lds	r15, 0x013B
     57e:	8f 2d       	mov	r24, r15
     580:	0e 94 be 01 	call	0x37c	; 0x37c <level>
    //level(0);


    if(LED1 == 0)
     584:	00 91 05 01 	lds	r16, 0x0105
     588:	10 91 06 01 	lds	r17, 0x0106
     58c:	01 15       	cp	r16, r1
     58e:	11 05       	cpc	r17, r1
     590:	e1 f4       	brne	.+56     	; 0x5ca <shift_LED+0x56>
    {
        if(first2){
     592:	80 91 03 01 	lds	r24, 0x0103
     596:	88 23       	and	r24, r24
     598:	09 f4       	brne	.+2      	; 0x59c <shift_LED+0x28>
     59a:	4b c0       	rjmp	.+150    	; 0x632 <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
     59c:	10 92 03 01 	sts	0x0103, r1
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	30 93 43 01 	sts	0x0143, r19
     5ac:	20 93 42 01 	sts	0x0142, r18
     5b0:	e0 91 3c 01 	lds	r30, 0x013C
     5b4:	f0 91 3d 01 	lds	r31, 0x013D
     5b8:	60 91 3e 01 	lds	r22, 0x013E
     5bc:	70 91 3f 01 	lds	r23, 0x013F
     5c0:	40 91 40 01 	lds	r20, 0x0140
     5c4:	50 91 41 01 	lds	r21, 0x0141
     5c8:	1b c0       	rjmp	.+54     	; 0x600 <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
     5ca:	80 91 04 01 	lds	r24, 0x0104
     5ce:	88 23       	and	r24, r24
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <shift_LED+0x60>
     5d2:	7c c0       	rjmp	.+248    	; 0x6cc <shift_LED+0x158>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
     5d4:	00 0f       	add	r16, r16
     5d6:	11 1f       	adc	r17, r17
     5d8:	10 93 06 01 	sts	0x0106, r17
     5dc:	00 93 05 01 	sts	0x0105, r16
     5e0:	e0 91 3c 01 	lds	r30, 0x013C
     5e4:	f0 91 3d 01 	lds	r31, 0x013D
     5e8:	60 91 3e 01 	lds	r22, 0x013E
     5ec:	70 91 3f 01 	lds	r23, 0x013F
     5f0:	40 91 40 01 	lds	r20, 0x0140
     5f4:	50 91 41 01 	lds	r21, 0x0141
     5f8:	20 91 42 01 	lds	r18, 0x0142
     5fc:	30 91 43 01 	lds	r19, 0x0143
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
     600:	cf 01       	movw	r24, r30
     602:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
     606:	8f e7       	ldi	r24, 0x7F	; 127
     608:	98 e3       	ldi	r25, 0x38	; 56
     60a:	a1 e0       	ldi	r26, 0x01	; 1
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	90 40       	sbci	r25, 0x00	; 0
     610:	a0 40       	sbci	r26, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <shift_LED+0x98>
     614:	00 c0       	rjmp	.+0      	; 0x616 <shift_LED+0xa2>
     616:	00 00       	nop
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	94 e3       	ldi	r25, 0x34	; 52
     61c:	ac e0       	ldi	r26, 0x0C	; 12
     61e:	81 50       	subi	r24, 0x01	; 1
     620:	90 40       	sbci	r25, 0x00	; 0
     622:	a0 40       	sbci	r26, 0x00	; 0
     624:	e1 f7       	brne	.-8      	; 0x61e <shift_LED+0xaa>
     626:	00 c0       	rjmp	.+0      	; 0x628 <shift_LED+0xb4>
     628:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
     632:	20 91 42 01 	lds	r18, 0x0142
     636:	30 91 43 01 	lds	r19, 0x0143
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
     63a:	21 15       	cp	r18, r1
     63c:	31 05       	cpc	r19, r1
     63e:	09 f0       	breq	.+2      	; 0x642 <shift_LED+0xce>
     640:	b1 cf       	rjmp	.-158    	; 0x5a4 <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
     642:	80 91 02 01 	lds	r24, 0x0102
     646:	88 23       	and	r24, r24
     648:	09 f0       	breq	.+2      	; 0x64c <shift_LED+0xd8>
     64a:	53 c0       	rjmp	.+166    	; 0x6f2 <shift_LED+0x17e>
     64c:	40 91 40 01 	lds	r20, 0x0140
     650:	50 91 41 01 	lds	r21, 0x0141
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
     654:	41 15       	cp	r20, r1
     656:	51 05       	cpc	r21, r1
     658:	09 f0       	breq	.+2      	; 0x65c <shift_LED+0xe8>
     65a:	4f c0       	rjmp	.+158    	; 0x6fa <shift_LED+0x186>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
     65c:	80 91 01 01 	lds	r24, 0x0101
     660:	88 23       	and	r24, r24
     662:	09 f0       	breq	.+2      	; 0x666 <shift_LED+0xf2>
     664:	5b c0       	rjmp	.+182    	; 0x71c <shift_LED+0x1a8>
     666:	00 91 3e 01 	lds	r16, 0x013E
     66a:	10 91 3f 01 	lds	r17, 0x013F
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
     66e:	01 15       	cp	r16, r1
     670:	11 05       	cpc	r17, r1
     672:	09 f0       	breq	.+2      	; 0x676 <shift_LED+0x102>
     674:	57 c0       	rjmp	.+174    	; 0x724 <shift_LED+0x1b0>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
     676:	80 91 00 01 	lds	r24, 0x0100
     67a:	88 23       	and	r24, r24
     67c:	09 f0       	breq	.+2      	; 0x680 <shift_LED+0x10c>
     67e:	62 c0       	rjmp	.+196    	; 0x744 <shift_LED+0x1d0>
     680:	e0 91 3c 01 	lds	r30, 0x013C
     684:	f0 91 3d 01 	lds	r31, 0x013D
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
     688:	30 97       	sbiw	r30, 0x00	; 0
     68a:	09 f0       	breq	.+2      	; 0x68e <shift_LED+0x11a>
     68c:	5f c0       	rjmp	.+190    	; 0x74c <shift_LED+0x1d8>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	30 93 06 01 	sts	0x0106, r19
     696:	20 93 05 01 	sts	0x0105, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 00 01 	sts	0x0100, r24
     6a0:	80 93 01 01 	sts	0x0101, r24
     6a4:	80 93 02 01 	sts	0x0102, r24
     6a8:	80 93 03 01 	sts	0x0103, r24
     6ac:	80 93 04 01 	sts	0x0104, r24
                        layer++;
     6b0:	8f 2d       	mov	r24, r15
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodqi4>
     6ba:	90 93 3b 01 	sts	0x013B, r25
     6be:	9f 01       	movw	r18, r30
     6c0:	af 01       	movw	r20, r30
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	01 e0       	ldi	r16, 0x01	; 1
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	9a cf       	rjmp	.-204    	; 0x600 <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
     6cc:	10 92 04 01 	sts	0x0104, r1
     6d0:	e0 91 3c 01 	lds	r30, 0x013C
     6d4:	f0 91 3d 01 	lds	r31, 0x013D
     6d8:	60 91 3e 01 	lds	r22, 0x013E
     6dc:	70 91 3f 01 	lds	r23, 0x013F
     6e0:	40 91 40 01 	lds	r20, 0x0140
     6e4:	50 91 41 01 	lds	r21, 0x0141
     6e8:	20 91 42 01 	lds	r18, 0x0142
     6ec:	30 91 43 01 	lds	r19, 0x0143
     6f0:	87 cf       	rjmp	.-242    	; 0x600 <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
     6f2:	10 92 02 01 	sts	0x0102, r1
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
     6fa:	44 0f       	add	r20, r20
     6fc:	55 1f       	adc	r21, r21
     6fe:	50 93 41 01 	sts	0x0141, r21
     702:	40 93 40 01 	sts	0x0140, r20
     706:	e0 91 3c 01 	lds	r30, 0x013C
     70a:	f0 91 3d 01 	lds	r31, 0x013D
     70e:	60 91 3e 01 	lds	r22, 0x013E
     712:	70 91 3f 01 	lds	r23, 0x013F
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	72 cf       	rjmp	.-284    	; 0x600 <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
     71c:	10 92 01 01 	sts	0x0101, r1
     720:	01 e0       	ldi	r16, 0x01	; 1
     722:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
     724:	b8 01       	movw	r22, r16
     726:	66 0f       	add	r22, r22
     728:	77 1f       	adc	r23, r23
     72a:	70 93 3f 01 	sts	0x013F, r23
     72e:	60 93 3e 01 	sts	0x013E, r22
     732:	e0 91 3c 01 	lds	r30, 0x013C
     736:	f0 91 3d 01 	lds	r31, 0x013D
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	5e cf       	rjmp	.-324    	; 0x600 <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
     744:	10 92 00 01 	sts	0x0100, r1
     748:	e1 e0       	ldi	r30, 0x01	; 1
     74a:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	f0 93 3d 01 	sts	0x013D, r31
     754:	e0 93 3c 01 	sts	0x013C, r30
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	4d cf       	rjmp	.-358    	; 0x600 <shift_LED+0x8c>

00000766 <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     76a:	83 b1       	in	r24, 0x03	; 3
     76c:	80 95       	com	r24
     76e:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	d1 f0       	breq	.+52     	; 0x7a8 <hall_test+0x42>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	40 f5       	brcc	.+80     	; 0x7c8 <hall_test+0x62>
     778:	88 23       	and	r24, r24
     77a:	81 f1       	breq	.+96     	; 0x7dc <hall_test+0x76>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	61 f1       	breq	.+88     	; 0x7d8 <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 be 01 	call	0x37c	; 0x37c <level>
                transmit1(C1P2,0,0,0,0);
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	00 e0       	ldi	r16, 0x00	; 0
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     79e:	83 b1       	in	r24, 0x03	; 3
     7a0:	80 95       	com	r24
     7a2:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	31 f7       	brne	.-52     	; 0x774 <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
     7a8:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     7aa:	0e 94 be 01 	call	0x37c	; 0x37c <level>
                transmit1(0,0,C1P3,C1P2,0);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	51 e0       	ldi	r21, 0x01	; 1
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	32 e0       	ldi	r19, 0x02	; 2
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <transmit1>
                break;
     7c6:	d1 cf       	rjmp	.-94     	; 0x76a <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     7c8:	84 30       	cpi	r24, 0x04	; 4
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <hall_test+0x6e>
     7cc:	88 30       	cpi	r24, 0x08	; 8
     7ce:	c1 f6       	brne	.-80     	; 0x780 <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	eb cf       	rjmp	.-42     	; 0x7aa <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	e9 cf       	rjmp	.-46     	; 0x7aa <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	e7 cf       	rjmp	.-50     	; 0x7aa <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	e5 cf       	rjmp	.-54     	; 0x7aa <hall_test+0x44>

000007e0 <red_led>:

}
}


void red_led(uint8_t layer,uint32_t red){
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	7a 01       	movw	r14, r20
     7f0:	8b 01       	movw	r16, r22
     7f2:	40 e5       	ldi	r20, 0x50	; 80
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	ec 01       	movw	r28, r24
     7fe:	cc 0f       	add	r28, r28
     800:	dd 1f       	adc	r29, r29
     802:	cc 0f       	add	r28, r28
     804:	dd 1f       	adc	r29, r29
     806:	c8 0f       	add	r28, r24
     808:	d9 1f       	adc	r29, r25
     80a:	cc 0f       	add	r28, r28
     80c:	dd 1f       	adc	r29, r29
     80e:	c8 5f       	subi	r28, 0xF8	; 248
     810:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
     812:	d8 01       	movw	r26, r16
     814:	c7 01       	movw	r24, r14
     816:	02 2e       	mov	r0, r18
     818:	04 c0       	rjmp	.+8      	; 0x822 <red_led+0x42>
     81a:	b6 95       	lsr	r27
     81c:	a7 95       	ror	r26
     81e:	97 95       	ror	r25
     820:	87 95       	ror	r24
     822:	0a 94       	dec	r0
     824:	d2 f7       	brpl	.-12     	; 0x81a <red_led+0x3a>
        if(state){
     826:	80 ff       	sbrs	r24, 0
     828:	12 c0       	rjmp	.+36     	; 0x84e <red_led+0x6e>

}
}


void red_led(uint8_t layer,uint32_t red){
     82a:	de 01       	movw	r26, r28
     82c:	ca 01       	movw	r24, r20
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
     832:	fc 01       	movw	r30, r24
     834:	65 91       	lpm	r22, Z+
     836:	74 91       	lpm	r23, Z+
     838:	ed 91       	ld	r30, X+
     83a:	fc 91       	ld	r31, X
     83c:	11 97       	sbiw	r26, 0x01	; 1
     83e:	e6 2b       	or	r30, r22
     840:	f7 2b       	or	r31, r23
     842:	ed 93       	st	X+, r30
     844:	fd 93       	st	X+, r31
     846:	da 94       	dec	r13
     848:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
     84a:	dd 20       	and	r13, r13
     84c:	91 f7       	brne	.-28     	; 0x832 <red_led+0x52>
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	46 5f       	subi	r20, 0xF6	; 246
     854:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     856:	29 31       	cpi	r18, 0x19	; 25
     858:	31 05       	cpc	r19, r1
     85a:	d9 f6       	brne	.-74     	; 0x812 <red_led+0x32>
            }
        }
    }
    
//
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	08 95       	ret

0000086c <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	7a 01       	movw	r14, r20
     87c:	8b 01       	movw	r16, r22
     87e:	44 e4       	ldi	r20, 0x44	; 68
     880:	52 e0       	ldi	r21, 0x02	; 2
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	ec 01       	movw	r28, r24
     88a:	cc 0f       	add	r28, r28
     88c:	dd 1f       	adc	r29, r29
     88e:	cc 0f       	add	r28, r28
     890:	dd 1f       	adc	r29, r29
     892:	c8 0f       	add	r28, r24
     894:	d9 1f       	adc	r29, r25
     896:	cc 0f       	add	r28, r28
     898:	dd 1f       	adc	r29, r29
     89a:	c8 5f       	subi	r28, 0xF8	; 248
     89c:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
     89e:	d8 01       	movw	r26, r16
     8a0:	c7 01       	movw	r24, r14
     8a2:	02 2e       	mov	r0, r18
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <blue_led+0x42>
     8a6:	b6 95       	lsr	r27
     8a8:	a7 95       	ror	r26
     8aa:	97 95       	ror	r25
     8ac:	87 95       	ror	r24
     8ae:	0a 94       	dec	r0
     8b0:	d2 f7       	brpl	.-12     	; 0x8a6 <blue_led+0x3a>
        if(state){
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
     8b6:	de 01       	movw	r26, r28
     8b8:	ca 01       	movw	r24, r20
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
     8be:	fc 01       	movw	r30, r24
     8c0:	65 91       	lpm	r22, Z+
     8c2:	74 91       	lpm	r23, Z+
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	e6 2b       	or	r30, r22
     8cc:	f7 2b       	or	r31, r23
     8ce:	ed 93       	st	X+, r30
     8d0:	fd 93       	st	X+, r31
     8d2:	da 94       	dec	r13
     8d4:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     8d6:	dd 20       	and	r13, r13
     8d8:	91 f7       	brne	.-28     	; 0x8be <blue_led+0x52>
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	46 5f       	subi	r20, 0xF6	; 246
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     8e2:	29 31       	cpi	r18, 0x19	; 25
     8e4:	31 05       	cpc	r19, r1
     8e6:	d9 f6       	brne	.-74     	; 0x89e <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	08 95       	ret

000008f8 <green_led>:

void green_led(uint8_t layer,uint32_t green){
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	7a 01       	movw	r14, r20
     908:	8b 01       	movw	r16, r22
     90a:	4a e4       	ldi	r20, 0x4A	; 74
     90c:	51 e0       	ldi	r21, 0x01	; 1
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	ec 01       	movw	r28, r24
     916:	cc 0f       	add	r28, r28
     918:	dd 1f       	adc	r29, r29
     91a:	cc 0f       	add	r28, r28
     91c:	dd 1f       	adc	r29, r29
     91e:	c8 0f       	add	r28, r24
     920:	d9 1f       	adc	r29, r25
     922:	cc 0f       	add	r28, r28
     924:	dd 1f       	adc	r29, r29
     926:	c8 5f       	subi	r28, 0xF8	; 248
     928:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
     92a:	d8 01       	movw	r26, r16
     92c:	c7 01       	movw	r24, r14
     92e:	02 2e       	mov	r0, r18
     930:	04 c0       	rjmp	.+8      	; 0x93a <green_led+0x42>
     932:	b6 95       	lsr	r27
     934:	a7 95       	ror	r26
     936:	97 95       	ror	r25
     938:	87 95       	ror	r24
     93a:	0a 94       	dec	r0
     93c:	d2 f7       	brpl	.-12     	; 0x932 <green_led+0x3a>
        if(state){
     93e:	80 ff       	sbrs	r24, 0
     940:	12 c0       	rjmp	.+36     	; 0x966 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
     942:	de 01       	movw	r26, r28
     944:	ca 01       	movw	r24, r20
     946:	65 e0       	ldi	r22, 0x05	; 5
     948:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
     94a:	fc 01       	movw	r30, r24
     94c:	65 91       	lpm	r22, Z+
     94e:	74 91       	lpm	r23, Z+
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	e6 2b       	or	r30, r22
     958:	f7 2b       	or	r31, r23
     95a:	ed 93       	st	X+, r30
     95c:	fd 93       	st	X+, r31
     95e:	da 94       	dec	r13
     960:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
     962:	dd 20       	and	r13, r13
     964:	91 f7       	brne	.-28     	; 0x94a <green_led+0x52>
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	46 5f       	subi	r20, 0xF6	; 246
     96c:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
     96e:	29 31       	cpi	r18, 0x19	; 25
     970:	31 05       	cpc	r19, r1
     972:	d9 f6       	brne	.-74     	; 0x92a <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	08 95       	ret

00000984 <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
     984:	6f 92       	push	r6
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	bf 92       	push	r11
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	b8 2e       	mov	r11, r24
     99c:	38 01       	movw	r6, r16
     99e:	49 01       	movw	r8, r18
    red_led(layer,red);
     9a0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <red_led>
    blue_led(layer,blue);
     9a4:	8b 2d       	mov	r24, r11
     9a6:	b4 01       	movw	r22, r8
     9a8:	a3 01       	movw	r20, r6
     9aa:	0e 94 36 04 	call	0x86c	; 0x86c <blue_led>
    green_led(layer,green);
     9ae:	8b 2d       	mov	r24, r11
     9b0:	b7 01       	movw	r22, r14
     9b2:	a6 01       	movw	r20, r12
     9b4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <green_led>
}
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	9f 90       	pop	r9
     9c8:	8f 90       	pop	r8
     9ca:	7f 90       	pop	r7
     9cc:	6f 90       	pop	r6
     9ce:	08 95       	ret

000009d0 <test_frame>:
void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        //level(i);
        transmit2(i);
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 27 02 	call	0x44e	; 0x44e <transmit2>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 27 02 	call	0x44e	; 0x44e <transmit2>
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	0e 94 27 02 	call	0x44e	; 0x44e <transmit2>
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	0e 94 27 02 	call	0x44e	; 0x44e <transmit2>
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	0e 94 27 02 	call	0x44e	; 0x44e <transmit2>
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
    }
}
     9ee:	08 95       	ret

000009f0 <clear_frame>:

void clear_frame(){
     9f0:	e8 e0       	ldi	r30, 0x08	; 8
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            frame[i][j] = 0;
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	10 82       	st	Z, r1
     9f8:	13 82       	std	Z+3, r1	; 0x03
     9fa:	12 82       	std	Z+2, r1	; 0x02
     9fc:	15 82       	std	Z+5, r1	; 0x05
     9fe:	14 82       	std	Z+4, r1	; 0x04
     a00:	17 82       	std	Z+7, r1	; 0x07
     a02:	16 82       	std	Z+6, r1	; 0x06
     a04:	11 86       	std	Z+9, r1	; 0x09
     a06:	10 86       	std	Z+8, r1	; 0x08
     a08:	3a 96       	adiw	r30, 0x0a	; 10
}

void clear_frame(){
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	ea 33       	cpi	r30, 0x3A	; 58
     a0e:	f8 07       	cpc	r31, r24
     a10:	89 f7       	brne	.-30     	; 0x9f4 <clear_frame+0x4>
        for(j=0;j<5;j++){
            frame[i][j] = 0;
        }
    } 
    }
     a12:	08 95       	ret

00000a14 <test_pattern>:

void test_pattern(){
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
    uint32_t row4 = 0x1F00000;
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
     a24:	c0 e0       	ldi	r28, 0x00	; 0
     a26:	d0 e0       	ldi	r29, 0x00	; 0
    while(1){
        while(counter <0x0018){
     a28:	c8 31       	cpi	r28, 0x18	; 24
     a2a:	d1 05       	cpc	r29, r1
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <test_pattern+0x1c>
     a2e:	60 c2       	rjmp	.+1216   	; 0xef0 <test_pattern+0x4dc>
     a30:	c8 e1       	ldi	r28, 0x18	; 24
     a32:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	40 ee       	ldi	r20, 0xE0	; 224
     a38:	53 e0       	ldi	r21, 0x03	; 3
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	00 e0       	ldi	r16, 0x00	; 0
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	98 01       	movw	r18, r16
     a44:	cc 24       	eor	r12, r12
     a46:	dd 24       	eor	r13, r13
     a48:	76 01       	movw	r14, r12
     a4a:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row1,0);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	ba 01       	movw	r22, r20
     a56:	00 ee       	ldi	r16, 0xE0	; 224
     a58:	13 e0       	ldi	r17, 0x03	; 3
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row1);
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	ba 01       	movw	r22, r20
     a6a:	00 e0       	ldi	r16, 0x00	; 0
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	98 01       	movw	r18, r16
     a70:	90 ee       	ldi	r25, 0xE0	; 224
     a72:	c9 2e       	mov	r12, r25
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	d9 2e       	mov	r13, r25
     a78:	e1 2c       	mov	r14, r1
     a7a:	f1 2c       	mov	r15, r1
     a7c:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row1);
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	ba 01       	movw	r22, r20
     a88:	00 e0       	ldi	r16, 0x00	; 0
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	98 01       	movw	r18, r16
     a8e:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row1,0);
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	ba 01       	movw	r22, r20
     a9a:	00 ee       	ldi	r16, 0xE0	; 224
     a9c:	13 e0       	ldi	r17, 0x03	; 3
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	cc 24       	eor	r12, r12
     aa4:	dd 24       	eor	r13, r13
     aa6:	76 01       	movw	r14, r12
     aa8:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     aac:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     ab0:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     ab2:	09 f0       	breq	.+2      	; 0xab6 <test_pattern+0xa2>
     ab4:	bf cf       	rjmp	.-130    	; 0xa34 <test_pattern+0x20>
     ab6:	c8 e1       	ldi	r28, 0x18	; 24
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	5c e7       	ldi	r21, 0x7C	; 124
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	98 01       	movw	r18, r16
     aca:	cc 24       	eor	r12, r12
     acc:	dd 24       	eor	r13, r13
     ace:	76 01       	movw	r14, r12
     ad0:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row2,0);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	ba 01       	movw	r22, r20
     adc:	00 e0       	ldi	r16, 0x00	; 0
     ade:	1c e7       	ldi	r17, 0x7C	; 124
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row2);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	ba 01       	movw	r22, r20
     af0:	00 e0       	ldi	r16, 0x00	; 0
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	98 01       	movw	r18, r16
     af6:	c1 2c       	mov	r12, r1
     af8:	bc e7       	ldi	r27, 0x7C	; 124
     afa:	db 2e       	mov	r13, r27
     afc:	e1 2c       	mov	r14, r1
     afe:	f1 2c       	mov	r15, r1
     b00:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row2);
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	ba 01       	movw	r22, r20
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	98 01       	movw	r18, r16
     b12:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row2,0);
     b16:	84 e0       	ldi	r24, 0x04	; 4
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	ba 01       	movw	r22, r20
     b1e:	00 e0       	ldi	r16, 0x00	; 0
     b20:	1c e7       	ldi	r17, 0x7C	; 124
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	cc 24       	eor	r12, r12
     b28:	dd 24       	eor	r13, r13
     b2a:	76 01       	movw	r14, r12
     b2c:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     b30:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     b34:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row1,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     b36:	09 f0       	breq	.+2      	; 0xb3a <test_pattern+0x126>
     b38:	c0 cf       	rjmp	.-128    	; 0xaba <test_pattern+0xa6>
     b3a:	c8 e1       	ldi	r28, 0x18	; 24
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e8       	ldi	r21, 0x80	; 128
     b44:	6f e0       	ldi	r22, 0x0F	; 15
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	98 01       	movw	r18, r16
     b4e:	cc 24       	eor	r12, r12
     b50:	dd 24       	eor	r13, r13
     b52:	76 01       	movw	r14, r12
     b54:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row3,0);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	ba 01       	movw	r22, r20
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e8       	ldi	r17, 0x80	; 128
     b64:	2f e0       	ldi	r18, 0x0F	; 15
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row3);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	ba 01       	movw	r22, r20
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	98 01       	movw	r18, r16
     b7a:	c1 2c       	mov	r12, r1
     b7c:	a0 e8       	ldi	r26, 0x80	; 128
     b7e:	da 2e       	mov	r13, r26
     b80:	af e0       	ldi	r26, 0x0F	; 15
     b82:	ea 2e       	mov	r14, r26
     b84:	f1 2c       	mov	r15, r1
     b86:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row3);
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	ba 01       	movw	r22, r20
     b92:	00 e0       	ldi	r16, 0x00	; 0
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	98 01       	movw	r18, r16
     b98:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row3,0);
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	ba 01       	movw	r22, r20
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	10 e8       	ldi	r17, 0x80	; 128
     ba8:	2f e0       	ldi	r18, 0x0F	; 15
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	cc 24       	eor	r12, r12
     bae:	dd 24       	eor	r13, r13
     bb0:	76 01       	movw	r14, r12
     bb2:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     bb6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     bba:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row2,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <test_pattern+0x1ac>
     bbe:	bf cf       	rjmp	.-130    	; 0xb3e <test_pattern+0x12a>
     bc0:	c8 e1       	ldi	r28, 0x18	; 24
     bc2:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
            leds(0,row4,0,0);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	60 ef       	ldi	r22, 0xF0	; 240
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	00 e0       	ldi	r16, 0x00	; 0
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	98 01       	movw	r18, r16
     bd4:	cc 24       	eor	r12, r12
     bd6:	dd 24       	eor	r13, r13
     bd8:	76 01       	movw	r14, r12
     bda:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row4,0);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	ba 01       	movw	r22, r20
     be6:	00 e0       	ldi	r16, 0x00	; 0
     be8:	10 e0       	ldi	r17, 0x00	; 0
     bea:	20 ef       	ldi	r18, 0xF0	; 240
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row4);
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	ba 01       	movw	r22, r20
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	98 01       	movw	r18, r16
     c00:	c1 2c       	mov	r12, r1
     c02:	d1 2c       	mov	r13, r1
     c04:	f0 ef       	ldi	r31, 0xF0	; 240
     c06:	ef 2e       	mov	r14, r31
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	ff 2e       	mov	r15, r31
     c0c:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row4);
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	ba 01       	movw	r22, r20
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	98 01       	movw	r18, r16
     c1e:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row4,0);
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	ba 01       	movw	r22, r20
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	20 ef       	ldi	r18, 0xF0	; 240
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	cc 24       	eor	r12, r12
     c34:	dd 24       	eor	r13, r13
     c36:	76 01       	movw	r14, r12
     c38:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     c3c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     c40:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row3,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
     c42:	09 f0       	breq	.+2      	; 0xc46 <test_pattern+0x232>
     c44:	bf cf       	rjmp	.-130    	; 0xbc4 <test_pattern+0x1b0>
     c46:	c8 e1       	ldi	r28, 0x18	; 24
     c48:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e8       	ldi	r21, 0x80	; 128
     c50:	6f e0       	ldi	r22, 0x0F	; 15
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	98 01       	movw	r18, r16
     c5a:	cc 24       	eor	r12, r12
     c5c:	dd 24       	eor	r13, r13
     c5e:	76 01       	movw	r14, r12
     c60:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row3,0);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	ba 01       	movw	r22, r20
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	10 e8       	ldi	r17, 0x80	; 128
     c70:	2f e0       	ldi	r18, 0x0F	; 15
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row3);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	ba 01       	movw	r22, r20
     c80:	00 e0       	ldi	r16, 0x00	; 0
     c82:	10 e0       	ldi	r17, 0x00	; 0
     c84:	98 01       	movw	r18, r16
     c86:	c1 2c       	mov	r12, r1
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	de 2e       	mov	r13, r30
     c8c:	ef e0       	ldi	r30, 0x0F	; 15
     c8e:	ee 2e       	mov	r14, r30
     c90:	f1 2c       	mov	r15, r1
     c92:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row3);
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	ba 01       	movw	r22, r20
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	98 01       	movw	r18, r16
     ca4:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row3,0);
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	ba 01       	movw	r22, r20
     cb0:	00 e0       	ldi	r16, 0x00	; 0
     cb2:	10 e8       	ldi	r17, 0x80	; 128
     cb4:	2f e0       	ldi	r18, 0x0F	; 15
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	cc 24       	eor	r12, r12
     cba:	dd 24       	eor	r13, r13
     cbc:	76 01       	movw	r14, r12
     cbe:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     cc2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     cc6:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row4,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
     cc8:	09 f0       	breq	.+2      	; 0xccc <test_pattern+0x2b8>
     cca:	bf cf       	rjmp	.-130    	; 0xc4a <test_pattern+0x236>
     ccc:	c8 e1       	ldi	r28, 0x18	; 24
     cce:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	5c e7       	ldi	r21, 0x7C	; 124
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	98 01       	movw	r18, r16
     ce0:	cc 24       	eor	r12, r12
     ce2:	dd 24       	eor	r13, r13
     ce4:	76 01       	movw	r14, r12
     ce6:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row2,0);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	ba 01       	movw	r22, r20
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	1c e7       	ldi	r17, 0x7C	; 124
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row2);
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	ba 01       	movw	r22, r20
     d06:	00 e0       	ldi	r16, 0x00	; 0
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	98 01       	movw	r18, r16
     d0c:	c1 2c       	mov	r12, r1
     d0e:	9c e7       	ldi	r25, 0x7C	; 124
     d10:	d9 2e       	mov	r13, r25
     d12:	e1 2c       	mov	r14, r1
     d14:	f1 2c       	mov	r15, r1
     d16:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row2);
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	ba 01       	movw	r22, r20
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	98 01       	movw	r18, r16
     d28:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row2,0);
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	ba 01       	movw	r22, r20
     d34:	00 e0       	ldi	r16, 0x00	; 0
     d36:	1c e7       	ldi	r17, 0x7C	; 124
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	cc 24       	eor	r12, r12
     d3e:	dd 24       	eor	r13, r13
     d40:	76 01       	movw	r14, r12
     d42:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     d46:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     d4a:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row3,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     d4c:	09 f0       	breq	.+2      	; 0xd50 <test_pattern+0x33c>
     d4e:	c0 cf       	rjmp	.-128    	; 0xcd0 <test_pattern+0x2bc>
     d50:	c8 e1       	ldi	r28, 0x18	; 24
     d52:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	40 ee       	ldi	r20, 0xE0	; 224
     d58:	53 e0       	ldi	r21, 0x03	; 3
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	00 e0       	ldi	r16, 0x00	; 0
     d60:	10 e0       	ldi	r17, 0x00	; 0
     d62:	98 01       	movw	r18, r16
     d64:	cc 24       	eor	r12, r12
     d66:	dd 24       	eor	r13, r13
     d68:	76 01       	movw	r14, r12
     d6a:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row1,0);
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	ba 01       	movw	r22, r20
     d76:	00 ee       	ldi	r16, 0xE0	; 224
     d78:	13 e0       	ldi	r17, 0x03	; 3
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row1);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	ba 01       	movw	r22, r20
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	98 01       	movw	r18, r16
     d90:	b0 ee       	ldi	r27, 0xE0	; 224
     d92:	cb 2e       	mov	r12, r27
     d94:	b3 e0       	ldi	r27, 0x03	; 3
     d96:	db 2e       	mov	r13, r27
     d98:	e1 2c       	mov	r14, r1
     d9a:	f1 2c       	mov	r15, r1
     d9c:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row1);
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	ba 01       	movw	r22, r20
     da8:	00 e0       	ldi	r16, 0x00	; 0
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	98 01       	movw	r18, r16
     dae:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row1,0);
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	ba 01       	movw	r22, r20
     dba:	00 ee       	ldi	r16, 0xE0	; 224
     dbc:	13 e0       	ldi	r17, 0x03	; 3
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	cc 24       	eor	r12, r12
     dc4:	dd 24       	eor	r13, r13
     dc6:	76 01       	movw	r14, r12
     dc8:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     dcc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     dd0:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row2,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <test_pattern+0x3c2>
     dd4:	bf cf       	rjmp	.-130    	; 0xd54 <test_pattern+0x340>
     dd6:	c8 e1       	ldi	r28, 0x18	; 24
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,plane,0,0);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	4f ef       	ldi	r20, 0xFF	; 255
     dde:	5f ef       	ldi	r21, 0xFF	; 255
     de0:	6f ef       	ldi	r22, 0xFF	; 255
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	98 01       	movw	r18, r16
     dea:	cc 24       	eor	r12, r12
     dec:	dd 24       	eor	r13, r13
     dee:	76 01       	movw	r14, r12
     df0:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,plane,0);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	ba 01       	movw	r22, r20
     dfc:	0f ef       	ldi	r16, 0xFF	; 255
     dfe:	1f ef       	ldi	r17, 0xFF	; 255
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	31 e0       	ldi	r19, 0x01	; 1
     e04:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,plane);
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	ba 01       	movw	r22, r20
     e10:	00 e0       	ldi	r16, 0x00	; 0
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	98 01       	movw	r18, r16
     e16:	af ef       	ldi	r26, 0xFF	; 255
     e18:	ca 2e       	mov	r12, r26
     e1a:	af ef       	ldi	r26, 0xFF	; 255
     e1c:	da 2e       	mov	r13, r26
     e1e:	af ef       	ldi	r26, 0xFF	; 255
     e20:	ea 2e       	mov	r14, r26
     e22:	a1 e0       	ldi	r26, 0x01	; 1
     e24:	fa 2e       	mov	r15, r26
     e26:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,plane);
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	ba 01       	movw	r22, r20
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	98 01       	movw	r18, r16
     e38:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,plane,0);
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	ba 01       	movw	r22, r20
     e44:	0f ef       	ldi	r16, 0xFF	; 255
     e46:	1f ef       	ldi	r17, 0xFF	; 255
     e48:	2f ef       	ldi	r18, 0xFF	; 255
     e4a:	31 e0       	ldi	r19, 0x01	; 1
     e4c:	cc 24       	eor	r12, r12
     e4e:	dd 24       	eor	r13, r13
     e50:	76 01       	movw	r14, r12
     e52:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     e56:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     e5a:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row1,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     e5c:	09 f0       	breq	.+2      	; 0xe60 <test_pattern+0x44c>
     e5e:	bd cf       	rjmp	.-134    	; 0xdda <test_pattern+0x3c6>
     e60:	c8 e1       	ldi	r28, 0x18	; 24
     e62:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row0,0,0);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	4f e1       	ldi	r20, 0x1F	; 31
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	00 e0       	ldi	r16, 0x00	; 0
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	98 01       	movw	r18, r16
     e74:	cc 24       	eor	r12, r12
     e76:	dd 24       	eor	r13, r13
     e78:	76 01       	movw	r14, r12
     e7a:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row0,0);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	ba 01       	movw	r22, r20
     e86:	0f e1       	ldi	r16, 0x1F	; 31
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row0);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	ba 01       	movw	r22, r20
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	98 01       	movw	r18, r16
     ea0:	ff e1       	ldi	r31, 0x1F	; 31
     ea2:	cf 2e       	mov	r12, r31
     ea4:	d1 2c       	mov	r13, r1
     ea6:	e1 2c       	mov	r14, r1
     ea8:	f1 2c       	mov	r15, r1
     eaa:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row0);
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ba 01       	movw	r22, r20
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	98 01       	movw	r18, r16
     ebc:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row0,0);
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	ba 01       	movw	r22, r20
     ec8:	0f e1       	ldi	r16, 0x1F	; 31
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	cc 24       	eor	r12, r12
     ed2:	dd 24       	eor	r13, r13
     ed4:	76 01       	movw	r14, r12
     ed6:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     eda:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
     ede:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,plane,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
     ee0:	09 f0       	breq	.+2      	; 0xee4 <test_pattern+0x4d0>
     ee2:	c0 cf       	rjmp	.-128    	; 0xe64 <test_pattern+0x450>
            leds(1,0,row0,0);
            leds(2,0,0,row0);
            leds(3,0,0,row0);
            leds(4,0,row0,0);
            test_frame();
            counter++;
     ee4:	c8 e1       	ldi	r28, 0x18	; 24
     ee6:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(counter <0x0018){
     ee8:	c8 31       	cpi	r28, 0x18	; 24
     eea:	d1 05       	cpc	r29, r1
     eec:	08 f0       	brcs	.+2      	; 0xef0 <test_pattern+0x4dc>
     eee:	a0 cd       	rjmp	.-1216   	; 0xa30 <test_pattern+0x1c>
            leds(0,row0,0,0);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	4f e1       	ldi	r20, 0x1F	; 31
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	00 e0       	ldi	r16, 0x00	; 0
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	98 01       	movw	r18, r16
     f00:	cc 24       	eor	r12, r12
     f02:	dd 24       	eor	r13, r13
     f04:	76 01       	movw	r14, r12
     f06:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row0,0);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	ba 01       	movw	r22, r20
     f12:	0f e1       	ldi	r16, 0x1F	; 31
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row0);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	ba 01       	movw	r22, r20
     f26:	00 e0       	ldi	r16, 0x00	; 0
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	98 01       	movw	r18, r16
     f2c:	ef e1       	ldi	r30, 0x1F	; 31
     f2e:	ce 2e       	mov	r12, r30
     f30:	d1 2c       	mov	r13, r1
     f32:	e1 2c       	mov	r14, r1
     f34:	f1 2c       	mov	r15, r1
     f36:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row0);
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	ba 01       	movw	r22, r20
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	98 01       	movw	r18, r16
     f48:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row0,0);
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	ba 01       	movw	r22, r20
     f54:	0f e1       	ldi	r16, 0x1F	; 31
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	cc 24       	eor	r12, r12
     f5e:	dd 24       	eor	r13, r13
     f60:	76 01       	movw	r14, r12
     f62:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     f66:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
            counter++;
     f6a:	21 96       	adiw	r28, 0x01	; 1
     f6c:	5d cd       	rjmp	.-1350   	; 0xa28 <test_pattern+0x14>

00000f6e <test_pattern1>:
            counter++;
        }
    }
}

void test_pattern1(){
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
     f7a:	80 91 3a 01 	lds	r24, 0x013A
     f7e:	88 23       	and	r24, r24
     f80:	09 f0       	breq	.+2      	; 0xf84 <test_pattern1+0x16>
     f82:	42 c0       	rjmp	.+132    	; 0x1008 <test_pattern1+0x9a>
            leds(0,row0,0,0);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	4f e1       	ldi	r20, 0x1F	; 31
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	98 01       	movw	r18, r16
     f94:	cc 24       	eor	r12, r12
     f96:	dd 24       	eor	r13, r13
     f98:	76 01       	movw	r14, r12
     f9a:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row0,0);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	ba 01       	movw	r22, r20
     fa6:	0f e1       	ldi	r16, 0x1F	; 31
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row0);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	ba 01       	movw	r22, r20
     fba:	00 e0       	ldi	r16, 0x00	; 0
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	98 01       	movw	r18, r16
     fc0:	af e1       	ldi	r26, 0x1F	; 31
     fc2:	ca 2e       	mov	r12, r26
     fc4:	d1 2c       	mov	r13, r1
     fc6:	e1 2c       	mov	r14, r1
     fc8:	f1 2c       	mov	r15, r1
     fca:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row0);
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	ba 01       	movw	r22, r20
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	10 e0       	ldi	r17, 0x00	; 0
     fda:	98 01       	movw	r18, r16
     fdc:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row0,0);
     fe0:	84 e0       	ldi	r24, 0x04	; 4
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	ba 01       	movw	r22, r20
     fe8:	0f e1       	ldi	r16, 0x1F	; 31
     fea:	10 e0       	ldi	r17, 0x00	; 0
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	cc 24       	eor	r12, r12
     ff2:	dd 24       	eor	r13, r13
     ff4:	76 01       	movw	r14, r12
     ff6:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
     ffa:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
     ffe:	80 91 3a 01 	lds	r24, 0x013A
    1002:	88 23       	and	r24, r24
    1004:	09 f4       	brne	.+2      	; 0x1008 <test_pattern1+0x9a>
    1006:	be cf       	rjmp	.-132    	; 0xf84 <test_pattern1+0x16>
            leds(4,0,row1,0);
            test_frame();
            //counter++;
        }
        //counter = 0;
        next = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 3a 01 	sts	0x013A, r24
        while(counter <0x0018){
            leds(0,row2,0,0);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	5c e7       	ldi	r21, 0x7C	; 124
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	00 e0       	ldi	r16, 0x00	; 0
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	98 01       	movw	r18, r16
    101e:	cc 24       	eor	r12, r12
    1020:	dd 24       	eor	r13, r13
    1022:	76 01       	movw	r14, r12
    1024:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(1,0,row2,0);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	ba 01       	movw	r22, r20
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	1c e7       	ldi	r17, 0x7C	; 124
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(2,0,0,row2);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	ba 01       	movw	r22, r20
    1044:	00 e0       	ldi	r16, 0x00	; 0
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	98 01       	movw	r18, r16
    104a:	c1 2c       	mov	r12, r1
    104c:	fc e7       	ldi	r31, 0x7C	; 124
    104e:	df 2e       	mov	r13, r31
    1050:	e1 2c       	mov	r14, r1
    1052:	f1 2c       	mov	r15, r1
    1054:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(3,0,0,row2);
    1058:	83 e0       	ldi	r24, 0x03	; 3
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	ba 01       	movw	r22, r20
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	98 01       	movw	r18, r16
    1066:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            leds(4,0,row2,0);
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	ba 01       	movw	r22, r20
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	1c e7       	ldi	r17, 0x7C	; 124
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	cc 24       	eor	r12, r12
    107c:	dd 24       	eor	r13, r13
    107e:	76 01       	movw	r14, r12
    1080:	0e 94 c2 04 	call	0x984	; 0x984 <leds>
            test_frame();
    1084:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <test_frame>
    1088:	c2 cf       	rjmp	.-124    	; 0x100e <test_pattern1+0xa0>

0000108a <TIMER_OVF_vect>:
            counter++;
        }
    }
}

ISR(TIMER_OVF_vect){
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
static uint16_t counter = 0;
if(counter){
 //do sutff
 }

}
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <main>:
/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    109e:	84 b1       	in	r24, 0x04	; 4
    10a0:	80 67       	ori	r24, 0x70	; 112
    10a2:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
    10a4:	85 b1       	in	r24, 0x05	; 5
    10a6:	8f 60       	ori	r24, 0x0F	; 15
    10a8:	85 b9       	out	0x05, r24	; 5
	//Bits 1, 0 = SPR1, SPR0 =  
	//SPSR  |=   (1<<SPI2X);           // double speed operation
    */

    //ATtiny167 SPI INIT
	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    10aa:	81 b1       	in	r24, 0x01	; 1
    10ac:	80 67       	ori	r24, 0x70	; 112
    10ae:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
    10b0:	8c b5       	in	r24, 0x2c	; 44
    10b2:	80 65       	ori	r24, 0x50	; 80
    10b4:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    10b6:	8d b5       	in	r24, 0x2d	; 45
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8d bd       	out	0x2d, r24	; 45
    uint8_t input = 0;
    uint8_t i = 0;
   
	while(1){

        test_pattern();
    10bc:	0e 94 0a 05 	call	0xa14	; 0xa14 <test_pattern>
    10c0:	fd cf       	rjmp	.-6      	; 0x10bc <main+0x1e>

000010c2 <__udivmodqi4>:
    10c2:	99 1b       	sub	r25, r25
    10c4:	79 e0       	ldi	r23, 0x09	; 9
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <__udivmodqi4_ep>

000010c8 <__udivmodqi4_loop>:
    10c8:	99 1f       	adc	r25, r25
    10ca:	96 17       	cp	r25, r22
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <__udivmodqi4_ep>
    10ce:	96 1b       	sub	r25, r22

000010d0 <__udivmodqi4_ep>:
    10d0:	88 1f       	adc	r24, r24
    10d2:	7a 95       	dec	r23
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__udivmodqi4_loop>
    10d6:	80 95       	com	r24
    10d8:	08 95       	ret

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
