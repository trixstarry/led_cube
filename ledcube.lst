
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00002146  000021da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800148  00800148  00002222  2**0
                  ALLOC
  3 .stab         00003edc  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f20  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__ctors_end>
       4:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
       c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      10:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_4>
      14:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      18:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      1c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      20:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      24:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_9>
      28:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      2c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      30:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      34:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      38:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      3c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      40:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      44:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      4c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__bad_interrupt>
      50:	c5 04       	cpc	r12, r5
      52:	ae 04       	cpc	r10, r14
      54:	97 04       	cpc	r9, r7
      56:	52 04       	cpc	r5, r2
      58:	52 04       	cpc	r5, r2
      5a:	69 04       	cpc	r6, r9
      5c:	13 06       	cpc	r1, r19
      5e:	fc 05       	cpc	r31, r12
      60:	e5 05       	cpc	r30, r5
      62:	ce 05       	cpc	r28, r14
      64:	b7 05       	cpc	r27, r7
      66:	b4 05       	cpc	r27, r4
      68:	9d 05       	cpc	r25, r13
      6a:	86 05       	cpc	r24, r6
      6c:	6f 05       	cpc	r22, r15
      6e:	6c 05       	cpc	r22, r12
      70:	69 05       	cpc	r22, r9
      72:	52 05       	cpc	r21, r2
      74:	3b 05       	cpc	r19, r11
      76:	24 05       	cpc	r18, r4
      78:	21 05       	cpc	r18, r1
      7a:	0a 05       	cpc	r16, r10
      7c:	f3 04       	cpc	r15, r3
      7e:	80 04       	cpc	r8, r0
      80:	dc 04       	cpc	r13, r12
      82:	0e 08       	sbc	r0, r14
      84:	f7 07       	cpc	r31, r23
      86:	e0 07       	cpc	r30, r16
      88:	c9 07       	cpc	r28, r25
      8a:	b2 07       	cpc	r27, r18
      8c:	9b 07       	cpc	r25, r27
      8e:	84 07       	cpc	r24, r20
      90:	6d 07       	cpc	r22, r29
      92:	56 07       	cpc	r21, r22
      94:	3f 07       	cpc	r19, r31
      96:	28 07       	cpc	r18, r24
      98:	25 07       	cpc	r18, r21
      9a:	0e 07       	cpc	r16, r30
      9c:	f7 06       	cpc	r15, r23
      9e:	e0 06       	cpc	r14, r16
      a0:	dd 06       	cpc	r13, r29
      a2:	da 06       	cpc	r13, r26
      a4:	c3 06       	cpc	r12, r19
      a6:	ac 06       	cpc	r10, r28
      a8:	95 06       	cpc	r9, r21
      aa:	92 06       	cpc	r9, r18
      ac:	7b 06       	cpc	r7, r27
      ae:	64 06       	cpc	r6, r20
      b0:	4d 06       	cpc	r4, r29
      b2:	25 08       	sbc	r2, r5
      b4:	20 0a       	sbc	r2, r16
      b6:	09 0a       	sbc	r0, r25
      b8:	f2 09       	sbc	r31, r2
      ba:	db 09       	sbc	r29, r11
      bc:	c4 09       	sbc	r28, r4
      be:	ad 09       	sbc	r26, r13
      c0:	96 09       	sbc	r25, r6
      c2:	7f 09       	sbc	r23, r15
      c4:	68 09       	sbc	r22, r8
      c6:	51 09       	sbc	r21, r1
      c8:	3a 09       	sbc	r19, r10
      ca:	37 09       	sbc	r19, r7
      cc:	20 09       	sbc	r18, r0
      ce:	09 09       	sbc	r16, r9
      d0:	f2 08       	sbc	r15, r2
      d2:	ef 08       	sbc	r14, r15
      d4:	ec 08       	sbc	r14, r12
      d6:	d5 08       	sbc	r13, r5
      d8:	be 08       	sbc	r11, r14
      da:	a7 08       	sbc	r10, r7
      dc:	a4 08       	sbc	r10, r4
      de:	8d 08       	sbc	r8, r13
      e0:	76 08       	sbc	r7, r6
      e2:	5f 08       	sbc	r5, r15
      e4:	37 0a       	sbc	r3, r23

000000e6 <R>:
      e6:	00 00 02 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
	...
      fe:	00 01 00 00 00 00 00 00 00 00 18 00 00 00 00 00     ................
     10e:	00 00 00 00 18 00 00 00 00 00 00 00 10 00 00 00     ................
     11e:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     12e:	00 00 00 10 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     146:	01 00 00 00 00 00 80 00 00 00 00 00 00 00 00 08     ................
	...
     162:	00 00 10 00 00 00 00 00 00 00 00 00 00 08 00 00     ................
     172:	00 00 00 00 00 00 00 01 00 00 01 00 00 00 00 00     ................
     182:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00     ................
     192:	00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00     ................
     1a2:	40 00 00 00 00 00 00 00 00 00 02 00 18 00 00 00     @...............
     1b2:	00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00     ...... .........
	...
     1ca:	00 01 00 00 00 00 00 00 00 00 00 20 00 00 00 00     ........... ....
     1da:	00 00 00 00 00 40                                   .....@

000001e0 <G>:
     1e0:	00 00 01 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
	...
     1f8:	80 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00     ................
     208:	00 00 00 00 02 00 00 00 00 00 00 00 18 00 00 00     ................
     218:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     228:	00 00 00 08 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     240:	00 80 00 00 00 00 40 00 00 00 00 00 00 00 00 10     ......@.........
	...
     25c:	00 00 18 00 00 00 00 00 00 00 00 00 00 10 00 00     ................
     26c:	00 00 00 00 00 00 00 02 00 00 00 80 00 00 00 00     ................
     27c:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00     ................
     28c:	00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     29c:	20 00 00 00 00 00 00 00 00 00 18 00 18 00 00 00      ...............
     2ac:	00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00     ......@.........
	...
     2c4:	00 02 00 00 00 00 00 00 00 00 00 10 00 00 00 00     ................
     2d4:	00 00 00 00 00 80                                   ......

000002da <B>:
     2da:	00 00 00 80 00 00 00 00 00 00 00 00 00 40 00 00     .............@..
	...
     2f2:	40 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00     @......... .....
     302:	00 00 00 00 01 00 00 00 00 00 00 00 18 00 00 00     ................
     312:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00     ................
     322:	00 00 00 04 00 00 00 00 00 00 00 00 00 80 00 00     ................
	...
     33a:	00 40 00 00 00 00 20 00 00 00 00 00 00 00 00 20     .@.... ........ 
	...
     356:	00 00 18 00 00 00 00 00 00 00 00 00 00 20 00 00     ............. ..
     366:	00 00 00 00 00 00 00 04 00 00 00 40 00 00 00 00     ...........@....
     376:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00     ................
     386:	00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00     .... ...........
     396:	10 00 00 00 00 00 00 00 00 00 18 00 02 00 00 00     ................
     3a6:	00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00     ................
	...
     3be:	00 04 00 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     3ce:	00 00 00 00 01 00                                   ......

000003d4 <__ctors_end>:
     3d4:	11 24       	eor	r1, r1
     3d6:	1f be       	out	0x3f, r1	; 63
     3d8:	ce ef       	ldi	r28, 0xFE	; 254
     3da:	d2 e0       	ldi	r29, 0x02	; 2
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	cd bf       	out	0x3d, r28	; 61

000003e0 <__do_copy_data>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	e6 e4       	ldi	r30, 0x46	; 70
     3e8:	f1 e2       	ldi	r31, 0x21	; 33
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__do_copy_data+0x10>
     3ec:	05 90       	lpm	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	a8 34       	cpi	r26, 0x48	; 72
     3f2:	b1 07       	cpc	r27, r17
     3f4:	d9 f7       	brne	.-10     	; 0x3ec <__do_copy_data+0xc>

000003f6 <__do_clear_bss>:
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	a8 e4       	ldi	r26, 0x48	; 72
     3fa:	b1 e0       	ldi	r27, 0x01	; 1
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <.do_clear_bss_start>

000003fe <.do_clear_bss_loop>:
     3fe:	1d 92       	st	X+, r1

00000400 <.do_clear_bss_start>:
     400:	aa 38       	cpi	r26, 0x8A	; 138
     402:	b1 07       	cpc	r27, r17
     404:	e1 f7       	brne	.-8      	; 0x3fe <.do_clear_bss_loop>
     406:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <main>
     40a:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <_exit>

0000040e <__bad_interrupt>:
     40e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000412 <initialize_interrupts>:
uint8_t transmit_buffer[32] = {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',};
uint8_t receive_buffer[32] = {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',};
uint8_t next = 0;

void initialize_interrupts(void){
    TIMSK1 = (1<<TOIE1);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 6f 00 	sts	0x006F, r24
    }
     418:	08 95       	ret

0000041a <level>:
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void level(uint8_t layer){
    switch(layer){
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	f9 f0       	breq	.+62     	; 0x45c <level+0x42>
     41e:	83 30       	cpi	r24, 0x03	; 3
     420:	40 f0       	brcs	.+16     	; 0x432 <level+0x18>
     422:	83 30       	cpi	r24, 0x03	; 3
     424:	09 f1       	breq	.+66     	; 0x468 <level+0x4e>
     426:	84 30       	cpi	r24, 0x04	; 4
     428:	91 f0       	breq	.+36     	; 0x44e <level+0x34>
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
            return;
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
     42a:	85 b1       	in	r24, 0x05	; 5
     42c:	80 67       	ori	r24, 0x70	; 112
     42e:	85 b9       	out	0x05, r24	; 5
     430:	08 95       	ret
	TCCR0  |=  (1<<CS00);   //normal mode, no prescale
}
*/

void level(uint8_t layer){
    switch(layer){
     432:	88 23       	and	r24, r24
     434:	39 f0       	breq	.+14     	; 0x444 <level+0x2a>
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	c1 f7       	brne	.-16     	; 0x42a <level+0x10>
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
            return;
        case 1:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     43a:	85 b1       	in	r24, 0x05	; 5
     43c:	8f 78       	andi	r24, 0x8F	; 143
     43e:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(0<<PB5)|(0<<PB6));
     440:	2c 9a       	sbi	0x05, 4	; 5
            return;
     442:	08 95       	ret
        case 0:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     444:	85 b1       	in	r24, 0x05	; 5
     446:	8f 78       	andi	r24, 0x8F	; 143
     448:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(1<<PB5)|(0<<PB6));
     44a:	2d 9a       	sbi	0x05, 5	; 5
            return;
     44c:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     44e:	85 b1       	in	r24, 0x05	; 5
     450:	8f 78       	andi	r24, 0x8F	; 143
     452:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
     454:	85 b1       	in	r24, 0x05	; 5
     456:	80 63       	ori	r24, 0x30	; 48
     458:	85 b9       	out	0x05, r24	; 5
            return;
     45a:	08 95       	ret
*/

void level(uint8_t layer){
    switch(layer){
        case 2:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     45c:	85 b1       	in	r24, 0x05	; 5
     45e:	8f 78       	andi	r24, 0x8F	; 143
     460:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(0<<PB6));
     462:	85 b1       	in	r24, 0x05	; 5
     464:	85 b9       	out	0x05, r24	; 5
            return;
     466:	08 95       	ret
        case 4:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
            PORTB |= ((1<<PB4)|(1<<PB5)|(0<<PB6));
            return;
        case 3:
            PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6));
     468:	85 b1       	in	r24, 0x05	; 5
     46a:	8f 78       	andi	r24, 0x8F	; 143
     46c:	85 b9       	out	0x05, r24	; 5
            PORTB |= ((0<<PB4)|(0<<PB5)|(1<<PB6));
     46e:	2e 9a       	sbi	0x05, 6	; 5
            return;
     470:	08 95       	ret

00000472 <transmit1>:
        default:
            PORTB |= ((1<<PB4)|(1<<PB5)|(1<<PB6));
            }
}

void transmit1(uint16_t data1,uint16_t data2,uint16_t data3,uint16_t data4,uint16_t data5){
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
	
	uint8_t temp = 0;

	temp = (data1);
	//load first byte
	SPDR = temp;
     476:	8e bd       	out	0x2e, r24	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     478:	0d b4       	in	r0, 0x2d	; 45
     47a:	07 fe       	sbrs	r0, 7
     47c:	fd cf       	rjmp	.-6      	; 0x478 <transmit1+0x6>

	temp = (data1>>8);
	//load second byte
	SPDR = temp;
     47e:	9e bd       	out	0x2e, r25	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     480:	0d b4       	in	r0, 0x2d	; 45
     482:	07 fe       	sbrs	r0, 7
     484:	fd cf       	rjmp	.-6      	; 0x480 <transmit1+0xe>

	temp = (data2);
	//load third byte
	SPDR = temp;
     486:	6e bd       	out	0x2e, r22	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     488:	0d b4       	in	r0, 0x2d	; 45
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <transmit1+0x16>

	temp = (data2>>8);
	//load fourth byte
	SPDR = temp;
     48e:	7e bd       	out	0x2e, r23	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     490:	0d b4       	in	r0, 0x2d	; 45
     492:	07 fe       	sbrs	r0, 7
     494:	fd cf       	rjmp	.-6      	; 0x490 <transmit1+0x1e>

	temp = (data3);
	//load first byte
	SPDR = temp;
     496:	4e bd       	out	0x2e, r20	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     498:	0d b4       	in	r0, 0x2d	; 45
     49a:	07 fe       	sbrs	r0, 7
     49c:	fd cf       	rjmp	.-6      	; 0x498 <transmit1+0x26>

	temp = (data3>>8);
	//load second byte
	SPDR = temp;
     49e:	5e bd       	out	0x2e, r21	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4a0:	0d b4       	in	r0, 0x2d	; 45
     4a2:	07 fe       	sbrs	r0, 7
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <transmit1+0x2e>

	temp = (data4);
	//load third byte
	SPDR = temp;
     4a6:	2e bd       	out	0x2e, r18	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4a8:	0d b4       	in	r0, 0x2d	; 45
     4aa:	07 fe       	sbrs	r0, 7
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <transmit1+0x36>

	temp = (data4>>8);
	//load fourth byte
	SPDR = temp;
     4ae:	3e bd       	out	0x2e, r19	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4b0:	0d b4       	in	r0, 0x2d	; 45
     4b2:	07 fe       	sbrs	r0, 7
     4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <transmit1+0x3e>

	temp = (data5);
	//load first byte
	SPDR = temp;
     4b6:	0e bd       	out	0x2e, r16	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <transmit1+0x46>

	temp = (data5>>8);
	//load second byte
	SPDR = temp;
     4be:	1e bd       	out	0x2e, r17	; 46
	//temp = 0x0F & display_count;
	while(bit_is_clear(SPSR,SPIF)){};
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <transmit1+0x4e>

	//Toggle latch
	PORTA |= (1<<SS);
     4c6:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     4c8:	16 98       	cbi	0x02, 6	; 2
}
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	08 95       	ret

000004d0 <transmit2>:

void transmit2(uint8_t layer){
     4d0:	1f 93       	push	r17
     4d2:	18 2f       	mov	r17, r24
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
     4d4:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
     4d8:	81 2f       	mov	r24, r17
     4da:	90 e0       	ldi	r25, 0x00	; 0
    for(i=5;i-- > 0; ){
     4dc:	44 e0       	ldi	r20, 0x04	; 4
     4de:	9c 01       	movw	r18, r24
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
        temp = (frame[layer][i]);
     4e8:	28 0f       	add	r18, r24
     4ea:	39 1f       	adc	r19, r25
     4ec:	e4 2f       	mov	r30, r20
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	d9 01       	movw	r26, r18
     4f2:	ae 0f       	add	r26, r30
     4f4:	bf 1f       	adc	r27, r31
     4f6:	aa 0f       	add	r26, r26
     4f8:	bb 1f       	adc	r27, r27
     4fa:	a8 5b       	subi	r26, 0xB8	; 184
     4fc:	be 4f       	sbci	r27, 0xFE	; 254
     4fe:	8c 91       	ld	r24, X
        //load first byte
        SPDR = temp;
     500:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
     506:	fd cf       	rjmp	.-6      	; 0x502 <transmit2+0x32>

        temp = (frame[layer][i]>>8);
     508:	d9 01       	movw	r26, r18
     50a:	ae 0f       	add	r26, r30
     50c:	bf 1f       	adc	r27, r31
     50e:	aa 0f       	add	r26, r26
     510:	bb 1f       	adc	r27, r27
     512:	a8 5b       	subi	r26, 0xB8	; 184
     514:	be 4f       	sbci	r27, 0xFE	; 254
     516:	11 96       	adiw	r26, 0x01	; 1
     518:	8c 91       	ld	r24, X
     51a:	11 97       	sbiw	r26, 0x01	; 1
        //load second byte
        SPDR = temp;
     51c:	8e bd       	out	0x2e, r24	; 46
        //temp = 0x0F & display_count;
        while(bit_is_clear(SPSR,SPIF)){};
     51e:	0d b4       	in	r0, 0x2d	; 45
     520:	07 fe       	sbrs	r0, 7
     522:	fd cf       	rjmp	.-6      	; 0x51e <transmit2+0x4e>
        frame[layer][i] = 0;
     524:	e2 0f       	add	r30, r18
     526:	f3 1f       	adc	r31, r19
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	e8 5b       	subi	r30, 0xB8	; 184
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	11 82       	std	Z+1, r1	; 0x01
     532:	10 82       	st	Z, r1

void transmit2(uint8_t layer){
	uint8_t temp = 0;
    uint8_t i = 0;
    level(layer);
    for(i=5;i-- > 0; ){
     534:	44 23       	and	r20, r20
     536:	11 f0       	breq	.+4      	; 0x53c <transmit2+0x6c>
     538:	41 50       	subi	r20, 0x01	; 1
     53a:	d8 cf       	rjmp	.-80     	; 0x4ec <transmit2+0x1c>
        while(bit_is_clear(SPSR,SPIF)){};
        frame[layer][i] = 0;
    }

	//Toggle latch
	PORTA |= (1<<SS);
     53c:	16 9a       	sbi	0x02, 6	; 2
	PORTA &= ~(1<<SS);
     53e:	16 98       	cbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     540:	8f e6       	ldi	r24, 0x6F	; 111
     542:	97 e1       	ldi	r25, 0x17	; 23
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <transmit2+0x74>
     548:	00 c0       	rjmp	.+0      	; 0x54a <transmit2+0x7a>
     54a:	00 00       	nop
    _delay_ms(3);
    //_delay_us(300);
}
     54c:	1f 91       	pop	r17
     54e:	08 95       	ret

00000550 <level_test>:


void level_test(void){
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     55a:	8f 2d       	mov	r24, r15
     55c:	81 50       	subi	r24, 0x01	; 1
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	e1 f0       	breq	.+56     	; 0x59a <level_test+0x4a>
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	e0 f4       	brcc	.+56     	; 0x59e <level_test+0x4e>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	09 f4       	brne	.+2      	; 0x56c <level_test+0x1c>
     56a:	41 c0       	rjmp	.+130    	; 0x5ee <level_test+0x9e>
            case 0:
                level(i);
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
                transmit1(on,on,on,on,on);
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	9f ef       	ldi	r25, 0xFF	; 255
     576:	6f ef       	ldi	r22, 0xFF	; 255
     578:	7f ef       	ldi	r23, 0xFF	; 255
     57a:	4f ef       	ldi	r20, 0xFF	; 255
     57c:	5f ef       	ldi	r21, 0xFF	; 255
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	3f ef       	ldi	r19, 0xFF	; 255
     582:	0f ef       	ldi	r16, 0xFF	; 255
     584:	1f ef       	ldi	r17, 0xFF	; 255
     586:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>

void level_test(void){
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){
     58a:	8f 2d       	mov	r24, r15
     58c:	85 30       	cpi	r24, 0x05	; 5
     58e:	d0 f4       	brcc	.+52     	; 0x5c4 <level_test+0x74>
    _delay_ms(3);
    //_delay_us(300);
}


void level_test(void){
     590:	f3 94       	inc	r15
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     592:	8f 2d       	mov	r24, r15
     594:	81 50       	subi	r24, 0x01	; 1
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	21 f7       	brne	.-56     	; 0x562 <level_test+0x12>
            case 1:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 2:
                level(i);
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	18 c0       	rjmp	.+48     	; 0x5ce <level_test+0x7e>
    uint16_t on = 0xFFFF;
    uint16_t off = 0x0000;
    uint8_t i = 0;
    for(i = 0; i<5;i++){

        switch(i){
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	a9 f0       	breq	.+42     	; 0x5cc <level_test+0x7c>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	19 f7       	brne	.-58     	; 0x56c <level_test+0x1c>
            case 3:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 4:
                level(i);
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
                transmit1(on,on,on,on,on);
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	6f ef       	ldi	r22, 0xFF	; 255
     5b2:	7f ef       	ldi	r23, 0xFF	; 255
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	5f ef       	ldi	r21, 0xFF	; 255
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	3f ef       	ldi	r19, 0xFF	; 255
     5bc:	0f ef       	ldi	r16, 0xFF	; 255
     5be:	1f ef       	ldi	r17, 0xFF	; 255
     5c0:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>
                break;
        }
    }
}
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	08 95       	ret
            case 2:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 3:
                level(i);
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
                transmit1(on,on,on,on,on);
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
     5d6:	6f ef       	ldi	r22, 0xFF	; 255
     5d8:	7f ef       	ldi	r23, 0xFF	; 255
     5da:	4f ef       	ldi	r20, 0xFF	; 255
     5dc:	5f ef       	ldi	r21, 0xFF	; 255
     5de:	2f ef       	ldi	r18, 0xFF	; 255
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	0f ef       	ldi	r16, 0xFF	; 255
     5e4:	1f ef       	ldi	r17, 0xFF	; 255
     5e6:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>
    _delay_ms(3);
    //_delay_us(300);
}


void level_test(void){
     5ea:	f3 94       	inc	r15
     5ec:	d2 cf       	rjmp	.-92     	; 0x592 <level_test+0x42>
            case 0:
                level(i);
                transmit1(on,on,on,on,on);
                break;
            case 1:
                level(i);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	ee cf       	rjmp	.-36     	; 0x5ce <level_test+0x7e>

000005f2 <shift_LED>:
        }
    }
}


void shift_LED(void){
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
    static uint8_t first4 = 1;
    static uint8_t first5 = 1;

    static uint8_t layer = 0;

    level(layer);
     5f8:	f0 90 80 01 	lds	r15, 0x0180
     5fc:	8f 2d       	mov	r24, r15
     5fe:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
    //level(0);


    if(LED1 == 0)
     602:	00 91 45 01 	lds	r16, 0x0145
     606:	10 91 46 01 	lds	r17, 0x0146
     60a:	01 15       	cp	r16, r1
     60c:	11 05       	cpc	r17, r1
     60e:	e1 f4       	brne	.+56     	; 0x648 <shift_LED+0x56>
    {
        if(first2){
     610:	80 91 43 01 	lds	r24, 0x0143
     614:	88 23       	and	r24, r24
     616:	09 f4       	brne	.+2      	; 0x61a <shift_LED+0x28>
     618:	4b c0       	rjmp	.+150    	; 0x6b0 <shift_LED+0xbe>
            LED2 = 0x0001;
            first2 = 0;
     61a:	10 92 43 01 	sts	0x0143, r1
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(~first2 && LED2){
            LED2 = LED2 << 1;
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	30 93 88 01 	sts	0x0188, r19
     62a:	20 93 87 01 	sts	0x0187, r18
     62e:	e0 91 81 01 	lds	r30, 0x0181
     632:	f0 91 82 01 	lds	r31, 0x0182
     636:	60 91 83 01 	lds	r22, 0x0183
     63a:	70 91 84 01 	lds	r23, 0x0184
     63e:	40 91 85 01 	lds	r20, 0x0185
     642:	50 91 86 01 	lds	r21, 0x0186
     646:	1b c0       	rjmp	.+54     	; 0x67e <shift_LED+0x8c>
            }
        }
    }
    else
    {
        if(first1){
     648:	80 91 44 01 	lds	r24, 0x0144
     64c:	88 23       	and	r24, r24
     64e:	09 f0       	breq	.+2      	; 0x652 <shift_LED+0x60>
     650:	7c c0       	rjmp	.+248    	; 0x74a <shift_LED+0x158>
            first1 = 0;
        }
        else{
            LED1 = LED1 << 1;
     652:	00 0f       	add	r16, r16
     654:	11 1f       	adc	r17, r17
     656:	10 93 46 01 	sts	0x0146, r17
     65a:	00 93 45 01 	sts	0x0145, r16
     65e:	e0 91 81 01 	lds	r30, 0x0181
     662:	f0 91 82 01 	lds	r31, 0x0182
     666:	60 91 83 01 	lds	r22, 0x0183
     66a:	70 91 84 01 	lds	r23, 0x0184
     66e:	40 91 85 01 	lds	r20, 0x0185
     672:	50 91 86 01 	lds	r21, 0x0186
     676:	20 91 87 01 	lds	r18, 0x0187
     67a:	30 91 88 01 	lds	r19, 0x0188
        }
    }

    transmit1(LED5,LED4,LED3,LED2,LED1);
     67e:	cf 01       	movw	r24, r30
     680:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>
     684:	8f e7       	ldi	r24, 0x7F	; 127
     686:	98 e3       	ldi	r25, 0x38	; 56
     688:	a1 e0       	ldi	r26, 0x01	; 1
     68a:	81 50       	subi	r24, 0x01	; 1
     68c:	90 40       	sbci	r25, 0x00	; 0
     68e:	a0 40       	sbci	r26, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <shift_LED+0x98>
     692:	00 c0       	rjmp	.+0      	; 0x694 <shift_LED+0xa2>
     694:	00 00       	nop
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	94 e3       	ldi	r25, 0x34	; 52
     69a:	ac e0       	ldi	r26, 0x0C	; 12
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	90 40       	sbci	r25, 0x00	; 0
     6a0:	a0 40       	sbci	r26, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <shift_LED+0xaa>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <shift_LED+0xb4>
     6a6:	00 00       	nop
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	08 95       	ret
    //level(0);


    if(LED1 == 0)
    {
        if(first2){
     6b0:	20 91 87 01 	lds	r18, 0x0187
     6b4:	30 91 88 01 	lds	r19, 0x0188
            LED2 = 0x0001;
            first2 = 0;
        }
        if(~first2 && LED2){
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <shift_LED+0xce>
     6be:	b1 cf       	rjmp	.-158    	; 0x622 <shift_LED+0x30>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
     6c0:	80 91 42 01 	lds	r24, 0x0142
     6c4:	88 23       	and	r24, r24
     6c6:	09 f0       	breq	.+2      	; 0x6ca <shift_LED+0xd8>
     6c8:	53 c0       	rjmp	.+166    	; 0x770 <shift_LED+0x17e>
     6ca:	40 91 85 01 	lds	r20, 0x0185
     6ce:	50 91 86 01 	lds	r21, 0x0186
                LED3= 0x0001;
                first3 = 0;
            }
            if(~first3 && LED3){
     6d2:	41 15       	cp	r20, r1
     6d4:	51 05       	cpc	r21, r1
     6d6:	09 f0       	breq	.+2      	; 0x6da <shift_LED+0xe8>
     6d8:	4f c0       	rjmp	.+158    	; 0x778 <shift_LED+0x186>
                LED3 = LED3 << 1;
            }
            else{
                if(first4){
     6da:	80 91 41 01 	lds	r24, 0x0141
     6de:	88 23       	and	r24, r24
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <shift_LED+0xf2>
     6e2:	5b c0       	rjmp	.+182    	; 0x79a <shift_LED+0x1a8>
     6e4:	00 91 83 01 	lds	r16, 0x0183
     6e8:	10 91 84 01 	lds	r17, 0x0184
                    LED4= 0x0001;
                    first4 = 0;
                }
                if(~first4 && LED4){
     6ec:	01 15       	cp	r16, r1
     6ee:	11 05       	cpc	r17, r1
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <shift_LED+0x102>
     6f2:	57 c0       	rjmp	.+174    	; 0x7a2 <shift_LED+0x1b0>
                    LED4 = LED4 << 1;
                }
                else{
                    if(first5){
     6f4:	80 91 40 01 	lds	r24, 0x0140
     6f8:	88 23       	and	r24, r24
     6fa:	09 f0       	breq	.+2      	; 0x6fe <shift_LED+0x10c>
     6fc:	62 c0       	rjmp	.+196    	; 0x7c2 <shift_LED+0x1d0>
     6fe:	e0 91 81 01 	lds	r30, 0x0181
     702:	f0 91 82 01 	lds	r31, 0x0182
                        LED5= 0x0001;
                        first5 = 0;
                    }
                    if(~first5 && LED5){
     706:	30 97       	sbiw	r30, 0x00	; 0
     708:	09 f0       	breq	.+2      	; 0x70c <shift_LED+0x11a>
     70a:	5f c0       	rjmp	.+190    	; 0x7ca <shift_LED+0x1d8>
                        LED5 = LED5 << 1;
                    }
                    else{
                        LED1 = 0x0001;
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	30 93 46 01 	sts	0x0146, r19
     714:	20 93 45 01 	sts	0x0145, r18
                        first1 = first2 = first3 = first4 = first5 = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 40 01 	sts	0x0140, r24
     71e:	80 93 41 01 	sts	0x0141, r24
     722:	80 93 42 01 	sts	0x0142, r24
     726:	80 93 43 01 	sts	0x0143, r24
     72a:	80 93 44 01 	sts	0x0144, r24
                        layer++;
     72e:	8f 2d       	mov	r24, r15
     730:	8f 5f       	subi	r24, 0xFF	; 255
                        layer = layer % 5;
     732:	65 e0       	ldi	r22, 0x05	; 5
     734:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodqi4>
     738:	90 93 80 01 	sts	0x0180, r25
     73c:	9f 01       	movw	r18, r30
     73e:	af 01       	movw	r20, r30
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	01 e0       	ldi	r16, 0x01	; 1
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	9a cf       	rjmp	.-204    	; 0x67e <shift_LED+0x8c>
        }
    }
    else
    {
        if(first1){
            first1 = 0;
     74a:	10 92 44 01 	sts	0x0144, r1
     74e:	e0 91 81 01 	lds	r30, 0x0181
     752:	f0 91 82 01 	lds	r31, 0x0182
     756:	60 91 83 01 	lds	r22, 0x0183
     75a:	70 91 84 01 	lds	r23, 0x0184
     75e:	40 91 85 01 	lds	r20, 0x0185
     762:	50 91 86 01 	lds	r21, 0x0186
     766:	20 91 87 01 	lds	r18, 0x0187
     76a:	30 91 88 01 	lds	r19, 0x0188
     76e:	87 cf       	rjmp	.-242    	; 0x67e <shift_LED+0x8c>
            LED2 = LED2 << 1;
        }
        else{
            if(first3){
                LED3= 0x0001;
                first3 = 0;
     770:	10 92 42 01 	sts	0x0142, r1
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	50 e0       	ldi	r21, 0x00	; 0
            }
            if(~first3 && LED3){
                LED3 = LED3 << 1;
     778:	44 0f       	add	r20, r20
     77a:	55 1f       	adc	r21, r21
     77c:	50 93 86 01 	sts	0x0186, r21
     780:	40 93 85 01 	sts	0x0185, r20
     784:	e0 91 81 01 	lds	r30, 0x0181
     788:	f0 91 82 01 	lds	r31, 0x0182
     78c:	60 91 83 01 	lds	r22, 0x0183
     790:	70 91 84 01 	lds	r23, 0x0184
     794:	00 e0       	ldi	r16, 0x00	; 0
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	72 cf       	rjmp	.-284    	; 0x67e <shift_LED+0x8c>
            }
            else{
                if(first4){
                    LED4= 0x0001;
                    first4 = 0;
     79a:	10 92 41 01 	sts	0x0141, r1
     79e:	01 e0       	ldi	r16, 0x01	; 1
     7a0:	10 e0       	ldi	r17, 0x00	; 0
                }
                if(~first4 && LED4){
                    LED4 = LED4 << 1;
     7a2:	b8 01       	movw	r22, r16
     7a4:	66 0f       	add	r22, r22
     7a6:	77 1f       	adc	r23, r23
     7a8:	70 93 84 01 	sts	0x0184, r23
     7ac:	60 93 83 01 	sts	0x0183, r22
     7b0:	e0 91 81 01 	lds	r30, 0x0181
     7b4:	f0 91 82 01 	lds	r31, 0x0182
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	5e cf       	rjmp	.-324    	; 0x67e <shift_LED+0x8c>
                }
                else{
                    if(first5){
                        LED5= 0x0001;
                        first5 = 0;
     7c2:	10 92 40 01 	sts	0x0140, r1
     7c6:	e1 e0       	ldi	r30, 0x01	; 1
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
                    }
                    if(~first5 && LED5){
                        LED5 = LED5 << 1;
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	f0 93 82 01 	sts	0x0182, r31
     7d2:	e0 93 81 01 	sts	0x0181, r30
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	4d cf       	rjmp	.-358    	; 0x67e <shift_LED+0x8c>

000007e4 <hall_test>:
    //transmit1(LED1,LED2,LED3,LED4,LED5);
    _delay_ms(50);
    _delay_ms(500);
    }

void hall_test(void){
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     7e8:	83 b1       	in	r24, 0x03	; 3
     7ea:	80 95       	com	r24
     7ec:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	d1 f0       	breq	.+52     	; 0x826 <hall_test+0x42>
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	40 f5       	brcc	.+80     	; 0x846 <hall_test+0x62>
     7f6:	88 23       	and	r24, r24
     7f8:	81 f1       	breq	.+96     	; 0x85a <hall_test+0x76>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	61 f1       	breq	.+88     	; 0x856 <hall_test+0x72>
            case 8:
                level(4);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            default:
                level(0);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
                transmit1(C1P2,0,0,0,0);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>
    }

void hall_test(void){
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
     81c:	83 b1       	in	r24, 0x03	; 3
     81e:	80 95       	com	r24
     820:	8f 70       	andi	r24, 0x0F	; 15
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	31 f7       	brne	.-52     	; 0x7f2 <hall_test+0xe>
            case 1:
                level(1);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 2:
                level(2);
     826:	82 e0       	ldi	r24, 0x02	; 2
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     828:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
                transmit1(0,0,C1P3,C1P2,0);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	51 e0       	ldi	r21, 0x01	; 1
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	32 e0       	ldi	r19, 0x02	; 2
     83c:	00 e0       	ldi	r16, 0x00	; 0
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>
                break;
     844:	d1 cf       	rjmp	.-94     	; 0x7e8 <hall_test+0x4>
    uint8_t input = 0;
    while(1){
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	21 f0       	breq	.+8      	; 0x852 <hall_test+0x6e>
     84a:	88 30       	cpi	r24, 0x08	; 8
     84c:	c1 f6       	brne	.-80     	; 0x7fe <hall_test+0x1a>
            case 4:
                level(3);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 8:
                level(4);
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	eb cf       	rjmp	.-42     	; 0x828 <hall_test+0x44>
            case 2:
                level(2);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 4:
                level(3);
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	e9 cf       	rjmp	.-46     	; 0x828 <hall_test+0x44>
            case 0:
                level(0);
                transmit1(0,0,C1P3,C1P2,0);
                break;
            case 1:
                level(1);
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	e7 cf       	rjmp	.-50     	; 0x828 <hall_test+0x44>
        input = (~PINB & ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)));
        //transmit1(C1P3,0,0,0,0);
        //level(1);
        switch(input){
            case 0:
                level(0);
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	e5 cf       	rjmp	.-54     	; 0x828 <hall_test+0x44>

0000085e <red>:

}
}

void red(uint8_t position){
    switch(position){
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	89 31       	cpi	r24, 0x19	; 25
     864:	91 05       	cpc	r25, r1
     866:	a8 f0       	brcs	.+42     	; 0x892 <red+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P9;
            break;
        default:
            frame[0][0] = 0x0000;
     868:	10 92 49 01 	sts	0x0149, r1
     86c:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     870:	10 92 4b 01 	sts	0x014B, r1
     874:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     878:	10 92 4d 01 	sts	0x014D, r1
     87c:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     880:	10 92 4f 01 	sts	0x014F, r1
     884:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     888:	10 92 51 01 	sts	0x0151, r1
     88c:	10 92 50 01 	sts	0x0150, r1
     890:	08 95       	ret

}
}

void red(uint8_t position){
    switch(position){
     892:	88 5d       	subi	r24, 0xD8	; 216
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	fc 01       	movw	r30, r24
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	05 90       	lpm	r0, Z+
     89e:	f4 91       	lpm	r31, Z+
     8a0:	e0 2d       	mov	r30, r0
     8a2:	09 94       	ijmp
            frame[0][2] = C3P14;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     8a4:	10 92 49 01 	sts	0x0149, r1
     8a8:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     8ac:	10 92 4b 01 	sts	0x014B, r1
     8b0:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P9;
     8b4:	88 e1       	ldi	r24, 0x18	; 24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 4d 01 	sts	0x014D, r25
     8bc:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     8c0:	10 92 4f 01 	sts	0x014F, r1
     8c4:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     8c8:	10 92 51 01 	sts	0x0151, r1
     8cc:	10 92 50 01 	sts	0x0150, r1
            break;
     8d0:	08 95       	ret
        case 6:
            frame[0][0] = 0x0000;
     8d2:	10 92 49 01 	sts	0x0149, r1
     8d6:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P11;
     8da:	80 e1       	ldi	r24, 0x10	; 16
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 93 4b 01 	sts	0x014B, r25
     8e2:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     8e6:	10 92 4d 01 	sts	0x014D, r1
     8ea:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     8ee:	10 92 4f 01 	sts	0x014F, r1
     8f2:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     8f6:	10 92 51 01 	sts	0x0151, r1
     8fa:	10 92 50 01 	sts	0x0150, r1
            break;
     8fe:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P3;
            break;
        case 24:
            frame[0][0] = 0x0000;
     900:	10 92 49 01 	sts	0x0149, r1
     904:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     908:	10 92 4b 01 	sts	0x014B, r1
     90c:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     910:	10 92 4d 01 	sts	0x014D, r1
     914:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     918:	10 92 4f 01 	sts	0x014F, r1
     91c:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P4;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e2       	ldi	r25, 0x20	; 32
     924:	90 93 51 01 	sts	0x0151, r25
     928:	80 93 50 01 	sts	0x0150, r24
            break;
     92c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
     92e:	10 92 49 01 	sts	0x0149, r1
     932:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     936:	10 92 4b 01 	sts	0x014B, r1
     93a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P15;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	90 93 4d 01 	sts	0x014D, r25
     946:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     94a:	10 92 4f 01 	sts	0x014F, r1
     94e:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     952:	10 92 51 01 	sts	0x0151, r1
     956:	10 92 50 01 	sts	0x0150, r1
            break;
     95a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
     95c:	10 92 49 01 	sts	0x0149, r1
     960:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P7;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e1       	ldi	r25, 0x10	; 16
     968:	90 93 4b 01 	sts	0x014B, r25
     96c:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     970:	10 92 4d 01 	sts	0x014D, r1
     974:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     978:	10 92 4f 01 	sts	0x014F, r1
     97c:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     980:	10 92 51 01 	sts	0x0151, r1
     984:	10 92 50 01 	sts	0x0150, r1
            break;
     988:	08 95       	ret
}

void red(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
     98a:	10 92 49 01 	sts	0x0149, r1
     98e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P8;
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 4b 01 	sts	0x014B, r25
     99a:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     99e:	10 92 4d 01 	sts	0x014D, r1
     9a2:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     9a6:	10 92 4f 01 	sts	0x014F, r1
     9aa:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     9ae:	10 92 51 01 	sts	0x0151, r1
     9b2:	10 92 50 01 	sts	0x0150, r1
            break;
     9b6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P4;
            break;
        case 25:
            frame[0][0] = 0x0000;
     9b8:	10 92 49 01 	sts	0x0149, r1
     9bc:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     9c0:	10 92 4b 01 	sts	0x014B, r1
     9c4:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     9c8:	10 92 4d 01 	sts	0x014D, r1
     9cc:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     9d0:	10 92 4f 01 	sts	0x014F, r1
     9d4:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P9;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e4       	ldi	r25, 0x40	; 64
     9dc:	90 93 51 01 	sts	0x0151, r25
     9e0:	80 93 50 01 	sts	0x0150, r24
            break;
     9e4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     9e6:	10 92 49 01 	sts	0x0149, r1
     9ea:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     9ee:	10 92 4b 01 	sts	0x014B, r1
     9f2:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     9f6:	10 92 4d 01 	sts	0x014D, r1
     9fa:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     9fe:	10 92 4f 01 	sts	0x014F, r1
     a02:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P3;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	90 93 51 01 	sts	0x0151, r25
     a0e:	80 93 50 01 	sts	0x0150, r24
            break;
     a12:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P16;
     a14:	80 e2       	ldi	r24, 0x20	; 32
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	90 93 49 01 	sts	0x0149, r25
     a1c:	80 93 48 01 	sts	0x0148, r24
            frame[0][1] = 0x0000;
     a20:	10 92 4b 01 	sts	0x014B, r1
     a24:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     a28:	10 92 4d 01 	sts	0x014D, r1
     a2c:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     a30:	10 92 4f 01 	sts	0x014F, r1
     a34:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     a38:	10 92 51 01 	sts	0x0151, r1
     a3c:	10 92 50 01 	sts	0x0150, r1
            break;
     a40:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P12;
            break;
        case 21:
            frame[0][0] = C1P10;
     a42:	88 e1       	ldi	r24, 0x18	; 24
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	e8 cf       	rjmp	.-48     	; 0xa18 <red+0x1ba>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P13;
            break;
        case 20:
            frame[0][0] = 0x0000;
     a48:	10 92 49 01 	sts	0x0149, r1
     a4c:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     a50:	10 92 4b 01 	sts	0x014B, r1
     a54:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     a58:	10 92 4d 01 	sts	0x014D, r1
     a5c:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     a60:	10 92 4f 01 	sts	0x014F, r1
     a64:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P12;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 51 01 	sts	0x0151, r25
     a70:	80 93 50 01 	sts	0x0150, r24
            break;
     a74:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P14;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     a76:	10 92 49 01 	sts	0x0149, r1
     a7a:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     a7e:	10 92 4b 01 	sts	0x014B, r1
     a82:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     a86:	10 92 4d 01 	sts	0x014D, r1
     a8a:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     a8e:	10 92 4f 01 	sts	0x014F, r1
     a92:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P13;
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 51 01 	sts	0x0151, r25
     a9e:	80 93 50 01 	sts	0x0150, r24
            break;
     aa2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     aa4:	10 92 49 01 	sts	0x0149, r1
     aa8:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     aac:	10 92 4b 01 	sts	0x014B, r1
     ab0:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     ab4:	10 92 4d 01 	sts	0x014D, r1
     ab8:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P14;
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 4f 01 	sts	0x014F, r25
     ac4:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     ac8:	10 92 51 01 	sts	0x0151, r1
     acc:	10 92 50 01 	sts	0x0150, r1
            break;
     ad0:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P3;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	a0 cf       	rjmp	.-192    	; 0xa18 <red+0x1ba>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P3;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P7;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9d cf       	rjmp	.-198    	; 0xa18 <red+0x1ba>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P6;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     ade:	10 92 49 01 	sts	0x0149, r1
     ae2:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     ae6:	10 92 4b 01 	sts	0x014B, r1
     aea:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     aee:	10 92 4d 01 	sts	0x014D, r1
     af2:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P3;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	90 93 4f 01 	sts	0x014F, r25
     afe:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     b02:	10 92 51 01 	sts	0x0151, r1
     b06:	10 92 50 01 	sts	0x0150, r1
            break;
     b0a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P11;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     b0c:	10 92 49 01 	sts	0x0149, r1
     b10:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     b14:	10 92 4b 01 	sts	0x014B, r1
     b18:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     b1c:	10 92 4d 01 	sts	0x014D, r1
     b20:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P6;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	98 e0       	ldi	r25, 0x08	; 8
     b28:	90 93 4f 01 	sts	0x014F, r25
     b2c:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     b30:	10 92 51 01 	sts	0x0151, r1
     b34:	10 92 50 01 	sts	0x0150, r1
            break;
     b38:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     b3a:	10 92 49 01 	sts	0x0149, r1
     b3e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     b42:	10 92 4b 01 	sts	0x014B, r1
     b46:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     b4a:	10 92 4d 01 	sts	0x014D, r1
     b4e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P11;
     b52:	80 e1       	ldi	r24, 0x10	; 16
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 4f 01 	sts	0x014F, r25
     b5a:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     b5e:	10 92 51 01 	sts	0x0151, r1
     b62:	10 92 50 01 	sts	0x0150, r1
            break;
     b66:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P6;
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	98 e0       	ldi	r25, 0x08	; 8
     b6c:	55 cf       	rjmp	.-342    	; 0xa18 <red+0x1ba>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P7;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     b6e:	10 92 49 01 	sts	0x0149, r1
     b72:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P14;
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	90 93 4b 01 	sts	0x014B, r25
     b7e:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     b82:	10 92 4d 01 	sts	0x014D, r1
     b86:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     b8a:	10 92 4f 01 	sts	0x014F, r1
     b8e:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     b92:	10 92 51 01 	sts	0x0151, r1
     b96:	10 92 50 01 	sts	0x0150, r1
            break;
     b9a:	08 95       	ret
            frame[0][2] = C3P8;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     b9c:	10 92 49 01 	sts	0x0149, r1
     ba0:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     ba4:	10 92 4b 01 	sts	0x014B, r1
     ba8:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     bac:	10 92 4d 01 	sts	0x014D, r1
     bb0:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P7;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 4f 01 	sts	0x014F, r25
     bbc:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     bc0:	10 92 51 01 	sts	0x0151, r1
     bc4:	10 92 50 01 	sts	0x0150, r1
            break;
     bc8:	08 95       	ret
            frame[0][2] = C3P3;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     bca:	10 92 49 01 	sts	0x0149, r1
     bce:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     bd2:	10 92 4b 01 	sts	0x014B, r1
     bd6:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P8;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e2       	ldi	r25, 0x20	; 32
     bde:	90 93 4d 01 	sts	0x014D, r25
     be2:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     be6:	10 92 4f 01 	sts	0x014F, r1
     bea:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     bee:	10 92 51 01 	sts	0x0151, r1
     bf2:	10 92 50 01 	sts	0x0150, r1
            break;
     bf6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     bf8:	10 92 49 01 	sts	0x0149, r1
     bfc:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     c00:	10 92 4b 01 	sts	0x014B, r1
     c04:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P3;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e1       	ldi	r25, 0x10	; 16
     c0c:	90 93 4d 01 	sts	0x014D, r25
     c10:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     c14:	10 92 4f 01 	sts	0x014F, r1
     c18:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     c1c:	10 92 51 01 	sts	0x0151, r1
     c20:	10 92 50 01 	sts	0x0150, r1
            break;
     c24:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     c26:	10 92 49 01 	sts	0x0149, r1
     c2a:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P3;
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	90 93 4b 01 	sts	0x014B, r25
     c36:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     c3a:	10 92 4d 01 	sts	0x014D, r1
     c3e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     c42:	10 92 4f 01 	sts	0x014F, r1
     c46:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     c4a:	10 92 51 01 	sts	0x0151, r1
     c4e:	10 92 50 01 	sts	0x0150, r1
            break;
     c52:	08 95       	ret

00000c54 <green>:


}

void green(uint8_t position){
    switch(position){
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	89 31       	cpi	r24, 0x19	; 25
     c5a:	91 05       	cpc	r25, r1
     c5c:	a8 f0       	brcs	.+42     	; 0xc88 <green+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P8;
            break;
        default:
            frame[0][0] = 0x0000;
     c5e:	10 92 49 01 	sts	0x0149, r1
     c62:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     c66:	10 92 4b 01 	sts	0x014B, r1
     c6a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     c6e:	10 92 4d 01 	sts	0x014D, r1
     c72:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     c76:	10 92 4f 01 	sts	0x014F, r1
     c7a:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     c7e:	10 92 51 01 	sts	0x0151, r1
     c82:	10 92 50 01 	sts	0x0150, r1
     c86:	08 95       	ret


}

void green(uint8_t position){
    switch(position){
     c88:	8f 5b       	subi	r24, 0xBF	; 191
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	fc 01       	movw	r30, r24
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	05 90       	lpm	r0, Z+
     c94:	f4 91       	lpm	r31, Z+
     c96:	e0 2d       	mov	r30, r0
     c98:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P2;
            break;
        case 24:
            frame[0][0] = 0x0000;
     c9a:	10 92 49 01 	sts	0x0149, r1
     c9e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     ca2:	10 92 4b 01 	sts	0x014B, r1
     ca6:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     caa:	10 92 4d 01 	sts	0x014D, r1
     cae:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     cb2:	10 92 4f 01 	sts	0x014F, r1
     cb6:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P5;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e1       	ldi	r25, 0x10	; 16
     cbe:	90 93 51 01 	sts	0x0151, r25
     cc2:	80 93 50 01 	sts	0x0150, r24
            break;
     cc6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
     cc8:	10 92 49 01 	sts	0x0149, r1
     ccc:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     cd0:	10 92 4b 01 	sts	0x014B, r1
     cd4:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     cd8:	10 92 4d 01 	sts	0x014D, r1
     cdc:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     ce0:	10 92 4f 01 	sts	0x014F, r1
     ce4:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P2;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	90 93 51 01 	sts	0x0151, r25
     cf0:	80 93 50 01 	sts	0x0150, r24
            break;
     cf4:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P15;
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 49 01 	sts	0x0149, r25
     cfe:	80 93 48 01 	sts	0x0148, r24
            frame[0][1] = 0x0000;
     d02:	10 92 4b 01 	sts	0x014B, r1
     d06:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     d0a:	10 92 4d 01 	sts	0x014D, r1
     d0e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     d12:	10 92 4f 01 	sts	0x014F, r1
     d16:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     d1a:	10 92 51 01 	sts	0x0151, r1
     d1e:	10 92 50 01 	sts	0x0150, r1
            break;
     d22:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P11;
            break;
        case 21:
            frame[0][0] = C1P11;
     d24:	88 e1       	ldi	r24, 0x18	; 24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	e8 cf       	rjmp	.-48     	; 0xcfa <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P14;
            break;
        case 20:
            frame[0][0] = 0x0000;
     d2a:	10 92 49 01 	sts	0x0149, r1
     d2e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     d32:	10 92 4b 01 	sts	0x014B, r1
     d36:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     d3a:	10 92 4d 01 	sts	0x014D, r1
     d3e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     d42:	10 92 4f 01 	sts	0x014F, r1
     d46:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P11;
     d4a:	88 e1       	ldi	r24, 0x18	; 24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 51 01 	sts	0x0151, r25
     d52:	80 93 50 01 	sts	0x0150, r24
            break;
     d56:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P15;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
     d58:	10 92 49 01 	sts	0x0149, r1
     d5c:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     d60:	10 92 4b 01 	sts	0x014B, r1
     d64:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     d68:	10 92 4d 01 	sts	0x014D, r1
     d6c:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     d70:	10 92 4f 01 	sts	0x014F, r1
     d74:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P14;
     d78:	80 e2       	ldi	r24, 0x20	; 32
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	90 93 51 01 	sts	0x0151, r25
     d80:	80 93 50 01 	sts	0x0150, r24
            break;
     d84:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
     d86:	10 92 49 01 	sts	0x0149, r1
     d8a:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     d8e:	10 92 4b 01 	sts	0x014B, r1
     d92:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     d96:	10 92 4d 01 	sts	0x014D, r1
     d9a:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P15;
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	90 93 4f 01 	sts	0x014F, r25
     da6:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     daa:	10 92 51 01 	sts	0x0151, r1
     dae:	10 92 50 01 	sts	0x0150, r1
            break;
     db2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P2;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	a0 cf       	rjmp	.-192    	; 0xcfa <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P2;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P8;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e8       	ldi	r25, 0x80	; 128
     dbe:	9d cf       	rjmp	.-198    	; 0xcfa <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P5;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
     dc0:	10 92 49 01 	sts	0x0149, r1
     dc4:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     dc8:	10 92 4b 01 	sts	0x014B, r1
     dcc:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     dd0:	10 92 4d 01 	sts	0x014D, r1
     dd4:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P2;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	90 93 4f 01 	sts	0x014F, r25
     de0:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     de4:	10 92 51 01 	sts	0x0151, r1
     de8:	10 92 50 01 	sts	0x0150, r1
            break;
     dec:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P12;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
     dee:	10 92 49 01 	sts	0x0149, r1
     df2:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     df6:	10 92 4b 01 	sts	0x014B, r1
     dfa:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     dfe:	10 92 4d 01 	sts	0x014D, r1
     e02:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P5;
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e1       	ldi	r25, 0x10	; 16
     e0a:	90 93 4f 01 	sts	0x014F, r25
     e0e:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     e12:	10 92 51 01 	sts	0x0151, r1
     e16:	10 92 50 01 	sts	0x0150, r1
            break;
     e1a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
     e1c:	10 92 49 01 	sts	0x0149, r1
     e20:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     e24:	10 92 4b 01 	sts	0x014B, r1
     e28:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     e2c:	10 92 4d 01 	sts	0x014D, r1
     e30:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P12;
     e34:	88 e1       	ldi	r24, 0x18	; 24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 4f 01 	sts	0x014F, r25
     e3c:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     e40:	10 92 51 01 	sts	0x0151, r1
     e44:	10 92 50 01 	sts	0x0150, r1
            break;
     e48:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P5;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e1       	ldi	r25, 0x10	; 16
     e4e:	55 cf       	rjmp	.-342    	; 0xcfa <green+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P8;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
     e50:	10 92 49 01 	sts	0x0149, r1
     e54:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P15;
     e58:	80 e4       	ldi	r24, 0x40	; 64
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	90 93 4b 01 	sts	0x014B, r25
     e60:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     e64:	10 92 4d 01 	sts	0x014D, r1
     e68:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     e6c:	10 92 4f 01 	sts	0x014F, r1
     e70:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     e74:	10 92 51 01 	sts	0x0151, r1
     e78:	10 92 50 01 	sts	0x0150, r1
            break;
     e7c:	08 95       	ret
            frame[0][2] = C3P7;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
     e7e:	10 92 49 01 	sts	0x0149, r1
     e82:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     e86:	10 92 4b 01 	sts	0x014B, r1
     e8a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
     e8e:	10 92 4d 01 	sts	0x014D, r1
     e92:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P8;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e8       	ldi	r25, 0x80	; 128
     e9a:	90 93 4f 01 	sts	0x014F, r25
     e9e:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
     ea2:	10 92 51 01 	sts	0x0151, r1
     ea6:	10 92 50 01 	sts	0x0150, r1
            break;
     eaa:	08 95       	ret
            frame[0][2] = C3P4;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
     eac:	10 92 49 01 	sts	0x0149, r1
     eb0:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     eb4:	10 92 4b 01 	sts	0x014B, r1
     eb8:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P7;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e4       	ldi	r25, 0x40	; 64
     ec0:	90 93 4d 01 	sts	0x014D, r25
     ec4:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     ec8:	10 92 4f 01 	sts	0x014F, r1
     ecc:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     ed0:	10 92 51 01 	sts	0x0151, r1
     ed4:	10 92 50 01 	sts	0x0150, r1
            break;
     ed8:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
     eda:	10 92 49 01 	sts	0x0149, r1
     ede:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     ee2:	10 92 4b 01 	sts	0x014B, r1
     ee6:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P4;
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	98 e0       	ldi	r25, 0x08	; 8
     eee:	90 93 4d 01 	sts	0x014D, r25
     ef2:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     ef6:	10 92 4f 01 	sts	0x014F, r1
     efa:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     efe:	10 92 51 01 	sts	0x0151, r1
     f02:	10 92 50 01 	sts	0x0150, r1
            break;
     f06:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
     f08:	10 92 49 01 	sts	0x0149, r1
     f0c:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P2;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	90 93 4b 01 	sts	0x014B, r25
     f18:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     f1c:	10 92 4d 01 	sts	0x014D, r1
     f20:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     f24:	10 92 4f 01 	sts	0x014F, r1
     f28:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     f2c:	10 92 51 01 	sts	0x0151, r1
     f30:	10 92 50 01 	sts	0x0150, r1
            break;
     f34:	08 95       	ret
            frame[0][2] = C3P10;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
     f36:	10 92 49 01 	sts	0x0149, r1
     f3a:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P12;
     f3e:	88 e1       	ldi	r24, 0x18	; 24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 4b 01 	sts	0x014B, r25
     f46:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
     f4a:	10 92 4d 01 	sts	0x014D, r1
     f4e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
     f52:	10 92 4f 01 	sts	0x014F, r1
     f56:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     f5a:	10 92 51 01 	sts	0x0151, r1
     f5e:	10 92 50 01 	sts	0x0150, r1
            break;
     f62:	08 95       	ret
            frame[0][2] = C3P13;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
     f64:	10 92 49 01 	sts	0x0149, r1
     f68:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     f6c:	10 92 4b 01 	sts	0x014B, r1
     f70:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P10;
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	90 93 4d 01 	sts	0x014D, r25
     f7c:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     f80:	10 92 4f 01 	sts	0x014F, r1
     f84:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     f88:	10 92 51 01 	sts	0x0151, r1
     f8c:	10 92 50 01 	sts	0x0150, r1
            break;
     f90:	08 95       	ret
            frame[0][2] = C3P16;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
     f92:	10 92 49 01 	sts	0x0149, r1
     f96:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     f9a:	10 92 4b 01 	sts	0x014B, r1
     f9e:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P13;
     fa2:	80 e1       	ldi	r24, 0x10	; 16
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 4d 01 	sts	0x014D, r25
     faa:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     fae:	10 92 4f 01 	sts	0x014F, r1
     fb2:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     fb6:	10 92 51 01 	sts	0x0151, r1
     fba:	10 92 50 01 	sts	0x0150, r1
            break;
     fbe:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
     fc0:	10 92 49 01 	sts	0x0149, r1
     fc4:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
     fc8:	10 92 4b 01 	sts	0x014B, r1
     fcc:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P16;
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 4d 01 	sts	0x014D, r25
     fd8:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
     fdc:	10 92 4f 01 	sts	0x014F, r1
     fe0:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
     fe4:	10 92 51 01 	sts	0x0151, r1
     fe8:	10 92 50 01 	sts	0x0150, r1
            break;
     fec:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
     fee:	10 92 49 01 	sts	0x0149, r1
     ff2:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P6;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e2       	ldi	r25, 0x20	; 32
     ffa:	90 93 4b 01 	sts	0x014B, r25
     ffe:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1002:	10 92 4d 01 	sts	0x014D, r1
    1006:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    100a:	10 92 4f 01 	sts	0x014F, r1
    100e:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1012:	10 92 51 01 	sts	0x0151, r1
    1016:	10 92 50 01 	sts	0x0150, r1
            break;
    101a:	08 95       	ret
}

void green(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    101c:	10 92 49 01 	sts	0x0149, r1
    1020:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P9;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 4b 01 	sts	0x014B, r25
    102c:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1030:	10 92 4d 01 	sts	0x014D, r1
    1034:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1038:	10 92 4f 01 	sts	0x014F, r1
    103c:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1040:	10 92 51 01 	sts	0x0151, r1
    1044:	10 92 50 01 	sts	0x0150, r1
            break;
    1048:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P5;
            break;
        case 25:
            frame[0][0] = 0x0000;
    104a:	10 92 49 01 	sts	0x0149, r1
    104e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1052:	10 92 4b 01 	sts	0x014B, r1
    1056:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    105a:	10 92 4d 01 	sts	0x014D, r1
    105e:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1062:	10 92 4f 01 	sts	0x014F, r1
    1066:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P8;
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e8       	ldi	r25, 0x80	; 128
    106e:	90 93 51 01 	sts	0x0151, r25
    1072:	80 93 50 01 	sts	0x0150, r24
            break;
    1076:	08 95       	ret

00001078 <blue>:
    }

}

void blue(uint8_t position){
    switch(position){
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	89 31       	cpi	r24, 0x19	; 25
    107e:	91 05       	cpc	r25, r1
    1080:	a8 f0       	brcs	.+42     	; 0x10ac <blue+0x34>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P7;
            break;
        default:
            frame[0][0] = 0x0000;
    1082:	10 92 49 01 	sts	0x0149, r1
    1086:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    108a:	10 92 4b 01 	sts	0x014B, r1
    108e:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    1092:	10 92 4d 01 	sts	0x014D, r1
    1096:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    109a:	10 92 4f 01 	sts	0x014F, r1
    109e:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    10a2:	10 92 51 01 	sts	0x0151, r1
    10a6:	10 92 50 01 	sts	0x0150, r1
    10aa:	08 95       	ret
    }

}

void blue(uint8_t position){
    switch(position){
    10ac:	86 5a       	subi	r24, 0xA6	; 166
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	fc 01       	movw	r30, r24
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	05 90       	lpm	r0, Z+
    10b8:	f4 91       	lpm	r31, Z+
    10ba:	e0 2d       	mov	r30, r0
    10bc:	09 94       	ijmp
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P1;
            break;
        case 24:
            frame[0][0] = 0x0000;
    10be:	10 92 49 01 	sts	0x0149, r1
    10c2:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    10c6:	10 92 4b 01 	sts	0x014B, r1
    10ca:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    10ce:	10 92 4d 01 	sts	0x014D, r1
    10d2:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    10d6:	10 92 4f 01 	sts	0x014F, r1
    10da:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P6;
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	98 e0       	ldi	r25, 0x08	; 8
    10e2:	90 93 51 01 	sts	0x0151, r25
    10e6:	80 93 50 01 	sts	0x0150, r24
            break;
    10ea:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 23:
            frame[0][0] = 0x0000;
    10ec:	10 92 49 01 	sts	0x0149, r1
    10f0:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    10f4:	10 92 4b 01 	sts	0x014B, r1
    10f8:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    10fc:	10 92 4d 01 	sts	0x014D, r1
    1100:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1104:	10 92 4f 01 	sts	0x014F, r1
    1108:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P1;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	90 93 51 01 	sts	0x0151, r25
    1114:	80 93 50 01 	sts	0x0150, r24
            break;
    1118:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 22:
            frame[0][0] = C1P14;
    111a:	80 e8       	ldi	r24, 0x80	; 128
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 49 01 	sts	0x0149, r25
    1122:	80 93 48 01 	sts	0x0148, r24
            frame[0][1] = 0x0000;
    1126:	10 92 4b 01 	sts	0x014B, r1
    112a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    112e:	10 92 4d 01 	sts	0x014D, r1
    1132:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1136:	10 92 4f 01 	sts	0x014F, r1
    113a:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    113e:	10 92 51 01 	sts	0x0151, r1
    1142:	10 92 50 01 	sts	0x0150, r1
            break;
    1146:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P10;
            break;
        case 21:
            frame[0][0] = C1P12;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	e8 cf       	rjmp	.-48     	; 0x111e <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P15;
            break;
        case 20:
            frame[0][0] = 0x0000;
    114e:	10 92 49 01 	sts	0x0149, r1
    1152:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1156:	10 92 4b 01 	sts	0x014B, r1
    115a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    115e:	10 92 4d 01 	sts	0x014D, r1
    1162:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1166:	10 92 4f 01 	sts	0x014F, r1
    116a:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P10;
    116e:	88 e1       	ldi	r24, 0x18	; 24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 51 01 	sts	0x0151, r25
    1176:	80 93 50 01 	sts	0x0150, r24
            break;
    117a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P16;
            frame[0][4] = 0x0000;
            break;
        case 19:
            frame[0][0] = 0x0000;
    117c:	10 92 49 01 	sts	0x0149, r1
    1180:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1184:	10 92 4b 01 	sts	0x014B, r1
    1188:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    118c:	10 92 4d 01 	sts	0x014D, r1
    1190:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1194:	10 92 4f 01 	sts	0x014F, r1
    1198:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P15;
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 51 01 	sts	0x0151, r25
    11a4:	80 93 50 01 	sts	0x0150, r24
            break;
    11a8:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 18:
            frame[0][0] = 0x0000;
    11aa:	10 92 49 01 	sts	0x0149, r1
    11ae:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    11b2:	10 92 4b 01 	sts	0x014B, r1
    11b6:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    11ba:	10 92 4d 01 	sts	0x014D, r1
    11be:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P16;
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	90 93 4f 01 	sts	0x014F, r25
    11ca:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
    11ce:	10 92 51 01 	sts	0x0151, r1
    11d2:	10 92 50 01 	sts	0x0150, r1
            break;
    11d6:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 17:
            frame[0][0] = C1P1;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	a0 cf       	rjmp	.-192    	; 0x111e <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P1;
            frame[0][4] = 0x0000;
            break;
        case 16:
            frame[0][0] = C1P9;
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e4       	ldi	r25, 0x40	; 64
    11e2:	9d cf       	rjmp	.-198    	; 0x111e <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P4;
            frame[0][4] = 0x0000;
            break;
        case 15:
            frame[0][0] = 0x0000;
    11e4:	10 92 49 01 	sts	0x0149, r1
    11e8:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    11ec:	10 92 4b 01 	sts	0x014B, r1
    11f0:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    11f4:	10 92 4d 01 	sts	0x014D, r1
    11f8:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P1;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	90 93 4f 01 	sts	0x014F, r25
    1204:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
    1208:	10 92 51 01 	sts	0x0151, r1
    120c:	10 92 50 01 	sts	0x0150, r1
            break;
    1210:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = C4P13;
            frame[0][4] = 0x0000;
            break;
        case 14:
            frame[0][0] = 0x0000;
    1212:	10 92 49 01 	sts	0x0149, r1
    1216:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    121a:	10 92 4b 01 	sts	0x014B, r1
    121e:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    1222:	10 92 4d 01 	sts	0x014D, r1
    1226:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P4;
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e2       	ldi	r25, 0x20	; 32
    122e:	90 93 4f 01 	sts	0x014F, r25
    1232:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
    1236:	10 92 51 01 	sts	0x0151, r1
    123a:	10 92 50 01 	sts	0x0150, r1
            break;
    123e:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 13:
            frame[0][0] = 0x0000;
    1240:	10 92 49 01 	sts	0x0149, r1
    1244:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1248:	10 92 4b 01 	sts	0x014B, r1
    124c:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    1250:	10 92 4d 01 	sts	0x014D, r1
    1254:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P13;
    1258:	88 e1       	ldi	r24, 0x18	; 24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	90 93 4f 01 	sts	0x014F, r25
    1260:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
    1264:	10 92 51 01 	sts	0x0151, r1
    1268:	10 92 50 01 	sts	0x0150, r1
            break;
    126c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 12:
            frame[0][0] = C1P4;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e2       	ldi	r25, 0x20	; 32
    1272:	55 cf       	rjmp	.-342    	; 0x111e <blue+0xa6>
            frame[0][2] = 0x0000;
            frame[0][3] = C4P9;
            frame[0][4] = 0x0000;
            break;
        case 11:
            frame[0][0] = 0x0000;
    1274:	10 92 49 01 	sts	0x0149, r1
    1278:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P16;
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	90 93 4b 01 	sts	0x014B, r25
    1284:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1288:	10 92 4d 01 	sts	0x014D, r1
    128c:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1290:	10 92 4f 01 	sts	0x014F, r1
    1294:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1298:	10 92 51 01 	sts	0x0151, r1
    129c:	10 92 50 01 	sts	0x0150, r1
            break;
    12a0:	08 95       	ret
            frame[0][2] = C3P6;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 10:
            frame[0][0] = 0x0000;
    12a2:	10 92 49 01 	sts	0x0149, r1
    12a6:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    12aa:	10 92 4b 01 	sts	0x014B, r1
    12ae:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    12b2:	10 92 4d 01 	sts	0x014D, r1
    12b6:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = C4P9;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e4       	ldi	r25, 0x40	; 64
    12be:	90 93 4f 01 	sts	0x014F, r25
    12c2:	80 93 4e 01 	sts	0x014E, r24
            frame[0][4] = 0x0000;
    12c6:	10 92 51 01 	sts	0x0151, r1
    12ca:	10 92 50 01 	sts	0x0150, r1
            break;
    12ce:	08 95       	ret
            frame[0][2] = C3P5;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 9:
            frame[0][0] = 0x0000;
    12d0:	10 92 49 01 	sts	0x0149, r1
    12d4:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    12d8:	10 92 4b 01 	sts	0x014B, r1
    12dc:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P6;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e8       	ldi	r25, 0x80	; 128
    12e4:	90 93 4d 01 	sts	0x014D, r25
    12e8:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
    12ec:	10 92 4f 01 	sts	0x014F, r1
    12f0:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    12f4:	10 92 51 01 	sts	0x0151, r1
    12f8:	10 92 50 01 	sts	0x0150, r1
            break;
    12fc:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 8:
            frame[0][0] = 0x0000;
    12fe:	10 92 49 01 	sts	0x0149, r1
    1302:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1306:	10 92 4b 01 	sts	0x014B, r1
    130a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P5;
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	90 93 4d 01 	sts	0x014D, r25
    1316:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
    131a:	10 92 4f 01 	sts	0x014F, r1
    131e:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1322:	10 92 51 01 	sts	0x0151, r1
    1326:	10 92 50 01 	sts	0x0150, r1
            break;
    132a:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 7:
            frame[0][0] = 0x0000;
    132c:	10 92 49 01 	sts	0x0149, r1
    1330:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P1;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	90 93 4b 01 	sts	0x014B, r25
    133c:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1340:	10 92 4d 01 	sts	0x014D, r1
    1344:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1348:	10 92 4f 01 	sts	0x014F, r1
    134c:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1350:	10 92 51 01 	sts	0x0151, r1
    1354:	10 92 50 01 	sts	0x0150, r1
            break;
    1358:	08 95       	ret
            frame[0][2] = C3P11;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 6:
            frame[0][0] = 0x0000;
    135a:	10 92 49 01 	sts	0x0149, r1
    135e:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P13;
    1362:	88 e1       	ldi	r24, 0x18	; 24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	90 93 4b 01 	sts	0x014B, r25
    136a:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    136e:	10 92 4d 01 	sts	0x014D, r1
    1372:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1376:	10 92 4f 01 	sts	0x014F, r1
    137a:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    137e:	10 92 51 01 	sts	0x0151, r1
    1382:	10 92 50 01 	sts	0x0150, r1
            break;
    1386:	08 95       	ret
            frame[0][2] = C3P12;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 5:
            frame[0][0] = 0x0000;
    1388:	10 92 49 01 	sts	0x0149, r1
    138c:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1390:	10 92 4b 01 	sts	0x014B, r1
    1394:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P11;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	90 93 4d 01 	sts	0x014D, r25
    13a0:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
    13a4:	10 92 4f 01 	sts	0x014F, r1
    13a8:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    13ac:	10 92 51 01 	sts	0x0151, r1
    13b0:	10 92 50 01 	sts	0x0150, r1
            break;
    13b4:	08 95       	ret
            frame[0][2] = C3P1;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 4:
            frame[0][0] = 0x0000;
    13b6:	10 92 49 01 	sts	0x0149, r1
    13ba:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    13be:	10 92 4b 01 	sts	0x014B, r1
    13c2:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P12;
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	90 93 4d 01 	sts	0x014D, r25
    13ce:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
    13d2:	10 92 4f 01 	sts	0x014F, r1
    13d6:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    13da:	10 92 51 01 	sts	0x0151, r1
    13de:	10 92 50 01 	sts	0x0150, r1
            break;
    13e2:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 3:
            frame[0][0] = 0x0000;
    13e4:	10 92 49 01 	sts	0x0149, r1
    13e8:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    13ec:	10 92 4b 01 	sts	0x014B, r1
    13f0:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = C3P1;
    13f4:	80 e4       	ldi	r24, 0x40	; 64
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	90 93 4d 01 	sts	0x014D, r25
    13fc:	80 93 4c 01 	sts	0x014C, r24
            frame[0][3] = 0x0000;
    1400:	10 92 4f 01 	sts	0x014F, r1
    1404:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1408:	10 92 51 01 	sts	0x0151, r1
    140c:	10 92 50 01 	sts	0x0150, r1
            break;
    1410:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = 0x0000;
            break;
        case 2:
            frame[0][0] = 0x0000;
    1412:	10 92 49 01 	sts	0x0149, r1
    1416:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P5;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e4       	ldi	r25, 0x40	; 64
    141e:	90 93 4b 01 	sts	0x014B, r25
    1422:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1426:	10 92 4d 01 	sts	0x014D, r1
    142a:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    142e:	10 92 4f 01 	sts	0x014F, r1
    1432:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1436:	10 92 51 01 	sts	0x0151, r1
    143a:	10 92 50 01 	sts	0x0150, r1
            break;
    143e:	08 95       	ret
}

void blue(uint8_t position){
    switch(position){
        case 1:
            frame[0][0] = 0x0000;
    1440:	10 92 49 01 	sts	0x0149, r1
    1444:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = C2P10;
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e8       	ldi	r25, 0x80	; 128
    144c:	90 93 4b 01 	sts	0x014B, r25
    1450:	80 93 4a 01 	sts	0x014A, r24
            frame[0][2] = 0x0000;
    1454:	10 92 4d 01 	sts	0x014D, r1
    1458:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    145c:	10 92 4f 01 	sts	0x014F, r1
    1460:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = 0x0000;
    1464:	10 92 51 01 	sts	0x0151, r1
    1468:	10 92 50 01 	sts	0x0150, r1
            break;
    146c:	08 95       	ret
            frame[0][2] = 0x0000;
            frame[0][3] = 0x0000;
            frame[0][4] = C5P6;
            break;
        case 25:
            frame[0][0] = 0x0000;
    146e:	10 92 49 01 	sts	0x0149, r1
    1472:	10 92 48 01 	sts	0x0148, r1
            frame[0][1] = 0x0000;
    1476:	10 92 4b 01 	sts	0x014B, r1
    147a:	10 92 4a 01 	sts	0x014A, r1
            frame[0][2] = 0x0000;
    147e:	10 92 4d 01 	sts	0x014D, r1
    1482:	10 92 4c 01 	sts	0x014C, r1
            frame[0][3] = 0x0000;
    1486:	10 92 4f 01 	sts	0x014F, r1
    148a:	10 92 4e 01 	sts	0x014E, r1
            frame[0][4] = C5P7;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 93 51 01 	sts	0x0151, r25
    1496:	80 93 50 01 	sts	0x0150, r24
            break;
    149a:	08 95       	ret

0000149c <LED_test>:
//      0  Red
//      1  Green
//      2  Blue
// Layers can be 0 - 4
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	08 2f       	mov	r16, r24
    14ac:	84 2f       	mov	r24, r20
        level(layer);
    14ae:	69 83       	std	Y+1, r22	; 0x01
    14b0:	0e 94 0d 02 	call	0x41a	; 0x41a <level>
        switch(color){
    14b4:	69 81       	ldd	r22, Y+1	; 0x01
    14b6:	01 30       	cpi	r16, 0x01	; 1
    14b8:	39 f1       	breq	.+78     	; 0x1508 <LED_test+0x6c>
    14ba:	01 30       	cpi	r16, 0x01	; 1
    14bc:	08 f1       	brcs	.+66     	; 0x1500 <LED_test+0x64>
    14be:	02 30       	cpi	r16, 0x02	; 2
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <LED_test+0x2c>
                break;
            case 1:
                green(position);
                break;
            case 2:
                blue(position);
    14c2:	86 2f       	mov	r24, r22
    14c4:	0e 94 3c 08 	call	0x1078	; 0x1078 <blue>
                break;
            default:
                break;
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);
    14c8:	60 91 4e 01 	lds	r22, 0x014E
    14cc:	70 91 4f 01 	lds	r23, 0x014F
    14d0:	40 91 4c 01 	lds	r20, 0x014C
    14d4:	50 91 4d 01 	lds	r21, 0x014D
    14d8:	20 91 4a 01 	lds	r18, 0x014A
    14dc:	30 91 4b 01 	lds	r19, 0x014B
    14e0:	00 91 48 01 	lds	r16, 0x0148
    14e4:	10 91 49 01 	lds	r17, 0x0149
    14e8:	80 91 50 01 	lds	r24, 0x0150
    14ec:	90 91 51 01 	lds	r25, 0x0151
    14f0:	0e 94 39 02 	call	0x472	; 0x472 <transmit1>

}
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret
// positions can be 1 - 25
void LED_test(uint8_t color, uint8_t position,uint8_t layer){
        level(layer);
        switch(color){
            case 0:
                red(position);
    1500:	86 2f       	mov	r24, r22
    1502:	0e 94 2f 04 	call	0x85e	; 0x85e <red>
                break;
    1506:	e0 cf       	rjmp	.-64     	; 0x14c8 <LED_test+0x2c>
            case 1:
                green(position);
    1508:	86 2f       	mov	r24, r22
    150a:	0e 94 2a 06 	call	0xc54	; 0xc54 <green>
                break;
    150e:	dc cf       	rjmp	.-72     	; 0x14c8 <LED_test+0x2c>

00001510 <test_led>:
        }
        transmit1(frame[0][4],frame[0][3],frame[0][2],frame[0][1],frame[0][0]);

}

void test_led(){
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    1522:	10 92 7f 01 	sts	0x017F, r1
        LED_test(i,j,layer);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	60 91 7e 01 	lds	r22, 0x017E
    152c:	40 91 7d 01 	lds	r20, 0x017D
    1530:	0e 94 4e 0a 	call	0x149c	; 0x149c <LED_test>
        if(i == 2){
            j++;
            if(j == 26){
                j = 1;
    1534:	01 e0       	ldi	r16, 0x01	; 1
                layer++;
                layer = layer % 5;
    1536:	15 e0       	ldi	r17, 0x05	; 5
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	90 e7       	ldi	r25, 0x70	; 112
    153c:	a2 e0       	ldi	r26, 0x02	; 2
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	90 40       	sbci	r25, 0x00	; 0
    1542:	a0 40       	sbci	r26, 0x00	; 0
    1544:	e1 f7       	brne	.-8      	; 0x153e <test_led+0x2e>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <test_led+0x38>
    1548:	00 00       	nop

void test_led(){
    static uint8_t i = 0;
    static uint8_t j = 0;
    static uint8_t layer = 0;
    for(i=0;i<3;i++){
    154a:	90 91 7f 01 	lds	r25, 0x017F
    154e:	9f 5f       	subi	r25, 0xFF	; 255
    1550:	90 93 7f 01 	sts	0x017F, r25
    1554:	93 30       	cpi	r25, 0x03	; 3
    1556:	e8 f4       	brcc	.+58     	; 0x1592 <test_led+0x82>
        LED_test(i,j,layer);
    1558:	f0 90 7e 01 	lds	r15, 0x017E
    155c:	e0 90 7d 01 	lds	r14, 0x017D
    1560:	89 2f       	mov	r24, r25
    1562:	6f 2d       	mov	r22, r15
    1564:	4e 2d       	mov	r20, r14
    1566:	99 83       	std	Y+1, r25	; 0x01
    1568:	0e 94 4e 0a 	call	0x149c	; 0x149c <LED_test>
        if(i == 2){
    156c:	99 81       	ldd	r25, Y+1	; 0x01
    156e:	92 30       	cpi	r25, 0x02	; 2
    1570:	19 f7       	brne	.-58     	; 0x1538 <test_led+0x28>
            j++;
    1572:	8f 2d       	mov	r24, r15
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	80 93 7e 01 	sts	0x017E, r24
            if(j == 26){
    157a:	8a 31       	cpi	r24, 0x1A	; 26
    157c:	e9 f6       	brne	.-70     	; 0x1538 <test_led+0x28>
                j = 1;
    157e:	00 93 7e 01 	sts	0x017E, r16
                layer++;
    1582:	8e 2d       	mov	r24, r14
    1584:	8f 5f       	subi	r24, 0xFF	; 255
                layer = layer % 5;
    1586:	61 2f       	mov	r22, r17
    1588:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodqi4>
    158c:	90 93 7d 01 	sts	0x017D, r25
    1590:	d3 cf       	rjmp	.-90     	; 0x1538 <test_led+0x28>
            }
        }
        _delay_ms(100);
    }
}
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	08 95       	ret

000015a2 <red_led>:

void red_led(uint8_t layer,uint32_t red){
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	7a 01       	movw	r14, r20
    15b2:	8b 01       	movw	r16, r22
    15b4:	46 ee       	ldi	r20, 0xE6	; 230
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	ec 01       	movw	r28, r24
    15c0:	cc 0f       	add	r28, r28
    15c2:	dd 1f       	adc	r29, r29
    15c4:	cc 0f       	add	r28, r28
    15c6:	dd 1f       	adc	r29, r29
    15c8:	c8 0f       	add	r28, r24
    15ca:	d9 1f       	adc	r29, r25
    15cc:	cc 0f       	add	r28, r28
    15ce:	dd 1f       	adc	r29, r29
    15d0:	c8 5b       	subi	r28, 0xB8	; 184
    15d2:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
    15d4:	d8 01       	movw	r26, r16
    15d6:	c7 01       	movw	r24, r14
    15d8:	02 2e       	mov	r0, r18
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <red_led+0x42>
    15dc:	b6 95       	lsr	r27
    15de:	a7 95       	ror	r26
    15e0:	97 95       	ror	r25
    15e2:	87 95       	ror	r24
    15e4:	0a 94       	dec	r0
    15e6:	d2 f7       	brpl	.-12     	; 0x15dc <red_led+0x3a>
        if(state){
    15e8:	80 ff       	sbrs	r24, 0
    15ea:	12 c0       	rjmp	.+36     	; 0x1610 <red_led+0x6e>
        }
        _delay_ms(100);
    }
}

void red_led(uint8_t layer,uint32_t red){
    15ec:	de 01       	movw	r26, r28
    15ee:	ca 01       	movw	r24, r20
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(R[index][i]));
    15f4:	fc 01       	movw	r30, r24
    15f6:	65 91       	lpm	r22, Z+
    15f8:	74 91       	lpm	r23, Z+
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	e6 2b       	or	r30, r22
    1602:	f7 2b       	or	r31, r23
    1604:	ed 93       	st	X+, r30
    1606:	fd 93       	st	X+, r31
    1608:	da 94       	dec	r13
    160a:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((red>>index)&(0x01));
        if(state){
            for(i=0;i<5;i++){
    160c:	dd 20       	and	r13, r13
    160e:	91 f7       	brne	.-28     	; 0x15f4 <red_led+0x52>
    1610:	2f 5f       	subi	r18, 0xFF	; 255
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	46 5f       	subi	r20, 0xF6	; 246
    1616:	5f 4f       	sbci	r21, 0xFF	; 255

void red_led(uint8_t layer,uint32_t red){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    1618:	29 31       	cpi	r18, 0x19	; 25
    161a:	31 05       	cpc	r19, r1
    161c:	d9 f6       	brne	.-74     	; 0x15d4 <red_led+0x32>
            }
        }
    }
    
//
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	08 95       	ret

0000162e <blue_led>:

void blue_led(uint8_t layer,uint32_t blue){
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	7a 01       	movw	r14, r20
    163e:	8b 01       	movw	r16, r22
    1640:	4a ed       	ldi	r20, 0xDA	; 218
    1642:	52 e0       	ldi	r21, 0x02	; 2
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	ec 01       	movw	r28, r24
    164c:	cc 0f       	add	r28, r28
    164e:	dd 1f       	adc	r29, r29
    1650:	cc 0f       	add	r28, r28
    1652:	dd 1f       	adc	r29, r29
    1654:	c8 0f       	add	r28, r24
    1656:	d9 1f       	adc	r29, r25
    1658:	cc 0f       	add	r28, r28
    165a:	dd 1f       	adc	r29, r29
    165c:	c8 5b       	subi	r28, 0xB8	; 184
    165e:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
    1660:	d8 01       	movw	r26, r16
    1662:	c7 01       	movw	r24, r14
    1664:	02 2e       	mov	r0, r18
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <blue_led+0x42>
    1668:	b6 95       	lsr	r27
    166a:	a7 95       	ror	r26
    166c:	97 95       	ror	r25
    166e:	87 95       	ror	r24
    1670:	0a 94       	dec	r0
    1672:	d2 f7       	brpl	.-12     	; 0x1668 <blue_led+0x3a>
        if(state){
    1674:	80 ff       	sbrs	r24, 0
    1676:	12 c0       	rjmp	.+36     	; 0x169c <blue_led+0x6e>
    }
    
//
}

void blue_led(uint8_t layer,uint32_t blue){
    1678:	de 01       	movw	r26, r28
    167a:	ca 01       	movw	r24, r20
    167c:	f5 e0       	ldi	r31, 0x05	; 5
    167e:	df 2e       	mov	r13, r31
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
    1680:	fc 01       	movw	r30, r24
    1682:	65 91       	lpm	r22, Z+
    1684:	74 91       	lpm	r23, Z+
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	e6 2b       	or	r30, r22
    168e:	f7 2b       	or	r31, r23
    1690:	ed 93       	st	X+, r30
    1692:	fd 93       	st	X+, r31
    1694:	da 94       	dec	r13
    1696:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((blue>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    1698:	dd 20       	and	r13, r13
    169a:	91 f7       	brne	.-28     	; 0x1680 <blue_led+0x52>
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	46 5f       	subi	r20, 0xF6	; 246
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255

void blue_led(uint8_t layer,uint32_t blue){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    16a4:	29 31       	cpi	r18, 0x19	; 25
    16a6:	31 05       	cpc	r19, r1
    16a8:	d9 f6       	brne	.-74     	; 0x1660 <blue_led+0x32>
                frame[layer][i] |= pgm_read_word(&(B[index][i]));
            }
        }
    }
//
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	08 95       	ret

000016ba <green_led>:

void green_led(uint8_t layer,uint32_t green){
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	7a 01       	movw	r14, r20
    16ca:	8b 01       	movw	r16, r22
    16cc:	40 ee       	ldi	r20, 0xE0	; 224
    16ce:	51 e0       	ldi	r21, 0x01	; 1
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	ec 01       	movw	r28, r24
    16d8:	cc 0f       	add	r28, r28
    16da:	dd 1f       	adc	r29, r29
    16dc:	cc 0f       	add	r28, r28
    16de:	dd 1f       	adc	r29, r29
    16e0:	c8 0f       	add	r28, r24
    16e2:	d9 1f       	adc	r29, r25
    16e4:	cc 0f       	add	r28, r28
    16e6:	dd 1f       	adc	r29, r29
    16e8:	c8 5b       	subi	r28, 0xB8	; 184
    16ea:	de 4f       	sbci	r29, 0xFE	; 254
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
    16ec:	d8 01       	movw	r26, r16
    16ee:	c7 01       	movw	r24, r14
    16f0:	02 2e       	mov	r0, r18
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <green_led+0x42>
    16f4:	b6 95       	lsr	r27
    16f6:	a7 95       	ror	r26
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	0a 94       	dec	r0
    16fe:	d2 f7       	brpl	.-12     	; 0x16f4 <green_led+0x3a>
        if(state){
    1700:	80 ff       	sbrs	r24, 0
    1702:	12 c0       	rjmp	.+36     	; 0x1728 <green_led+0x6e>
        }
    }
//
}

void green_led(uint8_t layer,uint32_t green){
    1704:	de 01       	movw	r26, r28
    1706:	ca 01       	movw	r24, r20
    1708:	65 e0       	ldi	r22, 0x05	; 5
    170a:	d6 2e       	mov	r13, r22
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
    170c:	fc 01       	movw	r30, r24
    170e:	65 91       	lpm	r22, Z+
    1710:	74 91       	lpm	r23, Z+
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	11 97       	sbiw	r26, 0x01	; 1
    1718:	e6 2b       	or	r30, r22
    171a:	f7 2b       	or	r31, r23
    171c:	ed 93       	st	X+, r30
    171e:	fd 93       	st	X+, r31
    1720:	da 94       	dec	r13
    1722:	02 96       	adiw	r24, 0x02	; 2
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
        state = ((green>>index)&(1));
        if(state){
            for(i=0;i<5;i++){
    1724:	dd 20       	and	r13, r13
    1726:	91 f7       	brne	.-28     	; 0x170c <green_led+0x52>
    1728:	2f 5f       	subi	r18, 0xFF	; 255
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	46 5f       	subi	r20, 0xF6	; 246
    172e:	5f 4f       	sbci	r21, 0xFF	; 255

void green_led(uint8_t layer,uint32_t green){
    uint8_t index = 0;
    uint8_t i = 0;
    uint8_t state = 0;
    for(index = 0; index<25;index++){
    1730:	29 31       	cpi	r18, 0x19	; 25
    1732:	31 05       	cpc	r19, r1
    1734:	d9 f6       	brne	.-74     	; 0x16ec <green_led+0x32>
                frame[layer][i] |= pgm_read_word(&(G[index][i]));
            }
        }
    }
//
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	08 95       	ret

00001746 <leds>:


void leds(uint8_t layer,uint32_t red, uint32_t blue, uint32_t green){
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	b8 2e       	mov	r11, r24
    175e:	38 01       	movw	r6, r16
    1760:	49 01       	movw	r8, r18
    red_led(layer,red);
    1762:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <red_led>
    blue_led(layer,blue);
    1766:	8b 2d       	mov	r24, r11
    1768:	b4 01       	movw	r22, r8
    176a:	a3 01       	movw	r20, r6
    176c:	0e 94 17 0b 	call	0x162e	; 0x162e <blue_led>
    green_led(layer,green);
    1770:	8b 2d       	mov	r24, r11
    1772:	b7 01       	movw	r22, r14
    1774:	a6 01       	movw	r20, r12
    1776:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <green_led>
}
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	9f 90       	pop	r9
    178a:	8f 90       	pop	r8
    178c:	7f 90       	pop	r7
    178e:	6f 90       	pop	r6
    1790:	08 95       	ret

00001792 <test_frame>:
void test_frame(){
    uint8_t i = 0;
    for(i=0;i<5;i++){
        //transmit1(frame[i][4],frame[i][3],frame[i][2],frame[i][1],frame[i][0]);
        //level(i);
        transmit2(i);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 68 02 	call	0x4d0	; 0x4d0 <transmit2>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <transmit2>
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <transmit2>
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <transmit2>
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	0e 94 68 02 	call	0x4d0	; 0x4d0 <transmit2>
        //_delay_ms(500);
        //_delay_ms(500);
        //_delay_ms(3);
        //_delay_us(300);
    }
}
    17b0:	08 95       	ret

000017b2 <clear_frame>:

void clear_frame(){
    17b2:	e8 e4       	ldi	r30, 0x48	; 72
    17b4:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
        for(j=0;j<5;j++){
            frame[i][j] = 0;
    17b6:	11 82       	std	Z+1, r1	; 0x01
    17b8:	10 82       	st	Z, r1
    17ba:	13 82       	std	Z+3, r1	; 0x03
    17bc:	12 82       	std	Z+2, r1	; 0x02
    17be:	15 82       	std	Z+5, r1	; 0x05
    17c0:	14 82       	std	Z+4, r1	; 0x04
    17c2:	17 82       	std	Z+7, r1	; 0x07
    17c4:	16 82       	std	Z+6, r1	; 0x06
    17c6:	11 86       	std	Z+9, r1	; 0x09
    17c8:	10 86       	std	Z+8, r1	; 0x08
    17ca:	3a 96       	adiw	r30, 0x0a	; 10
}

void clear_frame(){
    uint8_t i = 0;
    uint8_t j = 0;
    for(i=0;i<5;i++){
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	ea 37       	cpi	r30, 0x7A	; 122
    17d0:	f8 07       	cpc	r31, r24
    17d2:	89 f7       	brne	.-30     	; 0x17b6 <clear_frame+0x4>
        for(j=0;j<5;j++){
            frame[i][j] = 0;
        }
    } 
    }
    17d4:	08 95       	ret

000017d6 <test_pattern>:

void test_pattern(){
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    uint32_t row4 = 0x1F00000;
    uint32_t row3 = 0xF8000;
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    17e6:	c0 e0       	ldi	r28, 0x00	; 0
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
    while(1){
        while(counter <0x0018){
    17ea:	c8 31       	cpi	r28, 0x18	; 24
    17ec:	d1 05       	cpc	r29, r1
    17ee:	08 f4       	brcc	.+2      	; 0x17f2 <test_pattern+0x1c>
    17f0:	60 c2       	rjmp	.+1216   	; 0x1cb2 <test_pattern+0x4dc>
    17f2:	c8 e1       	ldi	r28, 0x18	; 24
    17f4:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	40 ee       	ldi	r20, 0xE0	; 224
    17fa:	53 e0       	ldi	r21, 0x03	; 3
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	00 e0       	ldi	r16, 0x00	; 0
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	98 01       	movw	r18, r16
    1806:	cc 24       	eor	r12, r12
    1808:	dd 24       	eor	r13, r13
    180a:	76 01       	movw	r14, r12
    180c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row1,0);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	ba 01       	movw	r22, r20
    1818:	00 ee       	ldi	r16, 0xE0	; 224
    181a:	13 e0       	ldi	r17, 0x03	; 3
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row1);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	ba 01       	movw	r22, r20
    182c:	00 e0       	ldi	r16, 0x00	; 0
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	98 01       	movw	r18, r16
    1832:	90 ee       	ldi	r25, 0xE0	; 224
    1834:	c9 2e       	mov	r12, r25
    1836:	93 e0       	ldi	r25, 0x03	; 3
    1838:	d9 2e       	mov	r13, r25
    183a:	e1 2c       	mov	r14, r1
    183c:	f1 2c       	mov	r15, r1
    183e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row1);
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	ba 01       	movw	r22, r20
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	98 01       	movw	r18, r16
    1850:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row1,0);
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	ba 01       	movw	r22, r20
    185c:	00 ee       	ldi	r16, 0xE0	; 224
    185e:	13 e0       	ldi	r17, 0x03	; 3
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	cc 24       	eor	r12, r12
    1866:	dd 24       	eor	r13, r13
    1868:	76 01       	movw	r14, r12
    186a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    186e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1872:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row0,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1874:	09 f0       	breq	.+2      	; 0x1878 <test_pattern+0xa2>
    1876:	bf cf       	rjmp	.-130    	; 0x17f6 <test_pattern+0x20>
    1878:	c8 e1       	ldi	r28, 0x18	; 24
    187a:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	5c e7       	ldi	r21, 0x7C	; 124
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	00 e0       	ldi	r16, 0x00	; 0
    1888:	10 e0       	ldi	r17, 0x00	; 0
    188a:	98 01       	movw	r18, r16
    188c:	cc 24       	eor	r12, r12
    188e:	dd 24       	eor	r13, r13
    1890:	76 01       	movw	r14, r12
    1892:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row2,0);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	ba 01       	movw	r22, r20
    189e:	00 e0       	ldi	r16, 0x00	; 0
    18a0:	1c e7       	ldi	r17, 0x7C	; 124
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row2);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	ba 01       	movw	r22, r20
    18b2:	00 e0       	ldi	r16, 0x00	; 0
    18b4:	10 e0       	ldi	r17, 0x00	; 0
    18b6:	98 01       	movw	r18, r16
    18b8:	c1 2c       	mov	r12, r1
    18ba:	bc e7       	ldi	r27, 0x7C	; 124
    18bc:	db 2e       	mov	r13, r27
    18be:	e1 2c       	mov	r14, r1
    18c0:	f1 2c       	mov	r15, r1
    18c2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row2);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	ba 01       	movw	r22, r20
    18ce:	00 e0       	ldi	r16, 0x00	; 0
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	98 01       	movw	r18, r16
    18d4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row2,0);
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	ba 01       	movw	r22, r20
    18e0:	00 e0       	ldi	r16, 0x00	; 0
    18e2:	1c e7       	ldi	r17, 0x7C	; 124
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	cc 24       	eor	r12, r12
    18ea:	dd 24       	eor	r13, r13
    18ec:	76 01       	movw	r14, r12
    18ee:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    18f2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    18f6:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row1,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    18f8:	09 f0       	breq	.+2      	; 0x18fc <test_pattern+0x126>
    18fa:	c0 cf       	rjmp	.-128    	; 0x187c <test_pattern+0xa6>
    18fc:	c8 e1       	ldi	r28, 0x18	; 24
    18fe:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e8       	ldi	r21, 0x80	; 128
    1906:	6f e0       	ldi	r22, 0x0F	; 15
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	98 01       	movw	r18, r16
    1910:	cc 24       	eor	r12, r12
    1912:	dd 24       	eor	r13, r13
    1914:	76 01       	movw	r14, r12
    1916:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row3,0);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	ba 01       	movw	r22, r20
    1922:	00 e0       	ldi	r16, 0x00	; 0
    1924:	10 e8       	ldi	r17, 0x80	; 128
    1926:	2f e0       	ldi	r18, 0x0F	; 15
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row3);
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	ba 01       	movw	r22, r20
    1936:	00 e0       	ldi	r16, 0x00	; 0
    1938:	10 e0       	ldi	r17, 0x00	; 0
    193a:	98 01       	movw	r18, r16
    193c:	c1 2c       	mov	r12, r1
    193e:	a0 e8       	ldi	r26, 0x80	; 128
    1940:	da 2e       	mov	r13, r26
    1942:	af e0       	ldi	r26, 0x0F	; 15
    1944:	ea 2e       	mov	r14, r26
    1946:	f1 2c       	mov	r15, r1
    1948:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row3);
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	ba 01       	movw	r22, r20
    1954:	00 e0       	ldi	r16, 0x00	; 0
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	98 01       	movw	r18, r16
    195a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row3,0);
    195e:	84 e0       	ldi	r24, 0x04	; 4
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	ba 01       	movw	r22, r20
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	10 e8       	ldi	r17, 0x80	; 128
    196a:	2f e0       	ldi	r18, 0x0F	; 15
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	cc 24       	eor	r12, r12
    1970:	dd 24       	eor	r13, r13
    1972:	76 01       	movw	r14, r12
    1974:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1978:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    197c:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row2,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    197e:	09 f0       	breq	.+2      	; 0x1982 <test_pattern+0x1ac>
    1980:	bf cf       	rjmp	.-130    	; 0x1900 <test_pattern+0x12a>
    1982:	c8 e1       	ldi	r28, 0x18	; 24
    1984:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
            leds(0,row4,0,0);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	60 ef       	ldi	r22, 0xF0	; 240
    198e:	71 e0       	ldi	r23, 0x01	; 1
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	98 01       	movw	r18, r16
    1996:	cc 24       	eor	r12, r12
    1998:	dd 24       	eor	r13, r13
    199a:	76 01       	movw	r14, r12
    199c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row4,0);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	ba 01       	movw	r22, r20
    19a8:	00 e0       	ldi	r16, 0x00	; 0
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	20 ef       	ldi	r18, 0xF0	; 240
    19ae:	31 e0       	ldi	r19, 0x01	; 1
    19b0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row4);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	ba 01       	movw	r22, r20
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	10 e0       	ldi	r17, 0x00	; 0
    19c0:	98 01       	movw	r18, r16
    19c2:	c1 2c       	mov	r12, r1
    19c4:	d1 2c       	mov	r13, r1
    19c6:	f0 ef       	ldi	r31, 0xF0	; 240
    19c8:	ef 2e       	mov	r14, r31
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	ff 2e       	mov	r15, r31
    19ce:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row4);
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	ba 01       	movw	r22, r20
    19da:	00 e0       	ldi	r16, 0x00	; 0
    19dc:	10 e0       	ldi	r17, 0x00	; 0
    19de:	98 01       	movw	r18, r16
    19e0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row4,0);
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	ba 01       	movw	r22, r20
    19ec:	00 e0       	ldi	r16, 0x00	; 0
    19ee:	10 e0       	ldi	r17, 0x00	; 0
    19f0:	20 ef       	ldi	r18, 0xF0	; 240
    19f2:	31 e0       	ldi	r19, 0x01	; 1
    19f4:	cc 24       	eor	r12, r12
    19f6:	dd 24       	eor	r13, r13
    19f8:	76 01       	movw	r14, r12
    19fa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    19fe:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1a02:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row3,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter < 0x0018){
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <test_pattern+0x232>
    1a06:	bf cf       	rjmp	.-130    	; 0x1986 <test_pattern+0x1b0>
    1a08:	c8 e1       	ldi	r28, 0x18	; 24
    1a0a:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
            leds(0,row3,0,0);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e8       	ldi	r21, 0x80	; 128
    1a12:	6f e0       	ldi	r22, 0x0F	; 15
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	98 01       	movw	r18, r16
    1a1c:	cc 24       	eor	r12, r12
    1a1e:	dd 24       	eor	r13, r13
    1a20:	76 01       	movw	r14, r12
    1a22:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row3,0);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	ba 01       	movw	r22, r20
    1a2e:	00 e0       	ldi	r16, 0x00	; 0
    1a30:	10 e8       	ldi	r17, 0x80	; 128
    1a32:	2f e0       	ldi	r18, 0x0F	; 15
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row3);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	ba 01       	movw	r22, r20
    1a42:	00 e0       	ldi	r16, 0x00	; 0
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	98 01       	movw	r18, r16
    1a48:	c1 2c       	mov	r12, r1
    1a4a:	e0 e8       	ldi	r30, 0x80	; 128
    1a4c:	de 2e       	mov	r13, r30
    1a4e:	ef e0       	ldi	r30, 0x0F	; 15
    1a50:	ee 2e       	mov	r14, r30
    1a52:	f1 2c       	mov	r15, r1
    1a54:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row3);
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	ba 01       	movw	r22, r20
    1a60:	00 e0       	ldi	r16, 0x00	; 0
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	98 01       	movw	r18, r16
    1a66:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row3,0);
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	ba 01       	movw	r22, r20
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	10 e8       	ldi	r17, 0x80	; 128
    1a76:	2f e0       	ldi	r18, 0x0F	; 15
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	cc 24       	eor	r12, r12
    1a7c:	dd 24       	eor	r13, r13
    1a7e:	76 01       	movw	r14, r12
    1a80:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1a84:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1a88:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row4,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter< 0x0018){
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <test_pattern+0x2b8>
    1a8c:	bf cf       	rjmp	.-130    	; 0x1a0c <test_pattern+0x236>
    1a8e:	c8 e1       	ldi	r28, 0x18	; 24
    1a90:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row2,0,0);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	5c e7       	ldi	r21, 0x7C	; 124
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	00 e0       	ldi	r16, 0x00	; 0
    1a9e:	10 e0       	ldi	r17, 0x00	; 0
    1aa0:	98 01       	movw	r18, r16
    1aa2:	cc 24       	eor	r12, r12
    1aa4:	dd 24       	eor	r13, r13
    1aa6:	76 01       	movw	r14, r12
    1aa8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row2,0);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	ba 01       	movw	r22, r20
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	1c e7       	ldi	r17, 0x7C	; 124
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row2);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	ba 01       	movw	r22, r20
    1ac8:	00 e0       	ldi	r16, 0x00	; 0
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	98 01       	movw	r18, r16
    1ace:	c1 2c       	mov	r12, r1
    1ad0:	9c e7       	ldi	r25, 0x7C	; 124
    1ad2:	d9 2e       	mov	r13, r25
    1ad4:	e1 2c       	mov	r14, r1
    1ad6:	f1 2c       	mov	r15, r1
    1ad8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row2);
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	ba 01       	movw	r22, r20
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	98 01       	movw	r18, r16
    1aea:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row2,0);
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	ba 01       	movw	r22, r20
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	1c e7       	ldi	r17, 0x7C	; 124
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	cc 24       	eor	r12, r12
    1b00:	dd 24       	eor	r13, r13
    1b02:	76 01       	movw	r14, r12
    1b04:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1b08:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1b0c:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row3,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <test_pattern+0x33c>
    1b10:	c0 cf       	rjmp	.-128    	; 0x1a92 <test_pattern+0x2bc>
    1b12:	c8 e1       	ldi	r28, 0x18	; 24
    1b14:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row1,0,0);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	40 ee       	ldi	r20, 0xE0	; 224
    1b1a:	53 e0       	ldi	r21, 0x03	; 3
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	00 e0       	ldi	r16, 0x00	; 0
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	98 01       	movw	r18, r16
    1b26:	cc 24       	eor	r12, r12
    1b28:	dd 24       	eor	r13, r13
    1b2a:	76 01       	movw	r14, r12
    1b2c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row1,0);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	ba 01       	movw	r22, r20
    1b38:	00 ee       	ldi	r16, 0xE0	; 224
    1b3a:	13 e0       	ldi	r17, 0x03	; 3
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row1);
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	ba 01       	movw	r22, r20
    1b4c:	00 e0       	ldi	r16, 0x00	; 0
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
    1b50:	98 01       	movw	r18, r16
    1b52:	b0 ee       	ldi	r27, 0xE0	; 224
    1b54:	cb 2e       	mov	r12, r27
    1b56:	b3 e0       	ldi	r27, 0x03	; 3
    1b58:	db 2e       	mov	r13, r27
    1b5a:	e1 2c       	mov	r14, r1
    1b5c:	f1 2c       	mov	r15, r1
    1b5e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row1);
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	ba 01       	movw	r22, r20
    1b6a:	00 e0       	ldi	r16, 0x00	; 0
    1b6c:	10 e0       	ldi	r17, 0x00	; 0
    1b6e:	98 01       	movw	r18, r16
    1b70:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row1,0);
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	ba 01       	movw	r22, r20
    1b7c:	00 ee       	ldi	r16, 0xE0	; 224
    1b7e:	13 e0       	ldi	r17, 0x03	; 3
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	cc 24       	eor	r12, r12
    1b86:	dd 24       	eor	r13, r13
    1b88:	76 01       	movw	r14, r12
    1b8a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1b8e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1b92:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row2,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <test_pattern+0x3c2>
    1b96:	bf cf       	rjmp	.-130    	; 0x1b16 <test_pattern+0x340>
    1b98:	c8 e1       	ldi	r28, 0x18	; 24
    1b9a:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,plane,0,0);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	4f ef       	ldi	r20, 0xFF	; 255
    1ba0:	5f ef       	ldi	r21, 0xFF	; 255
    1ba2:	6f ef       	ldi	r22, 0xFF	; 255
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	00 e0       	ldi	r16, 0x00	; 0
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
    1baa:	98 01       	movw	r18, r16
    1bac:	cc 24       	eor	r12, r12
    1bae:	dd 24       	eor	r13, r13
    1bb0:	76 01       	movw	r14, r12
    1bb2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,plane,0);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	ba 01       	movw	r22, r20
    1bbe:	0f ef       	ldi	r16, 0xFF	; 255
    1bc0:	1f ef       	ldi	r17, 0xFF	; 255
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	31 e0       	ldi	r19, 0x01	; 1
    1bc6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,plane);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	ba 01       	movw	r22, r20
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	98 01       	movw	r18, r16
    1bd8:	af ef       	ldi	r26, 0xFF	; 255
    1bda:	ca 2e       	mov	r12, r26
    1bdc:	af ef       	ldi	r26, 0xFF	; 255
    1bde:	da 2e       	mov	r13, r26
    1be0:	af ef       	ldi	r26, 0xFF	; 255
    1be2:	ea 2e       	mov	r14, r26
    1be4:	a1 e0       	ldi	r26, 0x01	; 1
    1be6:	fa 2e       	mov	r15, r26
    1be8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,plane);
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	ba 01       	movw	r22, r20
    1bf4:	00 e0       	ldi	r16, 0x00	; 0
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	98 01       	movw	r18, r16
    1bfa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,plane,0);
    1bfe:	84 e0       	ldi	r24, 0x04	; 4
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	ba 01       	movw	r22, r20
    1c06:	0f ef       	ldi	r16, 0xFF	; 255
    1c08:	1f ef       	ldi	r17, 0xFF	; 255
    1c0a:	2f ef       	ldi	r18, 0xFF	; 255
    1c0c:	31 e0       	ldi	r19, 0x01	; 1
    1c0e:	cc 24       	eor	r12, r12
    1c10:	dd 24       	eor	r13, r13
    1c12:	76 01       	movw	r14, r12
    1c14:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1c18:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1c1c:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,row1,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <test_pattern+0x44c>
    1c20:	bd cf       	rjmp	.-134    	; 0x1b9c <test_pattern+0x3c6>
    1c22:	c8 e1       	ldi	r28, 0x18	; 24
    1c24:	d0 e0       	ldi	r29, 0x00	; 0
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
            leds(0,row0,0,0);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	4f e1       	ldi	r20, 0x1F	; 31
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	00 e0       	ldi	r16, 0x00	; 0
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	98 01       	movw	r18, r16
    1c36:	cc 24       	eor	r12, r12
    1c38:	dd 24       	eor	r13, r13
    1c3a:	76 01       	movw	r14, r12
    1c3c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row0,0);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	ba 01       	movw	r22, r20
    1c48:	0f e1       	ldi	r16, 0x1F	; 31
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row0);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	ba 01       	movw	r22, r20
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	98 01       	movw	r18, r16
    1c62:	ff e1       	ldi	r31, 0x1F	; 31
    1c64:	cf 2e       	mov	r12, r31
    1c66:	d1 2c       	mov	r13, r1
    1c68:	e1 2c       	mov	r14, r1
    1c6a:	f1 2c       	mov	r15, r1
    1c6c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row0);
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	ba 01       	movw	r22, r20
    1c78:	00 e0       	ldi	r16, 0x00	; 0
    1c7a:	10 e0       	ldi	r17, 0x00	; 0
    1c7c:	98 01       	movw	r18, r16
    1c7e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row0,0);
    1c82:	84 e0       	ldi	r24, 0x04	; 4
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	ba 01       	movw	r22, r20
    1c8a:	0f e1       	ldi	r16, 0x1F	; 31
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	cc 24       	eor	r12, r12
    1c94:	dd 24       	eor	r13, r13
    1c96:	76 01       	movw	r14, r12
    1c98:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1c9c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1ca0:	21 97       	sbiw	r28, 0x01	; 1
            leds(4,0,plane,0);
            test_frame();
            counter++;
        }
        counter = 0;
        while(counter <0x0018){
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <test_pattern+0x4d0>
    1ca4:	c0 cf       	rjmp	.-128    	; 0x1c26 <test_pattern+0x450>
            leds(1,0,row0,0);
            leds(2,0,0,row0);
            leds(3,0,0,row0);
            leds(4,0,row0,0);
            test_frame();
            counter++;
    1ca6:	c8 e1       	ldi	r28, 0x18	; 24
    1ca8:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(counter <0x0018){
    1caa:	c8 31       	cpi	r28, 0x18	; 24
    1cac:	d1 05       	cpc	r29, r1
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <test_pattern+0x4dc>
    1cb0:	a0 cd       	rjmp	.-1216   	; 0x17f2 <test_pattern+0x1c>
            leds(0,row0,0,0);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	4f e1       	ldi	r20, 0x1F	; 31
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	00 e0       	ldi	r16, 0x00	; 0
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	98 01       	movw	r18, r16
    1cc2:	cc 24       	eor	r12, r12
    1cc4:	dd 24       	eor	r13, r13
    1cc6:	76 01       	movw	r14, r12
    1cc8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row0,0);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	ba 01       	movw	r22, r20
    1cd4:	0f e1       	ldi	r16, 0x1F	; 31
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row0);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	ba 01       	movw	r22, r20
    1ce8:	00 e0       	ldi	r16, 0x00	; 0
    1cea:	10 e0       	ldi	r17, 0x00	; 0
    1cec:	98 01       	movw	r18, r16
    1cee:	ef e1       	ldi	r30, 0x1F	; 31
    1cf0:	ce 2e       	mov	r12, r30
    1cf2:	d1 2c       	mov	r13, r1
    1cf4:	e1 2c       	mov	r14, r1
    1cf6:	f1 2c       	mov	r15, r1
    1cf8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row0);
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	ba 01       	movw	r22, r20
    1d04:	00 e0       	ldi	r16, 0x00	; 0
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	98 01       	movw	r18, r16
    1d0a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row0,0);
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	ba 01       	movw	r22, r20
    1d16:	0f e1       	ldi	r16, 0x1F	; 31
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	cc 24       	eor	r12, r12
    1d20:	dd 24       	eor	r13, r13
    1d22:	76 01       	movw	r14, r12
    1d24:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1d28:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
            counter++;
    1d2c:	21 96       	adiw	r28, 0x01	; 1
    1d2e:	5d cd       	rjmp	.-1350   	; 0x17ea <test_pattern+0x14>

00001d30 <test_pattern1>:
            
        }
    }
}

void test_pattern1(){
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
    1d3c:	80 91 7a 01 	lds	r24, 0x017A
    1d40:	88 23       	and	r24, r24
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <test_pattern1+0x16>
    1d44:	42 c0       	rjmp	.+132    	; 0x1dca <test_pattern1+0x9a>
            leds(0,row0,0,0);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	4f e1       	ldi	r20, 0x1F	; 31
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	00 e0       	ldi	r16, 0x00	; 0
    1d52:	10 e0       	ldi	r17, 0x00	; 0
    1d54:	98 01       	movw	r18, r16
    1d56:	cc 24       	eor	r12, r12
    1d58:	dd 24       	eor	r13, r13
    1d5a:	76 01       	movw	r14, r12
    1d5c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row0,0);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	ba 01       	movw	r22, r20
    1d68:	0f e1       	ldi	r16, 0x1F	; 31
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row0);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	ba 01       	movw	r22, r20
    1d7c:	00 e0       	ldi	r16, 0x00	; 0
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	98 01       	movw	r18, r16
    1d82:	af e1       	ldi	r26, 0x1F	; 31
    1d84:	ca 2e       	mov	r12, r26
    1d86:	d1 2c       	mov	r13, r1
    1d88:	e1 2c       	mov	r14, r1
    1d8a:	f1 2c       	mov	r15, r1
    1d8c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row0);
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	ba 01       	movw	r22, r20
    1d98:	00 e0       	ldi	r16, 0x00	; 0
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	98 01       	movw	r18, r16
    1d9e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row0,0);
    1da2:	84 e0       	ldi	r24, 0x04	; 4
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	ba 01       	movw	r22, r20
    1daa:	0f e1       	ldi	r16, 0x1F	; 31
    1dac:	10 e0       	ldi	r17, 0x00	; 0
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	cc 24       	eor	r12, r12
    1db4:	dd 24       	eor	r13, r13
    1db6:	76 01       	movw	r14, r12
    1db8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1dbc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    uint32_t row2 = 0x7C00;
    uint32_t row1 = 0x3E0;
    uint32_t row0 = 0x1F;
    uint16_t counter = 0;
    while(1){
        while(next == 0){
    1dc0:	80 91 7a 01 	lds	r24, 0x017A
    1dc4:	88 23       	and	r24, r24
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <test_pattern1+0x9a>
    1dc8:	be cf       	rjmp	.-132    	; 0x1d46 <test_pattern1+0x16>
            leds(4,0,row1,0);
            test_frame();
            //counter++;
        }
        //counter = 0;
        next = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 7a 01 	sts	0x017A, r24
        while(counter <0x0018){
            leds(0,row2,0,0);
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	5c e7       	ldi	r21, 0x7C	; 124
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	98 01       	movw	r18, r16
    1de0:	cc 24       	eor	r12, r12
    1de2:	dd 24       	eor	r13, r13
    1de4:	76 01       	movw	r14, r12
    1de6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(1,0,row2,0);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	ba 01       	movw	r22, r20
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	1c e7       	ldi	r17, 0x7C	; 124
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(2,0,0,row2);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	ba 01       	movw	r22, r20
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	98 01       	movw	r18, r16
    1e0c:	c1 2c       	mov	r12, r1
    1e0e:	fc e7       	ldi	r31, 0x7C	; 124
    1e10:	df 2e       	mov	r13, r31
    1e12:	e1 2c       	mov	r14, r1
    1e14:	f1 2c       	mov	r15, r1
    1e16:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(3,0,0,row2);
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	ba 01       	movw	r22, r20
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	98 01       	movw	r18, r16
    1e28:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            leds(4,0,row2,0);
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	ba 01       	movw	r22, r20
    1e34:	00 e0       	ldi	r16, 0x00	; 0
    1e36:	1c e7       	ldi	r17, 0x7C	; 124
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	cc 24       	eor	r12, r12
    1e3e:	dd 24       	eor	r13, r13
    1e40:	76 01       	movw	r14, r12
    1e42:	0e 94 a3 0b 	call	0x1746	; 0x1746 <leds>
            test_frame();
    1e46:	0e 94 c9 0b 	call	0x1792	; 0x1792 <test_frame>
    1e4a:	c2 cf       	rjmp	.-124    	; 0x1dd0 <test_pattern1+0xa0>

00001e4c <__vector_9>:
        }
    }
}


ISR(TIMER1_OVF_vect){
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
//
    static uint16_t counter = 0;
    if(counter >= 0x2F){
    1e5a:	80 91 7b 01 	lds	r24, 0x017B
    1e5e:	90 91 7c 01 	lds	r25, 0x017C
    1e62:	8f 32       	cpi	r24, 0x2F	; 47
    1e64:	91 05       	cpc	r25, r1
    1e66:	38 f0       	brcs	.+14     	; 0x1e76 <__vector_9+0x2a>
        next = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 7a 01 	sts	0x017A, r24
        counter = 0;
    1e6e:	10 92 7c 01 	sts	0x017C, r1
    1e72:	10 92 7b 01 	sts	0x017B, r1
    }

}
    1e76:	9f 91       	pop	r25
    1e78:	8f 91       	pop	r24
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <main>:
/***********************************************************************/
//                                main                                 
/***********************************************************************/
int main(){

    DDRB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
    1e84:	84 b1       	in	r24, 0x04	; 4
    1e86:	80 67       	ori	r24, 0x70	; 112
    1e88:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
    1e8a:	85 b1       	in	r24, 0x05	; 5
    1e8c:	8f 60       	ori	r24, 0x0F	; 15
    1e8e:	85 b9       	out	0x05, r24	; 5
	spi_init();    //initalize SPI port
    1e90:	0e 94 52 10 	call	0x20a4	; 0x20a4 <spi_init>
    //initialize_interrupts();
	// Initialize AVR for use with mirf
	mirf_init();
    1e94:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <mirf_init>
    1e98:	8f e7       	ldi	r24, 0x7F	; 127
    1e9a:	98 e3       	ldi	r25, 0x38	; 56
    1e9c:	a1 e0       	ldi	r26, 0x01	; 1
    1e9e:	81 50       	subi	r24, 0x01	; 1
    1ea0:	90 40       	sbci	r25, 0x00	; 0
    1ea2:	a0 40       	sbci	r26, 0x00	; 0
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <main+0x1a>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <main+0x24>
    1ea8:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    sei();
    1eaa:	78 94       	sei
	mirf_read_register(STATUS, receive_buffer, 1);
    1eac:	87 e0       	ldi	r24, 0x07	; 7
    1eae:	60 e2       	ldi	r22, 0x20	; 32
    1eb0:	71 e0       	ldi	r23, 0x01	; 1
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <mirf_read_register>
	mirf_config();
    1eb8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <mirf_config>
   
	while(1){

        //test_pattern();
        test_pattern1();
    1ebc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <test_pattern1>
    1ec0:	fd cf       	rjmp	.-6      	; 0x1ebc <main+0x38>

00001ec2 <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
    1ec2:	84 b1       	in	r24, 0x04	; 4
    1ec4:	8c 60       	ori	r24, 0x0C	; 12
    1ec6:	84 b9       	out	0x04, r24	; 4
    mirf_CE_lo;
    1ec8:	2b 98       	cbi	0x05, 3	; 5
    mirf_CSN_hi;
    1eca:	2a 9a       	sbi	0x05, 2	; 5
// Initialize PCINT4 for ATtiny2313
//	GIMSK |= (1<<PCIE);
//	PCMSK |= (1<<PCINT4);

// Initialize PCINT12 for ATtiny167
    PCICR |= (1<<PCIE1);
    1ecc:	e8 e6       	ldi	r30, 0x68	; 104
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	82 60       	ori	r24, 0x02	; 2
    1ed4:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT12);
    1ed6:	ec e6       	ldi	r30, 0x6C	; 108
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 61       	ori	r24, 0x10	; 16
    1ede:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
    1ee0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <spi_init>
}
    1ee4:	08 95       	ret

00001ee6 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    1ee6:	80 91 89 01 	lds	r24, 0x0189
    1eea:	88 23       	and	r24, r24
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <mirf_data_ready+0xc>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
    1ef0:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    1ef2:	2a 98       	cbi	0x05, 2	; 5
    status = SPI_Receive();               // Read status register
    1ef4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
    1ef8:	2a 9a       	sbi	0x05, 2	; 5
    return status & (1<<RX_DR);
    1efa:	80 74       	andi	r24, 0x40	; 64
    1efc:	08 95       	ret

00001efe <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
    1f08:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    1f0a:	8f 71       	andi	r24, 0x1F	; 31
    1f0c:	80 62       	ori	r24, 0x20	; 32
    1f0e:	69 83       	std	Y+1, r22	; 0x01
    1f10:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    SPI_Transmit(value);
    1f14:	69 81       	ldd	r22, Y+1	; 0x01
    1f16:	86 2f       	mov	r24, r22
    1f18:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    mirf_CSN_hi;
    1f1c:	2a 9a       	sbi	0x05, 2	; 5
}
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
    1f2c:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
    1f2e:	81 e6       	ldi	r24, 0x61	; 97
    1f30:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
    1f34:	ce 01       	movw	r24, r28
    1f36:	be 01       	movw	r22, r28
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	0e 94 83 10 	call	0x2106	; 0x2106 <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
    1f3e:	2a 9a       	sbi	0x05, 2	; 5
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
    1f40:	87 e0       	ldi	r24, 0x07	; 7
    1f42:	60 e4       	ldi	r22, 0x40	; 64
    1f44:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>
}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	08 95       	ret

00001f4e <__vector_4>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT1_vect)
{
    1f4e:	1f 92       	push	r1
    1f50:	0f 92       	push	r0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	0f 92       	push	r0
    1f56:	11 24       	eor	r1, r1
    1f58:	2f 93       	push	r18
    1f5a:	3f 93       	push	r19
    1f5c:	4f 93       	push	r20
    1f5e:	5f 93       	push	r21
    1f60:	6f 93       	push	r22
    1f62:	7f 93       	push	r23
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	af 93       	push	r26
    1f6a:	bf 93       	push	r27
    1f6c:	ef 93       	push	r30
    1f6e:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
    1f70:	80 91 89 01 	lds	r24, 0x0189
    1f74:	88 23       	and	r24, r24
    1f76:	81 f0       	breq	.+32     	; 0x1f98 <__vector_4+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
    1f78:	2a 98       	cbi	0x05, 2	; 5
        status = SPI_Receive();               // Read status register
    1f7a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
    1f7e:	2a 9a       	sbi	0x05, 2	; 5

        mirf_CE_lo;                             // Deactivate transreceiver
    1f80:	2b 98       	cbi	0x05, 3	; 5
        RX_POWERUP;                             // Power up in receiving mode
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	6b e4       	ldi	r22, 0x4B	; 75
    1f86:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
    1f8a:	2b 9a       	sbi	0x05, 3	; 5
        PTX = 0;                                // Set to receiving mode
    1f8c:	10 92 89 01 	sts	0x0189, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
    1f90:	87 e0       	ldi	r24, 0x07	; 7
    1f92:	60 e3       	ldi	r22, 0x30	; 48
    1f94:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>
    }
}
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	62 e0       	ldi	r22, 0x02	; 2
    1fbe:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
    1fc2:	81 e1       	ldi	r24, 0x11	; 17
    1fc4:	60 e2       	ldi	r22, 0x20	; 32
    1fc6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>

    // Start receiver 
    PTX = 0;        // Start in receiving mode
    1fca:	10 92 89 01 	sts	0x0189, r1
    RX_POWERUP;     // Power up in receiving mode
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	6b e4       	ldi	r22, 0x4B	; 75
    1fd2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
    1fd6:	2b 9a       	sbi	0x05, 3	; 5
}
    1fd8:	08 95       	ret

00001fda <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    1fea:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
    1fec:	8f 71       	andi	r24, 0x1F	; 31
    1fee:	49 83       	std	Y+1, r20	; 0x01
    1ff0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    SPI_Transceive(value,value,len);
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	b8 01       	movw	r22, r16
    1ff8:	49 81       	ldd	r20, Y+1	; 0x01
    1ffa:	0e 94 83 10 	call	0x2106	; 0x2106 <SPI_Transceive>
    mirf_CSN_hi;
    1ffe:	2a 9a       	sbi	0x05, 2	; 5
}
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
    201c:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
    201e:	8f 71       	andi	r24, 0x1F	; 31
    2020:	80 62       	ori	r24, 0x20	; 32
    2022:	49 83       	std	Y+1, r20	; 0x01
    2024:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    SPI_Transmit_All(value,len);
    2028:	c8 01       	movw	r24, r16
    202a:	49 81       	ldd	r20, Y+1	; 0x01
    202c:	64 2f       	mov	r22, r20
    202e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <SPI_Transmit_All>
    mirf_CSN_hi;
    2032:	2a 9a       	sbi	0x05, 2	; 5
}
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    2040:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
    2042:	80 e1       	ldi	r24, 0x10	; 16
    2044:	45 e0       	ldi	r20, 0x05	; 5
    2046:	0e 94 06 10 	call	0x200c	; 0x200c <mirf_write_register>
}
    204a:	08 95       	ret

0000204c <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    204c:	bc 01       	movw	r22, r24
    mirf_CE_lo;
    204e:	2b 98       	cbi	0x05, 3	; 5
    mirf_write_register(RX_ADDR_P0,adr,5);
    2050:	8a e0       	ldi	r24, 0x0A	; 10
    2052:	45 e0       	ldi	r20, 0x05	; 5
    2054:	0e 94 06 10 	call	0x200c	; 0x200c <mirf_write_register>
    mirf_CE_hi;
    2058:	2b 9a       	sbi	0x05, 3	; 5
}
    205a:	08 95       	ret

0000205c <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	ec 01       	movw	r28, r24
    2064:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
    2066:	80 91 89 01 	lds	r24, 0x0189
    206a:	88 23       	and	r24, r24
    206c:	e1 f7       	brne	.-8      	; 0x2066 <mirf_send+0xa>

    mirf_CE_lo;
    206e:	2b 98       	cbi	0x05, 3	; 5

    PTX = 1;                        // Set to transmitter mode
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	80 93 89 01 	sts	0x0189, r24
    TX_POWERUP;                     // Power up
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	6a e4       	ldi	r22, 0x4A	; 74
    207a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <mirf_config_register>
    
    mirf_CSN_lo;                    // Pull down chip select
    207e:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
    2080:	81 ee       	ldi	r24, 0xE1	; 225
    2082:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
    2086:	2a 9a       	sbi	0x05, 2	; 5
    mirf_CSN_lo;                    // Pull down chip select
    2088:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
    208a:	80 ea       	ldi	r24, 0xA0	; 160
    208c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <SPI_Transmit>
    SPI_Transmit_All(value,len);   // Write payload
    2090:	ce 01       	movw	r24, r28
    2092:	61 2f       	mov	r22, r17
    2094:	0e 94 62 10 	call	0x20c4	; 0x20c4 <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
    2098:	2a 9a       	sbi	0x05, 2	; 5
    
    mirf_CE_hi;                     // Start transmission
    209a:	2b 9a       	sbi	0x05, 3	; 5
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	08 95       	ret

000020a4 <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    20a4:	81 b1       	in	r24, 0x01	; 1
    20a6:	80 67       	ori	r24, 0x70	; 112
    20a8:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(0<<SPR0);
    20aa:	8c b5       	in	r24, 0x2c	; 44
    20ac:	80 65       	ori	r24, 0x50	; 80
    20ae:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
    20b0:	8d b5       	in	r24, 0x2d	; 45
    20b2:	81 60       	ori	r24, 0x01	; 1
    20b4:	8d bd       	out	0x2d, r24	; 45


}
    20b6:	08 95       	ret

000020b8 <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    20b8:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    20ba:	0d b4       	in	r0, 0x2d	; 45
    20bc:	07 fe       	sbrs	r0, 7
    20be:	fd cf       	rjmp	.-6      	; 0x20ba <SPI_Transmit+0x2>
	return SPDR;
    20c0:	8e b5       	in	r24, 0x2e	; 46
}
    20c2:	08 95       	ret

000020c4 <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    20c4:	66 23       	and	r22, r22
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <SPI_Transmit_All+0x1c>
    20c8:	e8 2f       	mov	r30, r24
    20ca:	f9 2f       	mov	r31, r25
    20cc:	80 e0       	ldi	r24, 0x00	; 0
        SPI_Transmit(data[i]);
    20ce:	91 91       	ld	r25, Z+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    20d0:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    20d2:	0d b4       	in	r0, 0x2d	; 45
    20d4:	07 fe       	sbrs	r0, 7
    20d6:	fd cf       	rjmp	.-6      	; 0x20d2 <SPI_Transmit_All+0xe>
	return SPDR;
    20d8:	9e b5       	in	r25, 0x2e	; 46
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	86 17       	cp	r24, r22
    20de:	b8 f3       	brcs	.-18     	; 0x20ce <SPI_Transmit_All+0xa>
    20e0:	08 95       	ret

000020e2 <SPI_Receive>:
        SPI_Transmit(data[i]);
    }
}

char SPI_Receive(void){
    SPDR = 0x00;
    20e2:	1e bc       	out	0x2e, r1	; 46
    while(bit_is_clear(SPSR,SPIF)){};
    20e4:	0d b4       	in	r0, 0x2d	; 45
    20e6:	07 fe       	sbrs	r0, 7
    20e8:	fd cf       	rjmp	.-6      	; 0x20e4 <SPI_Receive+0x2>
    return SPDR;
    20ea:	8e b5       	in	r24, 0x2e	; 46
}
    20ec:	08 95       	ret

000020ee <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    20ee:	e8 2f       	mov	r30, r24
    20f0:	f9 2f       	mov	r31, r25
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
    20f4:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
    20f6:	0d b4       	in	r0, 0x2d	; 45
    20f8:	07 fe       	sbrs	r0, 7
    20fa:	fd cf       	rjmp	.-6      	; 0x20f6 <SPI_Receive_All+0x8>
        data[i] = SPDR;
    20fc:	9e b5       	in	r25, 0x2e	; 46
    20fe:	91 93       	st	Z+, r25
    2100:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
    2102:	c1 f7       	brne	.-16     	; 0x20f4 <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
    2104:	08 95       	ret

00002106 <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    2106:	44 23       	and	r20, r20
    2108:	79 f0       	breq	.+30     	; 0x2128 <SPI_Transceive+0x22>
    210a:	a8 2f       	mov	r26, r24
    210c:	b9 2f       	mov	r27, r25
    210e:	e6 2f       	mov	r30, r22
    2110:	f7 2f       	mov	r31, r23
    2112:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    2114:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
uint8_t SPI_Transmit(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    2116:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
    2118:	0d b4       	in	r0, 0x2d	; 45
    211a:	07 fe       	sbrs	r0, 7
    211c:	fd cf       	rjmp	.-6      	; 0x2118 <SPI_Transceive+0x12>
	return SPDR;
    211e:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
    2120:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	84 17       	cp	r24, r20
    2126:	b0 f3       	brcs	.-20     	; 0x2114 <SPI_Transceive+0xe>
    2128:	08 95       	ret

0000212a <__udivmodqi4>:
    212a:	99 1b       	sub	r25, r25
    212c:	79 e0       	ldi	r23, 0x09	; 9
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <__udivmodqi4_ep>

00002130 <__udivmodqi4_loop>:
    2130:	99 1f       	adc	r25, r25
    2132:	96 17       	cp	r25, r22
    2134:	08 f0       	brcs	.+2      	; 0x2138 <__udivmodqi4_ep>
    2136:	96 1b       	sub	r25, r22

00002138 <__udivmodqi4_ep>:
    2138:	88 1f       	adc	r24, r24
    213a:	7a 95       	dec	r23
    213c:	c9 f7       	brne	.-14     	; 0x2130 <__udivmodqi4_loop>
    213e:	80 95       	com	r24
    2140:	08 95       	ret

00002142 <_exit>:
    2142:	f8 94       	cli

00002144 <__stop_program>:
    2144:	ff cf       	rjmp	.-2      	; 0x2144 <__stop_program>
