
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  0000046a  2**0
                  ALLOC
  3 .stab         000017dc  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a27  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e6 ec       	ldi	r30, 0xC6	; 198
  64:	f3 e0       	ldi	r31, 0x03	; 3
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a0 31       	cpi	r26, 0x10	; 16
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e1       	ldi	r26, 0x10	; 16
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 31       	cpi	r26, 0x11	; 17
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  86:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <transmit_string>:
	// Get and return received data from buffer 
	return UDR;
}
*/
transmit_string(char *ptr)
{
  8e:	fc 01       	movw	r30, r24
	while(*ptr)
  90:	80 81       	ld	r24, Z
  92:	88 23       	and	r24, r24
  94:	21 f0       	breq	.+8      	; 0x9e <transmit_string+0x10>
	while ( !(UCSRA & (1<<RXC)) );
	// Get and return received data from buffer 
	return UDR;
}
*/
transmit_string(char *ptr)
  96:	31 96       	adiw	r30, 0x01	; 1
{
	while(*ptr)
  98:	81 91       	ld	r24, Z+
  9a:	88 23       	and	r24, r24
  9c:	e9 f7       	brne	.-6      	; 0x98 <transmit_string+0xa>
	{
//		USART_Transmit(*ptr);
		ptr++;
	}
}
  9e:	08 95       	ret

000000a0 <main>:

int main (void)
{
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	//USART_Init(MY_UBBR);
	DDRB |= (1<<PB1); // Test passed LED
  ba:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<PB0); // Test failed LED
  bc:	20 9a       	sbi	0x04, 0	; 4
	
	char buffer [16] = {'.','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}'};
  be:	8e 01       	movw	r16, r28
  c0:	0f 5f       	subi	r16, 0xFF	; 255
  c2:	1f 4f       	sbci	r17, 0xFF	; 255
  c4:	d8 01       	movw	r26, r16
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2c>
	uint8_t buffersize = 16;
	// Initialize AVR for use with mirf
	mirf_init();
  d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	98 e3       	ldi	r25, 0x38	; 56
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x48>
  e8:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
	sei();
  ea:	78 94       	sei
		transmit_string("Hallo Welt!\r\n");
	}*/
	
	//while (1)
	//{
		mirf_read_register (STATUS, buffer, 1);
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	b8 01       	movw	r22, r16
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mirf_read_register>
		}*/
		//_delay_ms (100);
	//}
	
	// Configure mirf
	mirf_config();
  f6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <mirf_config>
	// Test transmitting
	buffer[0] = 'h';
  fa:	88 e6       	ldi	r24, 0x68	; 104
  fc:	89 83       	std	Y+1, r24	; 0x01
	while (testing_sender)
	{
		buffer[15]++;
		if (buffer[15] < 'a' || buffer[15] > 'z')
		{
			buffer[15] = 'a';
  fe:	81 e6       	ldi	r24, 0x61	; 97
 100:	f8 2e       	mov	r15, r24
	buffer[0] = 'h';
	
	char testing_sender = 1;
	while (testing_sender)
	{
		buffer[15]++;
 102:	88 89       	ldd	r24, Y+16	; 0x10
 104:	98 2f       	mov	r25, r24
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	98 8b       	std	Y+16, r25	; 0x10
		if (buffer[15] < 'a' || buffer[15] > 'z')
 10a:	80 56       	subi	r24, 0x60	; 96
 10c:	8a 31       	cpi	r24, 0x1A	; 26
 10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x72>
		{
			buffer[15] = 'a';
 110:	f8 8a       	std	Y+16, r15	; 0x10
		}
		
		mirf_send(buffer,buffersize);
 112:	c8 01       	movw	r24, r16
 114:	60 e1       	ldi	r22, 0x10	; 16
 116:	0e 94 bd 01 	call	0x37a	; 0x37a <mirf_send>
 11a:	af e0       	ldi	r26, 0x0F	; 15
 11c:	b7 e2       	ldi	r27, 0x27	; 39
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x7e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x84>
 124:	00 00       	nop
 126:	ed cf       	rjmp	.-38     	; 0x102 <main+0x62>

00000128 <spi_init>:
#define USCK		PB7

void spi_init()
// Initialize pins for spi communication
{
    DDR_SPI &= ~(1<<DI);
 128:	25 98       	cbi	0x04, 5	; 4
	PORT_SPI |= (1<<DI); 
 12a:	2d 9a       	sbi	0x05, 5	; 5
	DDR_SPI |= (1<<USCK)|(1<<DO); 
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	80 6c       	ori	r24, 0xC0	; 192
 130:	84 b9       	out	0x04, r24	; 4
	USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK); 
 132:	8a e1       	ldi	r24, 0x1A	; 26
 134:	80 93 b8 00 	sts	0x00B8, r24
	
	// For disabling SPI
	//DDRB &= ~((1<<USCK)|(1<<DI)|(1<<DO)); 
	//USICR = 0; 
}
 138:	08 95       	ret

0000013a <spi>:

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 13a:	80 93 ba 00 	sts	0x00BA, r24
	USISR = (1<<USIOIF); 
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	80 93 b9 00 	sts	0x00B9, r24
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 144:	9b e1       	ldi	r25, 0x1B	; 27
 146:	90 93 b8 00 	sts	0x00B8, r25
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 14a:	80 91 b9 00 	lds	r24, 0x00B9
 14e:	86 ff       	sbrs	r24, 6
 150:	fa cf       	rjmp	.-12     	; 0x146 <spi+0xc>
	return USIDR; 
 152:	80 91 ba 00 	lds	r24, 0x00BA
} 
 156:	08 95       	ret

00000158 <spi_transfer_sync>:

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 158:	44 23       	and	r20, r20
 15a:	c1 f0       	breq	.+48     	; 0x18c <spi_transfer_sync+0x34>
 15c:	a8 2f       	mov	r26, r24
 15e:	b9 2f       	mov	r27, r25
 160:	e6 2f       	mov	r30, r22
 162:	f7 2f       	mov	r31, r23
 164:	20 e0       	ldi	r18, 0x00	; 0
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 166:	30 e4       	ldi	r19, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 168:	9b e1       	ldi	r25, 0x1B	; 27
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 16a:	8d 91       	ld	r24, X+
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 16c:	80 93 ba 00 	sts	0x00BA, r24
	USISR = (1<<USIOIF); 
 170:	30 93 b9 00 	sts	0x00B9, r19
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 174:	90 93 b8 00 	sts	0x00B8, r25
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 178:	80 91 b9 00 	lds	r24, 0x00B9
 17c:	86 ff       	sbrs	r24, 6
 17e:	fa cf       	rjmp	.-12     	; 0x174 <spi_transfer_sync+0x1c>
	return USIDR; 
 180:	80 91 ba 00 	lds	r24, 0x00BA
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		datain[i] = spi(dataout[i]);
 184:	81 93       	st	Z+, r24

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	24 17       	cp	r18, r20
 18a:	78 f3       	brcs	.-34     	; 0x16a <spi_transfer_sync+0x12>
 18c:	08 95       	ret

0000018e <spi_transmit_sync>:

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 18e:	66 23       	and	r22, r22
 190:	a9 f0       	breq	.+42     	; 0x1bc <spi_transmit_sync+0x2e>
 192:	e8 2f       	mov	r30, r24
 194:	f9 2f       	mov	r31, r25
 196:	20 e0       	ldi	r18, 0x00	; 0
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
	USISR = (1<<USIOIF); 
 198:	30 e4       	ldi	r19, 0x40	; 64
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 19a:	9b e1       	ldi	r25, 0x1B	; 27
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
	{
		spi(dataout[i]);
 19c:	81 91       	ld	r24, Z+
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 19e:	80 93 ba 00 	sts	0x00BA, r24
	USISR = (1<<USIOIF); 
 1a2:	30 93 b9 00 	sts	0x00B9, r19
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1a6:	90 93 b8 00 	sts	0x00B8, r25
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1aa:	80 91 b9 00 	lds	r24, 0x00B9
 1ae:	86 ff       	sbrs	r24, 6
 1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <spi_transmit_sync+0x18>
	return USIDR; 
 1b2:	80 91 ba 00 	lds	r24, 0x00BA

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	uint8_t i;      
	for (i = 0; i < len; i++)
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	26 17       	cp	r18, r22
 1ba:	80 f3       	brcs	.-32     	; 0x19c <spi_transmit_sync+0xe>
 1bc:	08 95       	ret

000001be <spi_fast_shift>:
	//USICR = 0; 
}

unsigned char spi(unsigned char val) 
{ 
	USIDR = val; 
 1be:	80 93 ba 00 	sts	0x00BA, r24
	USISR = (1<<USIOIF); 
 1c2:	80 e4       	ldi	r24, 0x40	; 64
 1c4:	80 93 b9 00 	sts	0x00B9, r24
	do
	{ 
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC); 
 1c8:	9b e1       	ldi	r25, 0x1B	; 27
 1ca:	90 93 b8 00 	sts	0x00B8, r25
	}
	while ((USISR & (1<<USIOIF)) == 0); 
 1ce:	80 91 b9 00 	lds	r24, 0x00B9
 1d2:	86 ff       	sbrs	r24, 6
 1d4:	fa cf       	rjmp	.-12     	; 0x1ca <spi_fast_shift+0xc>
	return USIDR; 
 1d6:	80 91 ba 00 	lds	r24, 0x00BA

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	return spi(data);
}
 1da:	08 95       	ret

000001dc <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 1dc:	84 b1       	in	r24, 0x04	; 4
 1de:	8c 60       	ori	r24, 0x0C	; 12
 1e0:	84 b9       	out	0x04, r24	; 4
    mirf_CE_lo;
 1e2:	2b 98       	cbi	0x05, 3	; 5
    mirf_CSN_hi;
 1e4:	2a 9a       	sbi	0x05, 2	; 5
// Initialize PCINT4 for ATtiny2313
//	GIMSK |= (1<<PCIE);
//	PCMSK |= (1<<PCINT4);

// Initialize PCINT12 for ATtiny167
    PCICR |= (1<<PCIE1);
 1e6:	e8 e6       	ldi	r30, 0x68	; 104
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT12);
 1f0:	ec e6       	ldi	r30, 0x6C	; 108
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
 1fa:	0e 94 94 00 	call	0x128	; 0x128 <spi_init>
}
 1fe:	08 95       	ret

00000200 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 200:	80 91 10 01 	lds	r24, 0x0110
 204:	88 23       	and	r24, r24
 206:	11 f0       	breq	.+4      	; 0x20c <mirf_data_ready+0xc>
 208:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = spi_fast_shift(NOP);               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 20a:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 20c:	2a 98       	cbi	0x05, 2	; 5
    status = spi_fast_shift(NOP);               // Read status register
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    mirf_CSN_hi;                                // Pull up chip select
 214:	2a 9a       	sbi	0x05, 2	; 5
    return status & (1<<RX_DR);
 216:	80 74       	andi	r24, 0x40	; 64
 218:	08 95       	ret

0000021a <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	0f 92       	push	r0
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 224:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 226:	8f 71       	andi	r24, 0x1F	; 31
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	69 83       	std	Y+1, r22	; 0x01
 22c:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    spi_fast_shift(value);
 230:	69 81       	ldd	r22, Y+1	; 0x01
 232:	86 2f       	mov	r24, r22
 234:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    mirf_CSN_hi;
 238:	2a 9a       	sbi	0x05, 2	; 5
}
 23a:	0f 90       	pop	r0
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 248:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
 24a:	81 e6       	ldi	r24, 0x61	; 97
 24c:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    spi_transfer_sync(data,data,mirf_PAYLOAD); // Read payload
 250:	ce 01       	movw	r24, r28
 252:	be 01       	movw	r22, r28
 254:	40 e1       	ldi	r20, 0x10	; 16
 256:	0e 94 ac 00 	call	0x158	; 0x158 <spi_transfer_sync>
    mirf_CSN_hi;                               // Pull up chip select
 25a:	2a 9a       	sbi	0x05, 2	; 5
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 25c:	87 e0       	ldi	r24, 0x07	; 7
 25e:	60 e4       	ldi	r22, 0x40	; 64
 260:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <PCINT_vect>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 28c:	80 91 10 01 	lds	r24, 0x0110
 290:	88 23       	and	r24, r24
 292:	89 f0       	breq	.+34     	; 0x2b6 <PCINT_vect+0x4c>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 294:	2a 98       	cbi	0x05, 2	; 5
        status = spi_fast_shift(NOP);               // Read status register
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
        mirf_CSN_hi;                                // Pull up chip select
 29c:	2a 9a       	sbi	0x05, 2	; 5

        mirf_CE_lo;                             // Deactivate transreceiver
 29e:	2b 98       	cbi	0x05, 3	; 5
        RX_POWERUP;                             // Power up in receiving mode
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	6b e4       	ldi	r22, 0x4B	; 75
 2a4:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 2a8:	2b 9a       	sbi	0x05, 3	; 5
        PTX = 0;                                // Set to receiving mode
 2aa:	10 92 10 01 	sts	0x0110, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	60 e3       	ldi	r22, 0x30	; 48
 2b2:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
    }
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 2e0:	81 e1       	ldi	r24, 0x11	; 17
 2e2:	60 e1       	ldi	r22, 0x10	; 16
 2e4:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 2e8:	10 92 10 01 	sts	0x0110, r1
    RX_POWERUP;     // Power up in receiving mode
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	6b e4       	ldi	r22, 0x4B	; 75
 2f0:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 2f4:	2b 9a       	sbi	0x05, 3	; 5
}
 2f6:	08 95       	ret

000002f8 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	0f 92       	push	r0
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 308:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 30a:	8f 71       	andi	r24, 0x1F	; 31
 30c:	49 83       	std	Y+1, r20	; 0x01
 30e:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    spi_transfer_sync(value,value,len);
 312:	c8 01       	movw	r24, r16
 314:	b8 01       	movw	r22, r16
 316:	49 81       	ldd	r20, Y+1	; 0x01
 318:	0e 94 ac 00 	call	0x158	; 0x158 <spi_transfer_sync>
    mirf_CSN_hi;
 31c:	2a 9a       	sbi	0x05, 2	; 5
}
 31e:	0f 90       	pop	r0
 320:	cf 91       	pop	r28
 322:	df 91       	pop	r29
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	0f 92       	push	r0
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 33a:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 33c:	8f 71       	andi	r24, 0x1F	; 31
 33e:	80 62       	ori	r24, 0x20	; 32
 340:	49 83       	std	Y+1, r20	; 0x01
 342:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    spi_transmit_sync(value,len);
 346:	c8 01       	movw	r24, r16
 348:	49 81       	ldd	r20, Y+1	; 0x01
 34a:	64 2f       	mov	r22, r20
 34c:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit_sync>
    mirf_CSN_hi;
 350:	2a 9a       	sbi	0x05, 2	; 5
}
 352:	0f 90       	pop	r0
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 35e:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	45 e0       	ldi	r20, 0x05	; 5
 364:	0e 94 95 01 	call	0x32a	; 0x32a <mirf_write_register>
}
 368:	08 95       	ret

0000036a <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 36a:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 36c:	2b 98       	cbi	0x05, 3	; 5
    mirf_write_register(RX_ADDR_P0,adr,5);
 36e:	8a e0       	ldi	r24, 0x0A	; 10
 370:	45 e0       	ldi	r20, 0x05	; 5
 372:	0e 94 95 01 	call	0x32a	; 0x32a <mirf_write_register>
    mirf_CE_hi;
 376:	2b 9a       	sbi	0x05, 3	; 5
}
 378:	08 95       	ret

0000037a <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
 384:	80 91 10 01 	lds	r24, 0x0110
 388:	88 23       	and	r24, r24
 38a:	e1 f7       	brne	.-8      	; 0x384 <mirf_send+0xa>

    mirf_CE_lo;
 38c:	2b 98       	cbi	0x05, 3	; 5

    PTX = 1;                        // Set to transmitter mode
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 10 01 	sts	0x0110, r24
    TX_POWERUP;                     // Power up
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	6a e4       	ldi	r22, 0x4A	; 74
 398:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
    
    mirf_CSN_lo;                    // Pull down chip select
 39c:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
 39e:	81 ee       	ldi	r24, 0xE1	; 225
 3a0:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    mirf_CSN_hi;                    // Pull up chip select
 3a4:	2a 9a       	sbi	0x05, 2	; 5
    mirf_CSN_lo;                    // Pull down chip select
 3a6:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 3a8:	80 ea       	ldi	r24, 0xA0	; 160
 3aa:	0e 94 df 00 	call	0x1be	; 0x1be <spi_fast_shift>
    spi_transmit_sync(value,len);   // Write payload
 3ae:	ce 01       	movw	r24, r28
 3b0:	61 2f       	mov	r22, r17
 3b2:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transmit_sync>
    mirf_CSN_hi;                    // Pull up chip select
 3b6:	2a 9a       	sbi	0x05, 2	; 5
    
    mirf_CE_hi;                     // Start transmission
 3b8:	2b 9a       	sbi	0x05, 3	; 5
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
