
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000394  00000428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000438  2**0
                  ALLOC
  3 .stab         000017ac  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a35  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e4 e9       	ldi	r30, 0x94	; 148
  64:	f3 e0       	ldi	r31, 0x03	; 3
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a0 31       	cpi	r26, 0x10	; 16
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e1       	ldi	r26, 0x10	; 16
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 31       	cpi	r26, 0x11	; 17
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  86:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <transmit_string>:
	// Get and return received data from buffer 
	return UDR;
}
*/
transmit_string(char *ptr)
{
  8e:	fc 01       	movw	r30, r24
	while(*ptr)
  90:	80 81       	ld	r24, Z
  92:	88 23       	and	r24, r24
  94:	21 f0       	breq	.+8      	; 0x9e <transmit_string+0x10>
	while ( !(UCSRA & (1<<RXC)) );
	// Get and return received data from buffer 
	return UDR;
}
*/
transmit_string(char *ptr)
  96:	31 96       	adiw	r30, 0x01	; 1
{
	while(*ptr)
  98:	81 91       	ld	r24, Z+
  9a:	88 23       	and	r24, r24
  9c:	e9 f7       	brne	.-6      	; 0x98 <transmit_string+0xa>
	{
//		USART_Transmit(*ptr);
		ptr++;
	}
}
  9e:	08 95       	ret

000000a0 <main>:

int main (void)
{
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	//USART_Init(MY_UBBR);
	DDRB |= (1<<PB1); // Test passed LED
  ba:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<PB0); // Test failed LED
  bc:	20 9a       	sbi	0x04, 0	; 4
	
	char buffer [16] = {'.','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}'};
  be:	8e 01       	movw	r16, r28
  c0:	0f 5f       	subi	r16, 0xFF	; 255
  c2:	1f 4f       	sbci	r17, 0xFF	; 255
  c4:	d8 01       	movw	r26, r16
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2c>
	uint8_t buffersize = 16;
	// Initialize AVR for use with mirf
	mirf_init();
  d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <mirf_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	98 e3       	ldi	r25, 0x38	; 56
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x48>
  e8:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
	sei();
  ea:	78 94       	sei
		transmit_string("Hallo Welt!\r\n");
	}*/
	
	//while (1)
	//{
		mirf_read_register (STATUS, buffer, 1);
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	b8 01       	movw	r22, r16
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <mirf_read_register>
		}*/
		//_delay_ms (100);
	//}
	
	// Configure mirf
	mirf_config();
  f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <mirf_config>
	// Test transmitting
	buffer[0] = 'h';
  fa:	88 e6       	ldi	r24, 0x68	; 104
  fc:	89 83       	std	Y+1, r24	; 0x01
	while (testing_sender)
	{
		buffer[15]++;
		if (buffer[15] < 'a' || buffer[15] > 'z')
		{
			buffer[15] = 'a';
  fe:	81 e6       	ldi	r24, 0x61	; 97
 100:	f8 2e       	mov	r15, r24
	buffer[0] = 'h';
	
	char testing_sender = 1;
	while (testing_sender)
	{
		buffer[15]++;
 102:	88 89       	ldd	r24, Y+16	; 0x10
 104:	98 2f       	mov	r25, r24
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	98 8b       	std	Y+16, r25	; 0x10
		if (buffer[15] < 'a' || buffer[15] > 'z')
 10a:	80 56       	subi	r24, 0x60	; 96
 10c:	8a 31       	cpi	r24, 0x1A	; 26
 10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x72>
		{
			buffer[15] = 'a';
 110:	f8 8a       	std	Y+16, r15	; 0x10
		}
		
		mirf_send(buffer,buffersize);
 112:	c8 01       	movw	r24, r16
 114:	60 e1       	ldi	r22, 0x10	; 16
 116:	0e 94 a4 01 	call	0x348	; 0x348 <mirf_send>
 11a:	af e0       	ldi	r26, 0x0F	; 15
 11c:	b7 e2       	ldi	r27, 0x27	; 39
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x7e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x84>
 124:	00 00       	nop
 126:	ed cf       	rjmp	.-38     	; 0x102 <main+0x62>

00000128 <spi_init>:
#define MOSI 4
#define SCK 5

void spi_init(){

	DDRA |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 128:	81 b1       	in	r24, 0x01	; 1
 12a:	80 67       	ori	r24, 0x70	; 112
 12c:	81 b9       	out	0x01, r24	; 1
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 12e:	8c b5       	in	r24, 0x2c	; 44
 130:	81 65       	ori	r24, 0x51	; 81
 132:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 134:	8d b5       	in	r24, 0x2d	; 45
 136:	81 60       	ori	r24, 0x01	; 1
 138:	8d bd       	out	0x2d, r24	; 45


}
 13a:	08 95       	ret

0000013c <SPI_Transmit>:
//	SPI_MasterTransmit
//******************************************************************************
char SPI_Transmit(char cData)
{
	// Start transmission
	SPDR = cData;
 13c:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <SPI_Transmit+0x2>
	return SPDR;
 144:	8e b5       	in	r24, 0x2e	; 46
}
 146:	08 95       	ret

00000148 <SPI_Transmit_All>:

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
 148:	66 23       	and	r22, r22
 14a:	61 f0       	breq	.+24     	; 0x164 <SPI_Transmit_All+0x1c>
 14c:	e8 2f       	mov	r30, r24
 14e:	f9 2f       	mov	r31, r25
 150:	80 e0       	ldi	r24, 0x00	; 0
        SPDR = 0x00;
 152:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <SPI_Transmit_All+0xc>
        data[i] = SPDR;
 15a:	9e b5       	in	r25, 0x2e	; 46
 15c:	91 93       	st	Z+, r25
}

void SPI_Transmit_All(uint8_t *data, uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < len; i++){
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	86 17       	cp	r24, r22
 162:	b8 f3       	brcs	.-18     	; 0x152 <SPI_Transmit_All+0xa>
 164:	08 95       	ret

00000166 <SPI_Receive>:
        data[i] = SPDR;
    }
}

char SPI_Receive(void){
    SPDR = 0x00;
 166:	1e bc       	out	0x2e, r1	; 46
    while(bit_is_clear(SPSR,SPIF)){};
 168:	0d b4       	in	r0, 0x2d	; 45
 16a:	07 fe       	sbrs	r0, 7
 16c:	fd cf       	rjmp	.-6      	; 0x168 <SPI_Receive+0x2>
    return SPDR;
 16e:	8e b5       	in	r24, 0x2e	; 46
}
 170:	08 95       	ret

00000172 <SPI_Receive_All>:

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
 172:	e8 2f       	mov	r30, r24
 174:	f9 2f       	mov	r31, r25
 176:	80 e2       	ldi	r24, 0x20	; 32
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
        SPDR = 0x00;
 178:	1e bc       	out	0x2e, r1	; 46
        while(bit_is_clear(SPSR,SPIF)){};
 17a:	0d b4       	in	r0, 0x2d	; 45
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <SPI_Receive_All+0x8>
        data[i] = SPDR;
 180:	9e b5       	in	r25, 0x2e	; 46
 182:	91 93       	st	Z+, r25
 184:	81 50       	subi	r24, 0x01	; 1
}

void SPI_Receive_All(uint8_t *data,uint8_t len)
{
    uint8_t i = 0;
    for(i = 0; i < 32; i++){
 186:	c1 f7       	brne	.-16     	; 0x178 <SPI_Receive_All+0x6>
        SPDR = 0x00;
        while(bit_is_clear(SPSR,SPIF)){};
        data[i] = SPDR;
    }
}
 188:	08 95       	ret

0000018a <SPI_Transceive>:

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
 18a:	44 23       	and	r20, r20
 18c:	79 f0       	breq	.+30     	; 0x1ac <SPI_Transceive+0x22>
 18e:	a8 2f       	mov	r26, r24
 190:	b9 2f       	mov	r27, r25
 192:	e6 2f       	mov	r30, r22
 194:	f7 2f       	mov	r31, r23
 196:	80 e0       	ldi	r24, 0x00	; 0
    {
        datain[i] = SPI_Transmit(dataout[i]); 
 198:	9d 91       	ld	r25, X+
//	SPI_MasterTransmit
//******************************************************************************
char SPI_Transmit(char cData)
{
	// Start transmission
	SPDR = cData;
 19a:	9e bd       	out	0x2e, r25	; 46
	// Wait for transmission complete
	while( bit_is_clear(SPSR,SPIF)){};
 19c:	0d b4       	in	r0, 0x2d	; 45
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <SPI_Transceive+0x12>
	return SPDR;
 1a2:	9e b5       	in	r25, 0x2e	; 46
void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        datain[i] = SPI_Transmit(dataout[i]); 
 1a4:	91 93       	st	Z+, r25
}

void SPI_Transceive(uint8_t *dataout, uint8_t *datain, uint8_t len)
{
    uint8_t i;
    for(i = 0; i < len; i++)
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	84 17       	cp	r24, r20
 1aa:	b0 f3       	brcs	.-20     	; 0x198 <SPI_Transceive+0xe>
 1ac:	08 95       	ret

000001ae <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	8c 60       	ori	r24, 0x0C	; 12
 1b2:	84 b9       	out	0x04, r24	; 4
    mirf_CE_lo;
 1b4:	2b 98       	cbi	0x05, 3	; 5
    mirf_CSN_hi;
 1b6:	2a 9a       	sbi	0x05, 2	; 5
// Initialize PCINT4 for ATtiny2313
//	GIMSK |= (1<<PCIE);
//	PCMSK |= (1<<PCINT4);

// Initialize PCINT12 for ATtiny167
    PCICR |= (1<<PCIE1);
 1b8:	e8 e6       	ldi	r30, 0x68	; 104
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT12);
 1c2:	ec e6       	ldi	r30, 0x6C	; 108
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
 1cc:	0e 94 94 00 	call	0x128	; 0x128 <spi_init>
}
 1d0:	08 95       	ret

000001d2 <mirf_data_ready>:
}

extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 1d2:	80 91 10 01 	lds	r24, 0x0110
 1d6:	88 23       	and	r24, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <mirf_data_ready+0xc>
 1da:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 1dc:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 1de:	2a 98       	cbi	0x05, 2	; 5
    status = SPI_Receive();               // Read status register
 1e0:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
 1e4:	2a 9a       	sbi	0x05, 2	; 5
    return status & (1<<RX_DR);
 1e6:	80 74       	andi	r24, 0x40	; 64
 1e8:	08 95       	ret

000001ea <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 1f4:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
 1f6:	8f 71       	andi	r24, 0x1F	; 31
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	69 83       	std	Y+1, r22	; 0x01
 1fc:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    SPI_Transmit(value);
 200:	69 81       	ldd	r22, Y+1	; 0x01
 202:	86 2f       	mov	r24, r22
 204:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    mirf_CSN_hi;
 208:	2a 9a       	sbi	0x05, 2	; 5
}
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 218:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
 220:	ce 01       	movw	r24, r28
 222:	be 01       	movw	r22, r28
 224:	40 e1       	ldi	r20, 0x10	; 16
 226:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
 22a:	2a 9a       	sbi	0x05, 2	; 5
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	60 e4       	ldi	r22, 0x40	; 64
 230:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <PCINT_vect>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 25c:	80 91 10 01 	lds	r24, 0x0110
 260:	88 23       	and	r24, r24
 262:	81 f0       	breq	.+32     	; 0x284 <PCINT_vect+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 264:	2a 98       	cbi	0x05, 2	; 5
        status = SPI_Receive();               // Read status register
 266:	0e 94 b3 00 	call	0x166	; 0x166 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
 26a:	2a 9a       	sbi	0x05, 2	; 5

        mirf_CE_lo;                             // Deactivate transreceiver
 26c:	2b 98       	cbi	0x05, 3	; 5
        RX_POWERUP;                             // Power up in receiving mode
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	6b e4       	ldi	r22, 0x4B	; 75
 272:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 276:	2b 9a       	sbi	0x05, 3	; 5
        PTX = 0;                                // Set to receiving mode
 278:	10 92 10 01 	sts	0x0110, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	60 e3       	ldi	r22, 0x30	; 48
 280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>
    }
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 2ae:	81 e1       	ldi	r24, 0x11	; 17
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 2b6:	10 92 10 01 	sts	0x0110, r1
    RX_POWERUP;     // Power up in receiving mode
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	6b e4       	ldi	r22, 0x4B	; 75
 2be:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 2c2:	2b 9a       	sbi	0x05, 3	; 5
}
 2c4:	08 95       	ret

000002c6 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	0f 92       	push	r0
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 2d6:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
 2d8:	8f 71       	andi	r24, 0x1F	; 31
 2da:	49 83       	std	Y+1, r20	; 0x01
 2dc:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    SPI_Transceive(value,value,len);
 2e0:	c8 01       	movw	r24, r16
 2e2:	b8 01       	movw	r22, r16
 2e4:	49 81       	ldd	r20, Y+1	; 0x01
 2e6:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_Transceive>
    mirf_CSN_hi;
 2ea:	2a 9a       	sbi	0x05, 2	; 5
}
 2ec:	0f 90       	pop	r0
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	0f 92       	push	r0
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 308:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
 30a:	8f 71       	andi	r24, 0x1F	; 31
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	49 83       	std	Y+1, r20	; 0x01
 310:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    SPI_Transmit_All(value,len);
 314:	c8 01       	movw	r24, r16
 316:	49 81       	ldd	r20, Y+1	; 0x01
 318:	64 2f       	mov	r22, r20
 31a:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_Transmit_All>
    mirf_CSN_hi;
 31e:	2a 9a       	sbi	0x05, 2	; 5
}
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 32c:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	45 e0       	ldi	r20, 0x05	; 5
 332:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mirf_write_register>
}
 336:	08 95       	ret

00000338 <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 338:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 33a:	2b 98       	cbi	0x05, 3	; 5
    mirf_write_register(RX_ADDR_P0,adr,5);
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	45 e0       	ldi	r20, 0x05	; 5
 340:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mirf_write_register>
    mirf_CE_hi;
 344:	2b 9a       	sbi	0x05, 3	; 5
}
 346:	08 95       	ret

00000348 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
 352:	80 91 10 01 	lds	r24, 0x0110
 356:	88 23       	and	r24, r24
 358:	e1 f7       	brne	.-8      	; 0x352 <mirf_send+0xa>

    mirf_CE_lo;
 35a:	2b 98       	cbi	0x05, 3	; 5

    PTX = 1;                        // Set to transmitter mode
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 10 01 	sts	0x0110, r24
    TX_POWERUP;                     // Power up
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	6a e4       	ldi	r22, 0x4A	; 74
 366:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mirf_config_register>
    
    mirf_CSN_lo;                    // Pull down chip select
 36a:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
 372:	2a 9a       	sbi	0x05, 2	; 5
    mirf_CSN_lo;                    // Pull down chip select
 374:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
 376:	80 ea       	ldi	r24, 0xA0	; 160
 378:	0e 94 9e 00 	call	0x13c	; 0x13c <SPI_Transmit>
    SPI_Transmit_All(value,len);   // Write payload
 37c:	ce 01       	movw	r24, r28
 37e:	61 2f       	mov	r22, r17
 380:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
 384:	2a 9a       	sbi	0x05, 2	; 5
    
    mirf_CE_hi;                     // Start transmission
 386:	2b 9a       	sbi	0x05, 3	; 5
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
