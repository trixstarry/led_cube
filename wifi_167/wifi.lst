
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  0000048c  2**0
                  ALLOC
  3 .stab         00001b30  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c48  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_4>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e8 ed       	ldi	r30, 0xD8	; 216
  64:	f3 e0       	ldi	r31, 0x03	; 3
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a0 32       	cpi	r26, 0x20	; 32
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e2       	ldi	r26, 0x20	; 32
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 32       	cpi	r26, 0x21	; 33
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 99 00 	call	0x132	; 0x132 <main>
  86:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Transmit>:
#include "mirf.h"
#include "nRF24L01.h"
#include "spi.h"

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
  8e:	0e 94 2a 01 	call	0x254	; 0x254 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <Transmit+0x8>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <Transmit+0xe>
  9c:	00 00       	nop
		_delay_ms(10);
}
  9e:	08 95       	ret

000000a0 <Receive>:


void Receive(uint8_t *buffer,uint8_t buffersize){
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
  a8:	16 2f       	mov	r17, r22
		while (!mirf_data_ready());
  aa:	0e 94 96 01 	call	0x32c	; 0x32c <mirf_data_ready>
  ae:	88 23       	and	r24, r24
  b0:	e1 f3       	breq	.-8      	; 0xaa <Receive+0xa>
		mirf_get_data(buffer);
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 82 01 	call	0x304	; 0x304 <mirf_get_data>
        SPI_Transmit_All(buffer,buffersize);
  b8:	ce 01       	movw	r24, r28
  ba:	61 2f       	mov	r22, r17
  bc:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_Transmit_All>
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	1f 91       	pop	r17
  c6:	08 95       	ret

000000c8 <test_Transmit>:

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
  c8:	e6 2f       	mov	r30, r22
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	20 81       	ld	r18, Z
  d4:	32 2f       	mov	r19, r18
  d6:	3f 5f       	subi	r19, 0xFF	; 255
  d8:	30 83       	st	Z, r19
    if (buffer[len-1] < ' ' || buffer[len-1] > 'z')
  da:	2f 51       	subi	r18, 0x1F	; 31
  dc:	2b 35       	cpi	r18, 0x5B	; 91
  de:	10 f0       	brcs	.+4      	; 0xe4 <test_Transmit+0x1c>
    {
        buffer[len-1] = ' ';
  e0:	20 e2       	ldi	r18, 0x20	; 32
  e2:	20 83       	st	Z, r18
    }
    Transmit(buffer,len);
  e4:	0e 94 47 00 	call	0x8e	; 0x8e <Transmit>
}
  e8:	08 95       	ret

000000ea <test_protocol>:
void test_protocol(uint8_t *buffer, uint8_t len){
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
  f2:	16 2f       	mov	r17, r22
    Receive(buffer,len);
  f4:	0e 94 50 00 	call	0xa0	; 0xa0 <Receive>
    Transmit(buffer,len);
  f8:	ce 01       	movw	r24, r28
  fa:	61 2f       	mov	r22, r17
  fc:	0e 94 47 00 	call	0x8e	; 0x8e <Transmit>
    TEST_PASSED;
 100:	28 9a       	sbi	0x05, 0	; 5
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	08 95       	ret

0000010a <init>:

void init(){
	// Initialize AVR for use with mirf
	mirf_init();
 10a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <mirf_init>
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	98 e3       	ldi	r25, 0x38	; 56
 112:	a1 e0       	ldi	r26, 0x01	; 1
 114:	81 50       	subi	r24, 0x01	; 1
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	a0 40       	sbci	r26, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <init+0xa>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <init+0x14>
 11e:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
}
 120:	08 95       	ret

00000122 <init2>:
void init2(uint8_t *buffer){
 122:	bc 01       	movw	r22, r24
	mirf_read_register (STATUS, buffer, 1);
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	0e 94 6f 01 	call	0x2de	; 0x2de <mirf_read_register>
	
	// Configure mirf
	mirf_config();
 12c:	0e 94 1a 01 	call	0x234	; 0x234 <mirf_config>
	// Test transmitting
}
 130:	08 95       	ret

00000132 <main>:

int main (void)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	a0 97       	sbiw	r28, 0x20	; 32
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
    init();
 14a:	0e 94 85 00 	call	0x10a	; 0x10a <init>
    //char buffer [16] = {'.','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}'};
    char buffer [32] = {'.','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}',
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	d8 01       	movw	r26, r16
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	81 50       	subi	r24, 0x01	; 1
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x2a>
        'l','a','u','g','h',' ','i','t',' ','u','p',' ','R','u','t','h',};
	sei();
 164:	78 94       	sei
	buffer[0] = 'h';
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	89 83       	std	Y+1, r24	; 0x01
    init2(buffer);
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 91 00 	call	0x122	; 0x122 <init2>
	
	while (1)
	{
        //test_Transmit(buffer, BUFFER_SIZE);
        test_protocol(buffer,BUFFER_SIZE);
 170:	c8 01       	movw	r24, r16
 172:	60 e2       	ldi	r22, 0x20	; 32
 174:	0e 94 75 00 	call	0xea	; 0xea <test_protocol>
 178:	fb cf       	rjmp	.-10     	; 0x170 <main+0x3e>

0000017a <spi_init>:
 17a:	81 b1       	in	r24, 0x01	; 1
 17c:	80 67       	ori	r24, 0x70	; 112
 17e:	81 b9       	out	0x01, r24	; 1
 180:	8c b5       	in	r24, 0x2c	; 44
 182:	81 65       	ori	r24, 0x51	; 81
 184:	8c bd       	out	0x2c, r24	; 44
 186:	8d b5       	in	r24, 0x2d	; 45
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8d bd       	out	0x2d, r24	; 45
 18c:	08 95       	ret

0000018e <SPI_Transmit>:
 18e:	8e bd       	out	0x2e, r24	; 46
 190:	0d b4       	in	r0, 0x2d	; 45
 192:	07 fe       	sbrs	r0, 7
 194:	fd cf       	rjmp	.-6      	; 0x190 <SPI_Transmit+0x2>
 196:	8e b5       	in	r24, 0x2e	; 46
 198:	08 95       	ret

0000019a <SPI_Transmit_All>:
 19a:	48 2f       	mov	r20, r24
 19c:	66 23       	and	r22, r22
 19e:	69 f0       	breq	.+26     	; 0x1ba <SPI_Transmit_All+0x20>
 1a0:	9c 01       	movw	r18, r24
 1a2:	f9 01       	movw	r30, r18
 1a4:	80 81       	ld	r24, Z
 1a6:	8e bd       	out	0x2e, r24	; 46
 1a8:	0d b4       	in	r0, 0x2d	; 45
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <SPI_Transmit_All+0xe>
 1ae:	8e b5       	in	r24, 0x2e	; 46
 1b0:	31 96       	adiw	r30, 0x01	; 1
 1b2:	8e 2f       	mov	r24, r30
 1b4:	84 1b       	sub	r24, r20
 1b6:	86 17       	cp	r24, r22
 1b8:	a8 f3       	brcs	.-22     	; 0x1a4 <SPI_Transmit_All+0xa>
 1ba:	08 95       	ret

000001bc <SPI_Receive>:
 1bc:	1e bc       	out	0x2e, r1	; 46
 1be:	0d b4       	in	r0, 0x2d	; 45
 1c0:	07 fe       	sbrs	r0, 7
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <SPI_Receive+0x2>
 1c4:	8e b5       	in	r24, 0x2e	; 46
 1c6:	08 95       	ret

000001c8 <SPI_Receive_All>:
 1c8:	ac 01       	movw	r20, r24
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	1e bc       	out	0x2e, r1	; 46
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <SPI_Receive_All+0x8>
 1d6:	8e b5       	in	r24, 0x2e	; 46
 1d8:	fa 01       	movw	r30, r20
 1da:	e2 0f       	add	r30, r18
 1dc:	f3 1f       	adc	r31, r19
 1de:	80 83       	st	Z, r24
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	20 32       	cpi	r18, 0x20	; 32
 1e6:	31 05       	cpc	r19, r1
 1e8:	91 f7       	brne	.-28     	; 0x1ce <SPI_Receive_All+0x6>
 1ea:	08 95       	ret

000001ec <SPI_Transceive>:
 1ec:	dc 01       	movw	r26, r24
 1ee:	44 23       	and	r20, r20
 1f0:	99 f0       	breq	.+38     	; 0x218 <SPI_Transceive+0x2c>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	fd 01       	movw	r30, r26
 1f8:	e2 0f       	add	r30, r18
 1fa:	f3 1f       	adc	r31, r19
 1fc:	80 81       	ld	r24, Z
 1fe:	8e bd       	out	0x2e, r24	; 46
 200:	0d b4       	in	r0, 0x2d	; 45
 202:	07 fe       	sbrs	r0, 7
 204:	fd cf       	rjmp	.-6      	; 0x200 <SPI_Transceive+0x14>
 206:	8e b5       	in	r24, 0x2e	; 46
 208:	fb 01       	movw	r30, r22
 20a:	e2 0f       	add	r30, r18
 20c:	f3 1f       	adc	r31, r19
 20e:	80 83       	st	Z, r24
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	24 17       	cp	r18, r20
 216:	78 f3       	brcs	.-34     	; 0x1f6 <SPI_Transceive+0xa>
 218:	08 95       	ret

0000021a <mirf_config_register>:
 21a:	1f 93       	push	r17
 21c:	16 2f       	mov	r17, r22
 21e:	2a 98       	cbi	0x05, 2	; 5
 220:	8f 71       	andi	r24, 0x1F	; 31
 222:	80 62       	ori	r24, 0x20	; 32
 224:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 228:	81 2f       	mov	r24, r17
 22a:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 22e:	2a 9a       	sbi	0x05, 2	; 5
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <mirf_config>:
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 23c:	81 e1       	ldi	r24, 0x11	; 17
 23e:	60 e1       	ldi	r22, 0x10	; 16
 240:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 244:	10 92 20 01 	sts	0x0120, r1
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	6b e4       	ldi	r22, 0x4B	; 75
 24c:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 250:	2b 9a       	sbi	0x05, 3	; 5
 252:	08 95       	ret

00000254 <mirf_send>:
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
 25c:	16 2f       	mov	r17, r22
 25e:	80 91 20 01 	lds	r24, 0x0120
 262:	88 23       	and	r24, r24
 264:	e1 f7       	brne	.-8      	; 0x25e <mirf_send+0xa>
 266:	2b 98       	cbi	0x05, 3	; 5
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 20 01 	sts	0x0120, r24
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	6a e4       	ldi	r22, 0x4A	; 74
 272:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 276:	2a 98       	cbi	0x05, 2	; 5
 278:	81 ee       	ldi	r24, 0xE1	; 225
 27a:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 27e:	2a 9a       	sbi	0x05, 2	; 5
 280:	2a 98       	cbi	0x05, 2	; 5
 282:	80 ea       	ldi	r24, 0xA0	; 160
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 288:	ce 01       	movw	r24, r28
 28a:	61 2f       	mov	r22, r17
 28c:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_Transmit_All>
 290:	2a 9a       	sbi	0x05, 2	; 5
 292:	2b 9a       	sbi	0x05, 3	; 5
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <mirf_write_register>:
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	8b 01       	movw	r16, r22
 2a4:	f4 2e       	mov	r15, r20
 2a6:	2a 98       	cbi	0x05, 2	; 5
 2a8:	8f 71       	andi	r24, 0x1F	; 31
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 2b0:	c8 01       	movw	r24, r16
 2b2:	6f 2d       	mov	r22, r15
 2b4:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_Transmit_All>
 2b8:	2a 9a       	sbi	0x05, 2	; 5
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	08 95       	ret

000002c2 <mirf_set_TADDR>:
 2c2:	bc 01       	movw	r22, r24
 2c4:	80 e1       	ldi	r24, 0x10	; 16
 2c6:	45 e0       	ldi	r20, 0x05	; 5
 2c8:	0e 94 4e 01 	call	0x29c	; 0x29c <mirf_write_register>
 2cc:	08 95       	ret

000002ce <mirf_set_RADDR>:
 2ce:	bc 01       	movw	r22, r24
 2d0:	2b 98       	cbi	0x05, 3	; 5
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	45 e0       	ldi	r20, 0x05	; 5
 2d6:	0e 94 4e 01 	call	0x29c	; 0x29c <mirf_write_register>
 2da:	2b 9a       	sbi	0x05, 3	; 5
 2dc:	08 95       	ret

000002de <mirf_read_register>:
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	8b 01       	movw	r16, r22
 2e6:	f4 2e       	mov	r15, r20
 2e8:	2a 98       	cbi	0x05, 2	; 5
 2ea:	8f 71       	andi	r24, 0x1F	; 31
 2ec:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 2f0:	c8 01       	movw	r24, r16
 2f2:	b8 01       	movw	r22, r16
 2f4:	4f 2d       	mov	r20, r15
 2f6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Transceive>
 2fa:	2a 9a       	sbi	0x05, 2	; 5
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	08 95       	ret

00000304 <mirf_get_data>:
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	8c 01       	movw	r16, r24
 30a:	2a 98       	cbi	0x05, 2	; 5
 30c:	81 e6       	ldi	r24, 0x61	; 97
 30e:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Transmit>
 312:	c8 01       	movw	r24, r16
 314:	b8 01       	movw	r22, r16
 316:	40 e1       	ldi	r20, 0x10	; 16
 318:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SPI_Transceive>
 31c:	2a 9a       	sbi	0x05, 2	; 5
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	60 e4       	ldi	r22, 0x40	; 64
 322:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <mirf_data_ready>:
 32c:	80 91 20 01 	lds	r24, 0x0120
 330:	88 23       	and	r24, r24
 332:	11 f0       	breq	.+4      	; 0x338 <mirf_data_ready+0xc>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
 338:	2a 98       	cbi	0x05, 2	; 5
 33a:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_Receive>
 33e:	2a 9a       	sbi	0x05, 2	; 5
 340:	80 74       	andi	r24, 0x40	; 64
 342:	08 95       	ret

00000344 <__vector_4>:
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
 366:	80 91 20 01 	lds	r24, 0x0120
 36a:	88 23       	and	r24, r24
 36c:	81 f0       	breq	.+32     	; 0x38e <__vector_4+0x4a>
 36e:	2a 98       	cbi	0x05, 2	; 5
 370:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_Receive>
 374:	2a 9a       	sbi	0x05, 2	; 5
 376:	2b 98       	cbi	0x05, 3	; 5
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	6b e4       	ldi	r22, 0x4B	; 75
 37c:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 380:	2b 9a       	sbi	0x05, 3	; 5
 382:	10 92 20 01 	sts	0x0120, r1
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	60 e3       	ldi	r22, 0x30	; 48
 38a:	0e 94 0d 01 	call	0x21a	; 0x21a <mirf_config_register>
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <mirf_init>:
 3b0:	84 b1       	in	r24, 0x04	; 4
 3b2:	8c 60       	ori	r24, 0x0C	; 12
 3b4:	84 b9       	out	0x04, r24	; 4
 3b6:	2b 98       	cbi	0x05, 3	; 5
 3b8:	2a 9a       	sbi	0x05, 2	; 5
 3ba:	e8 e6       	ldi	r30, 0x68	; 104
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	80 83       	st	Z, r24
 3c4:	ec e6       	ldi	r30, 0x6C	; 108
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 61       	ori	r24, 0x10	; 16
 3cc:	80 83       	st	Z, r24
 3ce:	0e 94 bd 00 	call	0x17a	; 0x17a <spi_init>
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
