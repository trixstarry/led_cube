
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  00000616  2**0
                  ALLOC
  3 .stab         00001e78  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c99  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 28 00 	jmp	0x50	; 0x50 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_4>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	ce ef       	ldi	r28, 0xFE	; 254
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e2 e6       	ldi	r30, 0x62	; 98
  64:	f5 e0       	ldi	r31, 0x05	; 5
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a0 32       	cpi	r26, 0x20	; 32
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e2       	ldi	r26, 0x20	; 32
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 32       	cpi	r26, 0x21	; 33
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 02 01 	call	0x204	; 0x204 <main>
  86:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <Transmit>:
#include "mirf.h"
#include "nRF24L01.h"
#include "spi.h"

void Transmit(uint8_t *buffer, uint8_t buffersize){
    	mirf_send(buffer,buffersize);
  8e:	0e 94 8b 02 	call	0x516	; 0x516 <mirf_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <Transmit+0x8>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <Transmit+0xe>
  9c:	00 00       	nop
		_delay_ms(10);
}
  9e:	08 95       	ret

000000a0 <Receive>:


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
        uint64_t i = 0;
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	bb 24       	eor	r11, r11
  bc:	cc 24       	eor	r12, r12
  be:	dd 24       	eor	r13, r13
  c0:	ee 24       	eor	r14, r14
  c2:	ff 24       	eor	r15, r15
  c4:	aa 24       	eor	r10, r10
		while (!mirf_data_ready()){
  c6:	2f c0       	rjmp	.+94     	; 0x126 <Receive+0x86>
            if(i > 0x1FFFF){
  c8:	11 23       	and	r17, r17
  ca:	09 f4       	brne	.+2      	; 0xce <Receive+0x2e>
  cc:	3f c0       	rjmp	.+126    	; 0x14c <Receive+0xac>
                //LED1_ON;
                return -1;
            }
            //led1_on();
            i++;
  ce:	61 2f       	mov	r22, r17
  d0:	6f 5f       	subi	r22, 0xFF	; 255
  d2:	51 e0       	ldi	r21, 0x01	; 1
  d4:	61 17       	cp	r22, r17
  d6:	08 f0       	brcs	.+2      	; 0xda <Receive+0x3a>
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	50 0f       	add	r21, r16
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	50 17       	cp	r21, r16
  e0:	08 f0       	brcs	.+2      	; 0xe4 <Receive+0x44>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	4b 0d       	add	r20, r11
  e6:	31 e0       	ldi	r19, 0x01	; 1
  e8:	4b 15       	cp	r20, r11
  ea:	08 f0       	brcs	.+2      	; 0xee <Receive+0x4e>
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3c 0d       	add	r19, r12
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	3c 15       	cp	r19, r12
  f4:	08 f0       	brcs	.+2      	; 0xf8 <Receive+0x58>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	2d 0d       	add	r18, r13
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	2d 15       	cp	r18, r13
  fe:	08 f0       	brcs	.+2      	; 0x102 <Receive+0x62>
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9e 0d       	add	r25, r14
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	9e 15       	cp	r25, r14
 108:	08 f0       	brcs	.+2      	; 0x10c <Receive+0x6c>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	8f 0d       	add	r24, r15
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	8f 15       	cp	r24, r15
 112:	08 f0       	brcs	.+2      	; 0x116 <Receive+0x76>
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	16 2f       	mov	r17, r22
 118:	05 2f       	mov	r16, r21
 11a:	b4 2e       	mov	r11, r20
 11c:	c3 2e       	mov	r12, r19
 11e:	d2 2e       	mov	r13, r18
 120:	e9 2e       	mov	r14, r25
 122:	f8 2e       	mov	r15, r24
 124:	a7 0e       	add	r10, r23
}


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
        uint64_t i = 0;
		while (!mirf_data_ready()){
 126:	0e 94 b9 01 	call	0x372	; 0x372 <mirf_data_ready>
 12a:	88 23       	and	r24, r24
 12c:	69 f2       	breq	.-102    	; 0xc8 <Receive+0x28>
                return -1;
            }
            //led1_on();
            i++;
        }
		mirf_get_data(buffer);
 12e:	ce 01       	movw	r24, r28
 130:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <mirf_get_data>
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	bf 90       	pop	r11
 148:	af 90       	pop	r10
 14a:	08 95       	ret


int8_t Receive(uint8_t *buffer,uint8_t buffersize){
        uint64_t i = 0;
		while (!mirf_data_ready()){
            if(i > 0x1FFFF){
 14c:	00 23       	and	r16, r16
 14e:	09 f0       	breq	.+2      	; 0x152 <Receive+0xb2>
 150:	be cf       	rjmp	.-132    	; 0xce <Receive+0x2e>
 152:	8b 2d       	mov	r24, r11
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	09 f0       	breq	.+2      	; 0x15a <Receive+0xba>
 158:	ba cf       	rjmp	.-140    	; 0xce <Receive+0x2e>
 15a:	cc 20       	and	r12, r12
 15c:	09 f0       	breq	.+2      	; 0x160 <Receive+0xc0>
 15e:	b7 cf       	rjmp	.-146    	; 0xce <Receive+0x2e>
 160:	dd 20       	and	r13, r13
 162:	09 f0       	breq	.+2      	; 0x166 <Receive+0xc6>
 164:	b4 cf       	rjmp	.-152    	; 0xce <Receive+0x2e>
 166:	ee 20       	and	r14, r14
 168:	09 f0       	breq	.+2      	; 0x16c <Receive+0xcc>
 16a:	b1 cf       	rjmp	.-158    	; 0xce <Receive+0x2e>
 16c:	ff 20       	and	r15, r15
 16e:	09 f0       	breq	.+2      	; 0x172 <Receive+0xd2>
 170:	ae cf       	rjmp	.-164    	; 0xce <Receive+0x2e>
 172:	aa 20       	and	r10, r10
 174:	09 f0       	breq	.+2      	; 0x178 <Receive+0xd8>
 176:	ab cf       	rjmp	.-170    	; 0xce <Receive+0x2e>
                //LED1_ON;
                return -1;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	dd cf       	rjmp	.-70     	; 0x136 <Receive+0x96>

0000017c <test_Transmit>:
        //SPI_Transmit_All(buffer,buffersize);
        return 1;
}

void test_Transmit(uint8_t *buffer, uint8_t len){
    buffer[len-1]++;
 17c:	e6 2f       	mov	r30, r22
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	e8 0f       	add	r30, r24
 184:	f9 1f       	adc	r31, r25
 186:	20 81       	ld	r18, Z
 188:	32 2f       	mov	r19, r18
 18a:	3f 5f       	subi	r19, 0xFF	; 255
 18c:	30 83       	st	Z, r19
    if (buffer[len-1] < ' ' || buffer[len-1] > 'z')
 18e:	2f 51       	subi	r18, 0x1F	; 31
 190:	2b 35       	cpi	r18, 0x5B	; 91
 192:	10 f0       	brcs	.+4      	; 0x198 <test_Transmit+0x1c>
    {
        buffer[len-1] = ' ';
 194:	20 e2       	ldi	r18, 0x20	; 32
 196:	20 83       	st	Z, r18
    }
    Transmit(buffer,len);
 198:	0e 94 47 00 	call	0x8e	; 0x8e <Transmit>
}
 19c:	08 95       	ret

0000019e <test_protocol>:
void test_protocol(uint8_t *buffer, uint8_t len){
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	16 2f       	mov	r17, r22
    if(Receive(buffer,len) == 1){
 1a8:	0e 94 50 00 	call	0xa0	; 0xa0 <Receive>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	29 f0       	breq	.+10     	; 0x1ba <test_protocol+0x1c>
        Transmit(buffer,len);
    }
    //Transmit(buffer,len);
    else{
      LED1_ON;
 1b0:	28 9a       	sbi	0x05, 0	; 5
    }
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	08 95       	ret
    }
    Transmit(buffer,len);
}
void test_protocol(uint8_t *buffer, uint8_t len){
    if(Receive(buffer,len) == 1){
        Transmit(buffer,len);
 1ba:	ce 01       	movw	r24, r28
 1bc:	61 2f       	mov	r22, r17
 1be:	0e 94 47 00 	call	0x8e	; 0x8e <Transmit>
 1c2:	f7 cf       	rjmp	.-18     	; 0x1b2 <test_protocol+0x14>

000001c4 <init>:
      LED1_ON;
    }
}

void init(){
    DDRA |= (1<<PB0)|(1<<PB1);
 1c4:	81 b1       	in	r24, 0x01	; 1
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	81 b9       	out	0x01, r24	; 1
    //PORTB |= (1<<PB0)|(1<<PB1);
	// Initialize AVR for use with mirf
	mirf_init();
 1ca:	0e 94 a7 01 	call	0x34e	; 0x34e <mirf_init>
 1ce:	8f e7       	ldi	r24, 0x7F	; 127
 1d0:	98 e3       	ldi	r25, 0x38	; 56
 1d2:	a1 e0       	ldi	r26, 0x01	; 1
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	a0 40       	sbci	r26, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <init+0x10>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <init+0x1a>
 1de:	00 00       	nop
	// Wait for mirf to come up
	_delay_ms(50);
	// Activate interrupts
    //PORTB |= (1<<PB0)|(1<<PB1);
}
 1e0:	08 95       	ret

000001e2 <init2>:
void init2(uint8_t *buffer){
 1e2:	bc 01       	movw	r22, r24
	mirf_read_register (STATUS, buffer, 1);
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	0e 94 4a 02 	call	0x494	; 0x494 <mirf_read_register>
	
	// Configure mirf
	mirf_config();
 1ec:	0e 94 3a 02 	call	0x474	; 0x474 <mirf_config>
	// Test transmitting
    PORTA |= (0<<PA0)|(1<<PA1);
 1f0:	11 9a       	sbi	0x02, 1	; 2
}
 1f2:	08 95       	ret

000001f4 <led1_on>:


void led1_on(){
    PORTA |= (1<<PA0);
 1f4:	10 9a       	sbi	0x02, 0	; 2
}
 1f6:	08 95       	ret

000001f8 <led1_off>:
void led1_off(){
    PORTA &= ~(1<<PA0);
 1f8:	10 98       	cbi	0x02, 0	; 2
}
 1fa:	08 95       	ret

000001fc <led2_on>:
void led2_on(){
    PORTA |= (1<<PA1);
 1fc:	11 9a       	sbi	0x02, 1	; 2
}
 1fe:	08 95       	ret

00000200 <led2_off>:
void led2_off(){
    PORTA &= ~(1<<PA1);
 200:	11 98       	cbi	0x02, 1	; 2
}
 202:	08 95       	ret

00000204 <main>:

int main (void)
{
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a0 97       	sbiw	r28, 0x20	; 32
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
    init();
 21c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <init>
    //LED1_ON;
    //LED2_ON;
    //char buffer [16] = {'.','e','l','l','o',' ','n','o','o','d','l','e','!','.','.','}'};
    char buffer [32] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p',
 220:	8e 01       	movw	r16, r28
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	d8 01       	movw	r26, r16
 228:	e0 e0       	ldi	r30, 0x00	; 0
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	81 50       	subi	r24, 0x01	; 1
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x2a>
        'q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F',};
	sei();
 236:	78 94       	sei
    init2(buffer);
 238:	c8 01       	movw	r24, r16
 23a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <init2>
    buffer[0] = 'h';
 23e:	88 e6       	ldi	r24, 0x68	; 104
 240:	89 83       	std	Y+1, r24	; 0x01

void led1_on(){
    PORTA |= (1<<PA0);
}
void led1_off(){
    PORTA &= ~(1<<PA0);
 242:	10 98       	cbi	0x02, 0	; 2
}
void led2_on(){
    PORTA |= (1<<PA1);
}
void led2_off(){
    PORTA &= ~(1<<PA1);
 244:	11 98       	cbi	0x02, 1	; 2
        //test_protocol(buffer,BUFFER_SIZE);
        //_delay_ms(500);
        //LED1_OFF;
        */
     //   test_Transmit(buffer,BUFFER_SIZE);
        if(Receive(buffer,BUFFER_SIZE) == 1){
 246:	c8 01       	movw	r24, r16
 248:	60 e2       	ldi	r22, 0x20	; 32
 24a:	0e 94 50 00 	call	0xa0	; 0xa0 <Receive>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	91 f0       	breq	.+36     	; 0x276 <main+0x72>
}
void led1_off(){
    PORTA &= ~(1<<PA0);
}
void led2_on(){
    PORTA |= (1<<PA1);
 252:	11 9a       	sbi	0x02, 1	; 2
 254:	8f e7       	ldi	r24, 0x7F	; 127
 256:	98 e3       	ldi	r25, 0x38	; 56
 258:	a1 e0       	ldi	r26, 0x01	; 1
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	a0 40       	sbci	r26, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x56>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x60>
 264:	00 00       	nop

void led1_on(){
    PORTA |= (1<<PA0);
}
void led1_off(){
    PORTA &= ~(1<<PA0);
 266:	10 98       	cbi	0x02, 0	; 2
}
void led2_on(){
    PORTA |= (1<<PA1);
}
void led2_off(){
    PORTA &= ~(1<<PA1);
 268:	11 98       	cbi	0x02, 1	; 2
        //test_protocol(buffer,BUFFER_SIZE);
        //_delay_ms(500);
        //LED1_OFF;
        */
     //   test_Transmit(buffer,BUFFER_SIZE);
        if(Receive(buffer,BUFFER_SIZE) == 1){
 26a:	c8 01       	movw	r24, r16
 26c:	60 e2       	ldi	r22, 0x20	; 32
 26e:	0e 94 50 00 	call	0xa0	; 0xa0 <Receive>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	71 f7       	brne	.-36     	; 0x252 <main+0x4e>
            if(buffer[3] == 'l'){
 276:	8c 81       	ldd	r24, Y+4	; 0x04
 278:	8c 36       	cpi	r24, 0x6C	; 108
 27a:	11 f0       	breq	.+4      	; 0x280 <main+0x7c>
}
void led1_off(){
    PORTA &= ~(1<<PA0);
}
void led2_on(){
    PORTA |= (1<<PA1);
 27c:	11 9a       	sbi	0x02, 1	; 2
 27e:	e3 cf       	rjmp	.-58     	; 0x246 <main+0x42>
    PORTA |= (0<<PA0)|(1<<PA1);
}


void led1_on(){
    PORTA |= (1<<PA0);
 280:	10 9a       	sbi	0x02, 0	; 2
 282:	8f e7       	ldi	r24, 0x7F	; 127
 284:	98 e3       	ldi	r25, 0x38	; 56
 286:	a1 e0       	ldi	r26, 0x01	; 1
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	a0 40       	sbci	r26, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x84>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x8e>
 292:	00 00       	nop
     //   test_Transmit(buffer,BUFFER_SIZE);
        if(Receive(buffer,BUFFER_SIZE) == 1){
            if(buffer[3] == 'l'){
                led1_on();
                _delay_ms(50);
                Transmit(buffer,BUFFER_SIZE);
 294:	c8 01       	movw	r24, r16
 296:	60 e2       	ldi	r22, 0x20	; 32
 298:	0e 94 47 00 	call	0x8e	; 0x8e <Transmit>
                rx_powerup();
 29c:	0e 94 ed 01 	call	0x3da	; 0x3da <rx_powerup>
 2a0:	af ec       	ldi	r26, 0xCF	; 207
 2a2:	b7 e0       	ldi	r27, 0x07	; 7
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0xa0>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0xa6>
 2aa:	00 00       	nop
 2ac:	cc cf       	rjmp	.-104    	; 0x246 <main+0x42>

000002ae <spi_init>:
 2ae:	81 b1       	in	r24, 0x01	; 1
 2b0:	80 67       	ori	r24, 0x70	; 112
 2b2:	81 b9       	out	0x01, r24	; 1
 2b4:	8c b5       	in	r24, 0x2c	; 44
 2b6:	81 65       	ori	r24, 0x51	; 81
 2b8:	8c bd       	out	0x2c, r24	; 44
 2ba:	8d b5       	in	r24, 0x2d	; 45
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	8d bd       	out	0x2d, r24	; 45
 2c0:	08 95       	ret

000002c2 <SPI_Transmit>:
 2c2:	8e bd       	out	0x2e, r24	; 46
 2c4:	0d b4       	in	r0, 0x2d	; 45
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <SPI_Transmit+0x2>
 2ca:	8e b5       	in	r24, 0x2e	; 46
 2cc:	08 95       	ret

000002ce <SPI_Transmit_All>:
 2ce:	48 2f       	mov	r20, r24
 2d0:	66 23       	and	r22, r22
 2d2:	69 f0       	breq	.+26     	; 0x2ee <SPI_Transmit_All+0x20>
 2d4:	9c 01       	movw	r18, r24
 2d6:	f9 01       	movw	r30, r18
 2d8:	80 81       	ld	r24, Z
 2da:	8e bd       	out	0x2e, r24	; 46
 2dc:	0d b4       	in	r0, 0x2d	; 45
 2de:	07 fe       	sbrs	r0, 7
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <SPI_Transmit_All+0xe>
 2e2:	8e b5       	in	r24, 0x2e	; 46
 2e4:	31 96       	adiw	r30, 0x01	; 1
 2e6:	8e 2f       	mov	r24, r30
 2e8:	84 1b       	sub	r24, r20
 2ea:	86 17       	cp	r24, r22
 2ec:	a8 f3       	brcs	.-22     	; 0x2d8 <SPI_Transmit_All+0xa>
 2ee:	08 95       	ret

000002f0 <SPI_Receive>:
 2f0:	1e bc       	out	0x2e, r1	; 46
 2f2:	0d b4       	in	r0, 0x2d	; 45
 2f4:	07 fe       	sbrs	r0, 7
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <SPI_Receive+0x2>
 2f8:	8e b5       	in	r24, 0x2e	; 46
 2fa:	08 95       	ret

000002fc <SPI_Receive_All>:
 2fc:	ac 01       	movw	r20, r24
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	1e bc       	out	0x2e, r1	; 46
 304:	0d b4       	in	r0, 0x2d	; 45
 306:	07 fe       	sbrs	r0, 7
 308:	fd cf       	rjmp	.-6      	; 0x304 <__stack+0x6>
 30a:	8e b5       	in	r24, 0x2e	; 46
 30c:	fa 01       	movw	r30, r20
 30e:	e2 0f       	add	r30, r18
 310:	f3 1f       	adc	r31, r19
 312:	80 83       	st	Z, r24
 314:	2f 5f       	subi	r18, 0xFF	; 255
 316:	3f 4f       	sbci	r19, 0xFF	; 255
 318:	20 32       	cpi	r18, 0x20	; 32
 31a:	31 05       	cpc	r19, r1
 31c:	91 f7       	brne	.-28     	; 0x302 <__stack+0x4>
 31e:	08 95       	ret

00000320 <SPI_Transceive>:
 320:	dc 01       	movw	r26, r24
 322:	44 23       	and	r20, r20
 324:	99 f0       	breq	.+38     	; 0x34c <SPI_Transceive+0x2c>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	fd 01       	movw	r30, r26
 32c:	e2 0f       	add	r30, r18
 32e:	f3 1f       	adc	r31, r19
 330:	80 81       	ld	r24, Z
 332:	8e bd       	out	0x2e, r24	; 46
 334:	0d b4       	in	r0, 0x2d	; 45
 336:	07 fe       	sbrs	r0, 7
 338:	fd cf       	rjmp	.-6      	; 0x334 <SPI_Transceive+0x14>
 33a:	8e b5       	in	r24, 0x2e	; 46
 33c:	fb 01       	movw	r30, r22
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	80 83       	st	Z, r24
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	24 17       	cp	r18, r20
 34a:	78 f3       	brcs	.-34     	; 0x32a <SPI_Transceive+0xa>
 34c:	08 95       	ret

0000034e <mirf_init>:
void mirf_init() 
// Initializes pins ans interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= ((1<<CSN)|(1<<CE));
 34e:	84 b1       	in	r24, 0x04	; 4
 350:	8c 60       	ori	r24, 0x0C	; 12
 352:	84 b9       	out	0x04, r24	; 4
    mirf_CE_lo;
 354:	2b 98       	cbi	0x05, 3	; 5
    mirf_CSN_hi;
 356:	2a 9a       	sbi	0x05, 2	; 5
// Initialize PCINT4 for ATtiny2313
//	GIMSK |= (1<<PCIE);
//	PCMSK |= (1<<PCINT4);

// Initialize PCINT12 for ATtiny167
    PCICR |= (1<<PCIE1);
 358:	e8 e6       	ldi	r30, 0x68	; 104
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT12);
 362:	ec e6       	ldi	r30, 0x6C	; 108
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	80 61       	ori	r24, 0x10	; 16
 36a:	80 83       	st	Z, r24

    // Initialize spi module
    spi_init();
 36c:	0e 94 57 01 	call	0x2ae	; 0x2ae <spi_init>
}
 370:	08 95       	ret

00000372 <mirf_data_ready>:
    }
}
extern uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
 372:	80 91 20 01 	lds	r24, 0x0120
 376:	88 23       	and	r24, r24
 378:	11 f0       	breq	.+4      	; 0x37e <mirf_data_ready+0xc>
 37a:	80 e0       	ldi	r24, 0x00	; 0
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    status = SPI_Receive();               // Read status register
    mirf_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
 37c:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
 37e:	2a 98       	cbi	0x05, 2	; 5
    status = SPI_Receive();               // Read status register
 380:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_Receive>
    mirf_CSN_hi;                                // Pull up chip select
 384:	2a 9a       	sbi	0x05, 2	; 5
    return status & (1<<RX_DR);
 386:	80 74       	andi	r24, 0x40	; 64
 388:	08 95       	ret

0000038a <mirf_config_register>:
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 38a:	df 93       	push	r29
 38c:	cf 93       	push	r28
 38e:	0f 92       	push	r0
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
    mirf_CSN_lo;
 394:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
 396:	8f 71       	andi	r24, 0x1F	; 31
 398:	80 62       	ori	r24, 0x20	; 32
 39a:	69 83       	std	Y+1, r22	; 0x01
 39c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    SPI_Transmit(value);
 3a0:	69 81       	ldd	r22, Y+1	; 0x01
 3a2:	86 2f       	mov	r24, r22
 3a4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    mirf_CSN_hi;
 3a8:	2a 9a       	sbi	0x05, 2	; 5
}
 3aa:	0f 90       	pop	r0
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <mirf_get_data>:
    return status & (1<<RX_DR);
}

extern void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
    mirf_CSN_lo;                               // Pull down chip select
 3b8:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( R_RX_PAYLOAD );            // Send cmd to read rx payload
 3ba:	81 e6       	ldi	r24, 0x61	; 97
 3bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    SPI_Transceive(data,data,mirf_PAYLOAD); // Read payload
 3c0:	ce 01       	movw	r24, r28
 3c2:	be 01       	movw	r22, r28
 3c4:	40 e2       	ldi	r20, 0x20	; 32
 3c6:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Transceive>
    mirf_CSN_hi;                               // Pull up chip select
 3ca:	2a 9a       	sbi	0x05, 2	; 5
    mirf_config_register(STATUS,(1<<RX_DR));   // Reset status register
 3cc:	87 e0       	ldi	r24, 0x07	; 7
 3ce:	60 e4       	ldi	r22, 0x40	; 64
 3d0:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <rx_powerup>:
    }
}

void rx_powerup(void){
    uint8_t status;
    if (PTX) {
 3da:	80 91 20 01 	lds	r24, 0x0120
 3de:	88 23       	and	r24, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <rx_powerup+0xa>
 3e2:	08 95       	ret
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 3e4:	2a 98       	cbi	0x05, 2	; 5
        status = SPI_Transmit(0x00);               // Read status register
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
        mirf_CSN_hi;                                // Pull up chip select
 3ec:	2a 9a       	sbi	0x05, 2	; 5

        mirf_CE_lo;                             // Deactivate transreceiver
 3ee:	2b 98       	cbi	0x05, 3	; 5
        RX_POWERUP;                             // Power up in receiving mode
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	6b e4       	ldi	r22, 0x4B	; 75
 3f4:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 3f8:	2b 9a       	sbi	0x05, 3	; 5
        PTX = 0;                                // Set to receiving mode
 3fa:	10 92 20 01 	sts	0x0120, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	60 e3       	ldi	r22, 0x30	; 48
 402:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
 406:	08 95       	ret

00000408 <__vector_4>:
SIGNAL(SIG_PIN_CHANGE2) 
#endif // __AVR_ATmega168__  */

// Interrupt handler 
ISR(PCINT1_vect)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
    uint8_t status;   
    // If still in transmitting mode then finish transmission
    if (PTX) {
 42a:	80 91 20 01 	lds	r24, 0x0120
 42e:	88 23       	and	r24, r24
 430:	81 f0       	breq	.+32     	; 0x452 <__vector_4+0x4a>
    
        // Read MiRF status 
        mirf_CSN_lo;                                // Pull down chip select
 432:	2a 98       	cbi	0x05, 2	; 5
        status = SPI_Receive();               // Read status register
 434:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SPI_Receive>
        mirf_CSN_hi;                                // Pull up chip select
 438:	2a 9a       	sbi	0x05, 2	; 5

        mirf_CE_lo;                             // Deactivate transreceiver
 43a:	2b 98       	cbi	0x05, 3	; 5
        RX_POWERUP;                             // Power up in receiving mode
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	6b e4       	ldi	r22, 0x4B	; 75
 440:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
        mirf_CE_hi;                             // Listening for pakets
 444:	2b 9a       	sbi	0x05, 3	; 5
        PTX = 0;                                // Set to receiving mode
 446:	10 92 20 01 	sts	0x0120, r1

        // Reset status register for further interaction
        mirf_config_register(STATUS,(1<<TX_DS)|(1<<MAX_RT)); // Reset status register
 44a:	87 e0       	ldi	r24, 0x07	; 7
 44c:	60 e3       	ldi	r22, 0x30	; 48
 44e:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
    }
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <mirf_config>:
void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    // Set RF channel
    mirf_config_register(RF_CH,mirf_CH);
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>

    // Set length of incoming payload 
    mirf_config_register(RX_PW_P0, mirf_PAYLOAD);
 47c:	81 e1       	ldi	r24, 0x11	; 17
 47e:	60 e2       	ldi	r22, 0x20	; 32
 480:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>

    // Start receiver 
    PTX = 0;        // Start in receiving mode
 484:	10 92 20 01 	sts	0x0120, r1
    RX_POWERUP;     // Power up in receiving mode
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	6b e4       	ldi	r22, 0x4B	; 75
 48c:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
    mirf_CE_hi;     // Listening for pakets
 490:	2b 9a       	sbi	0x05, 3	; 5
}
 492:	08 95       	ret

00000494 <mirf_read_register>:
    mirf_CSN_hi;
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	0f 92       	push	r0
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 4a4:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(R_REGISTER | (REGISTER_MASK & reg));
 4a6:	8f 71       	andi	r24, 0x1F	; 31
 4a8:	49 83       	std	Y+1, r20	; 0x01
 4aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    SPI_Transceive(value,value,len);
 4ae:	c8 01       	movw	r24, r16
 4b0:	b8 01       	movw	r22, r16
 4b2:	49 81       	ldd	r20, Y+1	; 0x01
 4b4:	0e 94 90 01 	call	0x320	; 0x320 <SPI_Transceive>
    mirf_CSN_hi;
 4b8:	2a 9a       	sbi	0x05, 2	; 5
}
 4ba:	0f 90       	pop	r0
 4bc:	cf 91       	pop	r28
 4be:	df 91       	pop	r29
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <mirf_write_register>:

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	df 93       	push	r29
 4cc:	cf 93       	push	r28
 4ce:	0f 92       	push	r0
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	8b 01       	movw	r16, r22
    mirf_CSN_lo;
 4d6:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit(W_REGISTER | (REGISTER_MASK & reg));
 4d8:	8f 71       	andi	r24, 0x1F	; 31
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	49 83       	std	Y+1, r20	; 0x01
 4de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    SPI_Transmit_All(value,len);
 4e2:	c8 01       	movw	r24, r16
 4e4:	49 81       	ldd	r20, Y+1	; 0x01
 4e6:	64 2f       	mov	r22, r20
 4e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <SPI_Transmit_All>
    mirf_CSN_hi;
 4ec:	2a 9a       	sbi	0x05, 2	; 5
}
 4ee:	0f 90       	pop	r0
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <mirf_set_TADDR>:
    mirf_CE_hi;
}

void mirf_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
 4fa:	bc 01       	movw	r22, r24
    mirf_write_register(TX_ADDR, adr,5);
 4fc:	80 e1       	ldi	r24, 0x10	; 16
 4fe:	45 e0       	ldi	r20, 0x05	; 5
 500:	0e 94 63 02 	call	0x4c6	; 0x4c6 <mirf_write_register>
}
 504:	08 95       	ret

00000506 <mirf_set_RADDR>:
    mirf_CE_hi;     // Listening for pakets
}

void mirf_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
 506:	bc 01       	movw	r22, r24
    mirf_CE_lo;
 508:	2b 98       	cbi	0x05, 3	; 5
    mirf_write_register(RX_ADDR_P0,adr,5);
 50a:	8a e0       	ldi	r24, 0x0A	; 10
 50c:	45 e0       	ldi	r20, 0x05	; 5
 50e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <mirf_write_register>
    mirf_CE_hi;
 512:	2b 9a       	sbi	0x05, 3	; 5
}
 514:	08 95       	ret

00000516 <mirf_send>:


void mirf_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
 51e:	16 2f       	mov	r17, r22
    while (PTX) {}                  // Wait until last paket is send
 520:	80 91 20 01 	lds	r24, 0x0120
 524:	88 23       	and	r24, r24
 526:	e1 f7       	brne	.-8      	; 0x520 <mirf_send+0xa>

    mirf_CE_lo;
 528:	2b 98       	cbi	0x05, 3	; 5

    PTX = 1;                        // Set to transmitter mode
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 20 01 	sts	0x0120, r24
    TX_POWERUP;                     // Power up
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	6a e4       	ldi	r22, 0x4A	; 74
 534:	0e 94 c5 01 	call	0x38a	; 0x38a <mirf_config_register>
    
    mirf_CSN_lo;                    // Pull down chip select
 538:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( FLUSH_TX );     // Write cmd to flush tx fifo
 53a:	81 ee       	ldi	r24, 0xE1	; 225
 53c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    mirf_CSN_hi;                    // Pull up chip select
 540:	2a 9a       	sbi	0x05, 2	; 5
    mirf_CSN_lo;                    // Pull down chip select
 542:	2a 98       	cbi	0x05, 2	; 5
    SPI_Transmit( W_TX_PAYLOAD ); // Write cmd to write payload
 544:	80 ea       	ldi	r24, 0xA0	; 160
 546:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SPI_Transmit>
    SPI_Transmit_All(value,len);   // Write payload
 54a:	ce 01       	movw	r24, r28
 54c:	61 2f       	mov	r22, r17
 54e:	0e 94 67 01 	call	0x2ce	; 0x2ce <SPI_Transmit_All>
    mirf_CSN_hi;                    // Pull up chip select
 552:	2a 9a       	sbi	0x05, 2	; 5
    
    mirf_CE_hi;                     // Start transmission
 554:	2b 9a       	sbi	0x05, 3	; 5
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
